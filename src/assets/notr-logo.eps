%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 16_1209_whiskey_3.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: Alex
%%CreationDate: 12/17/2018
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.1 x249 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">16_1209_whiskey_3</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-12-17T19:58:20+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-12-17T19:58:20+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-12-17T19:58:20+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUj17zr5c0O6isr25d9RnQyQabawzXd26A0&#xA;5CC3SWTjXbkRx98BNMowJY9qP5t2lm3D9BagpoDyvJNP09QDx3YXt1BINm/kyPG2DD5pSPzonnIW&#xA;1t9CVySvGfXo3YMBupWytr34q7UrjxsvB9/yTa38w/mLfi1NquhxfX4jJZmuoXCtx3YsTDbcR4cq&#xA;E48RYmMR3pU/nH8w2maBb2wjuI/76EeXNfnpvsQyyR7Ee2DiLLgj+CEbY6j+Y+qyrBBr9nZzqpZ/&#xA;U8r6rBGaUFPVu7yNSfAbHHiKDGI6faE0h0z8042JfzPpEwIpxfRZwB7/AAakhx4ix9Hcfn+xV+rf&#xA;mijAjWNDnQg1H6Lu4SDtTf8ASE1e/bDxFfT3H8fBLNc8xef9Aszd6lc6AIOdBK630AK0qfhX6ya7&#xA;YOIpEInlaQw/nffqKyxeXbiMn4Xi102zdaBeF9aW45E/5ePGy8D3/JPNP/OOwm/3t0LU4Y13e7sk&#xA;h1e2A/m56ZJdvT5xjDxsThPf+j72UeXPOXlfzIsx0TUobx7cgXMCkrNET09WFwsiV/ylGSBtrlAx&#xA;5pzhYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5z5W0y9u/M3mSaeOG40jUL2&#xA;/h1QyD980kAtIbOIH/fSwLN8Pj88qPNvkdgybSvI/kzS3DaboWn2b1qZILWFHJPUllXkSfEnCAwM&#xA;yeZVrDzHYXtxFagendTNqAijrWqaZdizmbsftunbvhKOEpyn2Rko8mJaX+8OAc1WN9o/PIlLlFTi&#xA;ApVQAOmWUxcQDiqk6gGnY9srIZBi03kPyXqN3JPeaJZvdI/KO7WFI51JrUrMgWRfobIBlGch1Y35&#xA;rEkPn7y3fQ2xtnsNTtdKgvSGElxb3drO9zG0jGssX91x60kU71rSQO7ZH6SPJ6llrjuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5d5buJU8+yIJikUmoa3G0NdpGP1Vxt/kiM5STu&#xA;3n6fk9NT7QycebUWKXVtHbfmRoUaElW0jXpTypXlLf6ZI3Sm1W2xkzB9J94/Sy5PsjJR5NZWj+8O&#xA;Ac1Y3f8Anzy7BfSafaSyatqkZIk0/TI2u5UO+0xjrHB06yuoyJ5tggaS+fz95gs7mBLjyLrpjuSV&#xA;he3OnXHEgFj63p3hEWw6saE7A1x3CeAHqEQ35jxIlZvLuuRMASyGzDsKf8Y5Hr9FcPGGPh+YTry9&#xA;5o0XzBbyy6bMzPbP6V3bTRyQXEElA3CaGZUkQkGoqu43FRkgbYyiRzTKTtgkgIK0p6s/z/icqioe&#xA;Za/Ndz+eUjZ2eG0806X6ak7IraYCafN3wj6m8cv80/e9dy5x3Yq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq818s6Q115rutREoQadrWqVjI3f14kTY+1K5SfqbpHavIPRk+1k482ssR&#xA;82a1oui+ctE1HVJxCo07UraEAPJLJJNPYOI4oYw8kjsISQEUn4TjNnAEg1+OaxvN3mzUVC6JoYsY&#xA;DX/T9af0jTsyWcHqSt8pHiOR8RBjEcz8lCTyq+o1bzLql1rRb7VkD9T08e31W3IMi+08kmRMl8Su&#xA;QpHz3eheX9NRZHttK02IhIYlCW8ILdEjReK1PYKN8iSx3ke9BeYtY8wy+Xprfy5Zzz3WoW7izvTI&#xA;lqttIyH05XEpEuzUPERmvfJCVJgBe67yk3mrzLY6Z5j1C/trOwuoEnXR7GAs/wAa1MdxdTlmJRjQ&#xA;rHGlCOpyfDbKfCDS3VYl0T8wNA1ZTwt9YE2iXjdmYxtd2hf3R4JEQ/8AFlO+COxUC4kfFm8h3AyU&#xA;msIW3iZGkZv2m2+QyACQwDX9IurPzSl9KVMWp+YNNmtwpJYJFapAeW2x5xn6MRzbAdvg9My5pdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirzPy7cSx+a5olP7ufXdTEi/6tvyB/DKf&#xA;4m48vgGZ+ZF1x9EuY9Ckjg1WUJFb3EoBWESSKjzcW2YxIzOFPUimSDAVe7E3/L2+0/XbddFvpbZL&#xA;uznfVdcmjivL+e6SSERCW4uFchWV3KxqOApsowTiz47G6PPkLWpiTP5q1SWMkfu1+pQDbrRoLSOT&#xA;f/XyIgWHEO4JjquiMujyKxuJzZx+tHHbzyxTytAvJV9RGjZi5WhDGjd8eAoHNdp62eq2NlrNn6dx&#xA;DcwLPZz0HL0p1V/hJFRyFKjBwqQRsqkEGh2IyLFgf5faTYeZrzX7e9upLrQtE1O6ttK0tHlgiJnl&#xA;NzNcScGX1v3szxRVqqqh4jfLobhvmTEDvIR/5leSrGw/LvWDoKTW11p7RavaFJ5XdJrCQT/ufVaQ&#xA;IzIjL8I74JClxzuQtGR6d54tNNTV/LnmBvMVs8IuYNK1eKBTPG681SK8tY4GjZgfhaRJB4+OICkx&#xA;5EUmHkn8wdK81WycIZdN1T0I7mXSrsBZhDKAUljIJWWJq7Oh9jQ7YgsZwMUl8wTT3Hm2CGhYW+ta&#xA;aqKKn4fQMjH/AIY4BzSOXwek5c0uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5&#xA;VpKyjzhbyK1I/wDE2qRSDueWnzOPorHlJ+pvPL4B6Lqmm2+qaZeaZc1+r30EltNxNDwlQo1D2NDk&#xA;g1g1uxXyn559TT9K0/XHWPVIrPUf0xeyMscSTaLcQWly78qBRK04lU1pxxJZyhua/FoPTPzv8k6x&#xA;qdxp+karYrDAsitqt7dW8EPrAURYrd5EuJhz6txVKfZc4iYCTgl3ILVfOVvpStLqn5jWLzSA+la6&#xA;dZQyyFj09O3SS8nZR9PzyE8kQLJFM4YZSNRibYh+XPnGKLWJvL83nS60+zgu+ek215pkFolzBcn1&#xA;uPqSxUiJnMsaR8geIHDwFWPUQn9MgW/UaWcN5QIe5Xln6ykoeDkUqP1/PLiHApivl3Sbby15wttP&#xA;tk9Gx1HSFt4VJr+80qT4aseryR3rEnqeG/TDDZmSTH4/enGoyajdeYJIGjZNGtLSkhYfBc3Ny1Ao&#xA;/mWCJDy7EyDuuMyx5R82D6Tqd9a/lqnla0lKaxDfyeVLWWtWjjRm4Tiv7UWmj1wD4YAdm0i5X8fx&#xA;8Ux85aLp9t5a/SVqy6fe+WLaS60e/H/Hv9XhPwN/NC6JwkQ7MvvQiAa8cjxe9p5Gl83pK68Hk1Ww&#xA;ZkP7JOnMafRkx9TI8vh+l6VlzS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXgn&#xA;nXWNQ0q3mutMuzZ3y+bruOK4RY5GQtYXFaLKsifZ/mXNZ2hnlixmceY/W7Ts/BHLlEJcjFJrfz3+&#xA;YZt3kk83XZnZvTtIPQ0uP1JODPxLfUXoOKE1pmij23nPSNDnsf8Aine/yJg5C7Pn+x55Bf6zqHnl&#xA;f8V/WtfjeK4vjCLILGZ5TbwuRCscKsoFvGWbiFLUPENU5larWSy4SYyEDYH1eX6e5jh0cMOQAgy2&#xA;7v1/e9Rgsre/s1EHlS4uIQeMcDWtuvTrRZHUZz+LTZpyqMxxH+kWzLqsUPqH2LW029svVgh8kX1o&#xA;gXm0kaadAtB1NfrKE0+WW6jRZcZ/e5B8eI/71Om7Rx36AfsW21haTC5t7mGOeN/3cqyKrBk/lYEG&#xA;o9swhOUdwad1mAkNwnGh+Xvq11D+irm+tFtyGSCO/vUtlC9AbcS+iR/klKZfj7U1XIT+wffTpM+n&#xA;wRFyip+c9D1eKysbxtcvIV0+7Ny9y19PGyRyqY5z6ztVQsRagrT78y8faupB3lxWNtuvRxoYcE9h&#xA;Gq+5Mn8t6udPr+n9UkjC8+P6QuS1Ov2+VT9+QPa2qq+JHg6cy4eBgUOiXEfn6eNtZ1NY5bUX8AW9&#xA;uA7XIpayymQPUssHpx/6rU6Uy89sZ/AEgfVxUflt+n5OR+QxCVVtX6UH53sb2S+sdHi1vV5vr5eW&#xA;+hk1G6eL6rbrzflH6nH4m4J0/arktL2rnlCU5HYDbYczy/X8GZ7PwjhAjuT9g5/qZT+Wd3eSXdn6&#xA;91cXUh8ywo811PNcyso0uRgDJO0j0BpQVzoezM08mISkbO7ou08UceUxiKHC+hM2rqHYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+cvPdvLLaam6CqwedbiSQ+CnS5Er/wTjNL2zID&#xA;BIHrX327vsiJOePlFikNxHFqNhG68jPMyRmv2WEEj1/4FCM5KIJjKug/SB+l66JAnH3/AKCu1PUm&#xA;0/zj5flp+5lW5gun6Ujme3iT6PXkjzI02Pjw5B12I+HEfutjrJ8OSHx/R+mntHlu/CxLDy4yr8Uf&#xA;uD1zA02YwlcTRDpu0MFm+iEvNfurq51m1nkDtb3iW8IAAKwm0t5iDTxeVsyO0M8p8MpG5GP6S1dn&#xA;6cA2BsPvYbLPcQXDvFCZleeKOZV+0qSErzA/yWYFv8mpyiEQeZrZ6PKSIxZvZRajbWAnsYI7i6uG&#xA;UBJ5DFEib/GzKsjH5Ab+3XJaOMBIGf0vO6/IZHhHRjv5kX9xZ+Stb/xBqkNy91bSQwW0MK20MZeJ&#xA;0WONS8sjNIz0+KQ17Bd82WXUDPnxjHGuEj5A3bRo8JhGRPKixyLXNLnFu+mwXWr6nGiLNcaY7xQs&#xA;yqARLdB4YHXbdS7bdswfDyRsSIhA9Jc/hHc/YHaHglRrikO79azVp9egmg1qXSQ9/bpLDHb21wXE&#xA;cMxjLtK3phmNYl+FI2p45LDHGYnGJek1uR1F8t/PqXI9VCXDZQ2jnSbwajqcmqRXXmGa2aF7ACWJ&#xA;rWBd+IS4SGZub7s5QDYAdN56mBhGMYj0Xd95+Fj4W14M0p5CZDhPIDuCfflhE4nspSPgbzVGin3X&#xA;R2J/4kM6nsb+4j8fvef7Y/vz/VfQ+bl0jsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVfOnnmRlstWUMVD+dLhWANOQ/RrtQ+O4rmk7ZF4T7w7zsg/vx/UYO7Aa9ooP7U83H5/VZT+rO&#xA;XxD93P3D/dB6sf3kPef9yU31PQJNYvFhHwxPY3cDTVHwSSNC8TAdaq8IYU8MdNqBjF9eKJ+V397P&#xA;WYTOvcR91fczHy/e3F5o9pcXUTW920a/WIWHErINnFPDkDQ9xmv1OMRyEA2OjjAkgEpdNo9ws+ry&#xA;z30lpbXt4tyfQcI7xrZ28BDSkcoxyhY1Qg9N8vjmBEABZjGt/wCtI8uvPqwji3O9C/0BAWHmOK81&#xA;h9N0O3fWZjGzsbV0ZE9Mqg5zSMsdCWNTyrt45kDRy4eKfo9/6mzPrYQAHP3PS9I0nX30qSPXb6O0&#xA;ldAttDpbeo8S0p8U80fFm6dIwB75mS02mxAEzM/Ifjb5vOT1MpyJjCvMsTvvJvlBL8q8LatqFuaz&#xA;XOpO926l91CCWsaf881Ga3Pq8gFR9Ef6O33c/i7PSY+IXLfutD3miar65m0vWJbIGn+iSRRXFsKC&#xA;gohCSL8lkAyiGeFVOAl52Qf1fY5ZgehpKtX1LzdpdrNcXdrZahFGo5SW8kts9CaV9J1uBQV3/eZl&#xA;YceHIaiZR99H7dvuZxnkiLIB+z9aVeYNJa58m3Gq3saW2p2aS3FvJC5f0WjVitJCsZNaUcUoRUZZ&#xA;p8gjmEYm4SoG+t+W/wAG7USMgRIASiCR5H37M0/J4+p+jvUXf/E8zFSOh/w+x7+Bzq+x/wC5HvP3&#xA;vJdsH9+f6oe9ZuHTOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV85/mLbSRw3yn&#xA;4qedJpCV6BZNHkYV/wCDAzTdsH9xL4feHddkf4xH+qWHiBX1HTpWNPq85cbgVLwyRU3/AOMmcjCV&#xA;RkO8fpB/Q9eB64nuP6CGSW81xFqMB4r9U4Ses9fiD1UIAPAgtX5DKqHCe/8AH7HLmCdun4/aq3Vr&#xA;5a1LUCfrKrqUKj1Da3TwThAdvU9B0Yr7NtlsZ5IR5ek94sfa4EsUZGv4vI7tXumeV3Vlawa5lRhx&#xA;e9uJr5WIAIdVnklRAD4KDUfThOqnWxEf6or7gGODQ73MmXvWeSryW08yazcwBQYo7WzWMj4Qiq0x&#xA;oBTvN+GHKaxx8+I/o/QuowRySIPIUP0/pZrJ5iu5k4lhFXrwBH4kk5hSMujjx0EInv8Ael4e3WR5&#xA;FHxyU5t3NNhlfDIuSMZX/WI/fB4ZXgLHvOjTy6BdC3jaSRzEiotSaNMgbp4AknM7RACYvz+5csTw&#xA;UOf7UJ5oeNvIOqQlqF7W4Q+37tiT92Ok2zwP9Ifez1MLM/6p+5PvysWVH8uS7oLvzRcOQD1A8uXC&#xA;0P8Aso/wzruxT+6ruJeT7ZH74n+gPve+5u3SOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV4p50sL670LzxJYW5u7uy1tbpLdRV3SO1tfWCAbl/RZ+IHU7ZrO0NN40DF2Wg1Pg5Yy6E&#xA;V9ryZzBqVislrcUVistvcx0PF0YOjUPgw3B+RzjReKfqHvD2e042D8UQ91q15D9WvLW1mQEEut1N&#xA;bhzv9pBG9B/klyMnDwwbBkP80H7b/Q2SyzIoxB+JH6P0om2/SFlBwtNN02CIb+nFeKg/4FYME+CR&#xA;uU5E/wBX/jyxzSiKEAPj+xTj1rzFLOIYdGjlY9Ct2Kf8NEuDwsX88/6X9rIajJ/M/wBl+xfbyeaN&#xA;FvLzVLrTK216yFoLeeKWWN0QJUh/RVlYKOjVBHvlkxinEREt494NH72qOSXESY7HuPLp5Lrzz1Pc&#xA;RGH9D6kgJH7yEwI23gRcA5GGmAN8cP8AZf8AEollB/hn9n61O41LXdTRJbW01aDiBxSK406OpX+c&#xA;POzb96jJwjCGxljPwn/xLGUhLlGY+Mf1qcw86g8lTUVU70a805ae32W/XkwcPUw/0s2J4u6fzi6X&#xA;zFrssSWlzpkjiIxkyNdxfE0ZDBmaEfFutTtQ5SceMEkT7/4T+lujlNVwfav1u+tZ9OniveMVkVrc&#xA;FmKgoDUgkU2NNx3yrBxCY4Pq6NmfIDEiX0vS/INhc2un/l7LdWos7q+1u8u5YuJRysulal6DSBt+&#xA;ZgEfKvyzt9Dg8KEYvCa3P4uWcun7Q9szYOvdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirB7e9tdPk8wXt2/pWyam4eShIFYoVFQoJ6sMonzZyF17l+q/lR+Xusy/W77RYVvJPimubV&#xA;pLOV2O5aSS1aFnavdiTkJYIS+oAt+PVZID0yIS1/yB/Lwk8F1CJSSQo1C7YCvaskjt+OVy7OwH+E&#xA;fIN0e1M4/iKm/wDzj9+XgjYU1Iuxr6n6SvAR7ACQLT6MB7Pwj+GPyH6l/lPP/OPzP61ez/JbyHp0&#xA;i3Ea37iI8vTl1C7kUn3VpN8jPs/BIbwj8q+5lHtXUR5TKnqn5O+U72RpzcahEku4hjuWCKOtACGP&#xA;3nKx2ZpwNoBlLtjUn+L7kFa/kV5MWX95cajMpFOL3bAfP4Ah/HCOzcH80MP5W1B/iRo/InyABThf&#xA;f9J91/zXln5DB/Mj8kfyln/nFo/kR+X5NeF//wBJ91/1Ux/IYP5kfkv8pZ/5xU5fyI/L4kKRqG53&#xA;A1C6B+8SA4/kcH8yPyQe0s/84q1n+T35eaNew3dtpInuoqPHPezT3jK4Ozr9YeVVYdioGWDDCH0g&#xA;D3NOXVZJ/VIlV1+Rx518iRA/A2qXbMPddIvQP+JHLYc2qHKXu/SHoWXtbsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVYGt3GIPOdoYLma7g1DiLeyCtdH63a2/oyRB/gH2/tt8K8W5f&#xA;ZNKpBurkmkE/n+aWMvZaZY2wI5B7ia6mK96hIbeNG9gzD3xR6WTTCYwuIWVJipEbupdQ1NiygoWA&#xA;PbkPnlrUxabSPP4jcyeZbULQn91pnFhttQvcyD71yErpsBj3fahoNH82/Vi1z5leVAQOK2duhNCO&#xA;pIfKuimQrknE2mXly9tcRanc2sUPHnZxLbGKXixJ5mWGSUch8J4Ou3Sh3yQ5MeiM9OQHocWNL+c/&#xA;8uFO7HNT0jz1PfNNYeYo7S1JJW0ewSYAdhzEsbHAyEh1CidO/M+NgYNX0ecKD8M+m3MTE02q6Xrj&#xA;r4JikcPcfn+xbf8AnLTNKtUHmXVdOh1IEo1vaSl2dq/CsUB5Tu5qPhVScjJTAk7BIbG91LWfzD8p&#xA;pe2gs57RNU1dbJgRcQWTRJY2rXQ5EJLM08jcf2R8PUHJwG7MgCJ+D1bLWh2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksf1/wAlabq99Hqcdzd6VrEUforqenSiKYxVLCORXWSGZAxJ&#xA;VZY2APSmAi2cZkbdEu/w1+YtvT6p5vhuAtNtS0uOUtTxNpNYjf2GR4WXHHu+1oQ/nFHt9a8vXVP+&#xA;Xe9t+Xt/fXHH574d0ejzWySfnFwINj5em5ClPrl7DT6fqs1fwwEEp9Hmoq/5tRWrpJoeh3BqCqw6&#xA;tdxt13+3pxH4jI8Bpah3n5ftbj1T82EiCDyppdR0b9NSfq/R+ERK1DvPy/aoS3/50vKvpeX9HiQ0&#xA;B56rM9DXrVbJdvowcJWod5+X7VQt+dBH/HP8v1/7aV7/ANkGPAV9Hefl+1RW2/PB4jyXy7DLXYi4&#xA;v5VA+XpRHHgK+jzdL5Z/Nq/aP65rWg2voSerbSx6XPdyRvxKh1M90ihqMRUDocIgUiUB0PzULX8q&#xA;/NK3DTT+dJIDJX1X0vStNspWDGrUmaK4cV+eHgSco7vtZT5U8jaH5ZN1NZevc6jflW1DVL6Z7m7u&#xA;DGKJ6krn7Kg/Cq0UdhkgKa5zMmQYWDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:02eb958b-35c9-d344-b730-392d88ef65f4</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:02eb958b-35c9-d344-b730-392d88ef65f4</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:b4b081d8-43d1-9f42-b660-513d38fa5686</stRef:instanceID>
            <stRef:documentID>xmp.did:b4b081d8-43d1-9f42-b660-513d38fa5686</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8b6f86be-4d69-e941-bc88-ac02da303de0</stEvt:instanceID>
                  <stEvt:when>2018-12-17T19:21:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02eb958b-35c9-d344-b730-392d88ef65f4</stEvt:instanceID>
                  <stEvt:when>2018-12-17T19:58:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
.000111234 500 li
.000111234 -.000124417 li
500 -.000124417 li
500 500 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
339.638 230.143 mo
339.522 231.744 339.564 233.318 339.605 234.892 cv
339.654 236.839 339.712 238.785 339.473 240.781 cv
338.962 245.068 338.723 249.389 338.591 253.702 cv
338.335 262.402 338.607 271.118 338.607 279.826 cv
338.607 284.758 338.583 289.687 338.549 294.619 cv
338.484 303.418 338.401 312.217 338.401 321.057 cv
338.401 327.438 338.285 334.786 336.348 340.648 cv
334.188 347.204 325.999 348.293 320.177 348.879 cv
312.195 349.678 304.329 351.401 296.346 352.193 cv
282.625 353.554 268.178 352.894 254.292 352.391 cv
248.758 352.193 243.266 352.169 237.75 352.177 cv
235.441 352.177 233.116 352.184 230.79 352.184 cv
222.478 352.184 214.339 352.159 206.003 351.839 cv
201.146 351.648 196.355 350.65 191.416 350.337 cv
182.32 349.777 162.76 352.152 160.707 339.189 cv
159.973 334.596 160.707 329.509 160.814 324.898 cv
160.946 319.275 160.74 313.626 160.674 307.994 cv
160.641 305.175 160.608 302.346 160.583 299.517 cv
160.509 291.007 160.525 282.498 160.839 273.987 cv
161.161 264.999 160.014 255.912 160.014 246.776 cv
160.014 244.113 160.039 241.44 160.072 238.776 cv
160.138 232.304 160.229 225.847 160.014 219.563 cv
159.486 204.622 160.088 189.696 160.08 174.688 cv
160.08 169.865 158.77 162.814 161.375 158.461 cv
162.818 156.045 164.847 154.857 167.345 154.123 cv
173.092 152.425 179.121 151.732 185.074 150.618 cv
196.998 148.383 209.062 149.266 221.011 147.782 cv
233.099 146.289 245.451 145.86 257.59 147.057 cv
264.294 147.724 271.328 147.584 277.999 148.309 cv
287.168 149.315 296.511 148.12 305.829 149.126 cv
312.005 149.794 318.223 150.948 324.127 152.474 cv
328.695 153.645 335.803 155.516 338.343 160.101 cv
341.147 165.156 339.803 173.691 339.638 179.43 cv
339.44 186.184 340.083 192.855 339.844 199.634 cv
339.605 206.411 339.597 213.206 339.844 219.836 cv
339.976 223.266 339.877 226.779 339.638 230.143 cv
cp
.00308232 .00985733 .0358282 0 cmyk
f
333.156 253.944 mo
333.305 257.261 333.451 260.576 333.453 263.814 cv
333.46 272.742 332.068 281.747 332.69 290.477 cv
333.431 300.882 331.318 312.005 319.707 314.69 cv
301.601 318.88 283.249 314.847 265.011 315.49 cv
255.964 315.808 246.927 316.04 237.799 316.04 cv
220.842 316.04 203.553 317.483 186.666 315.762 cv
180.911 315.18 173.4 314.621 170.306 309.164 cv
167.662 304.501 167.384 298.455 167.158 293.225 cv
166.789 284.665 167.031 276.373 167.056 267.932 cv
167.085 258.498 165.458 249.111 166.1 239.668 cv
174.46 238.369 183.151 240.045 191.62 239.351 cv
195.897 239.002 199.176 235.37 203.358 234.434 cv
208.789 233.221 213.296 235.046 218.677 235.38 cv
223.85 235.703 228.649 233.519 233.378 231.854 cv
238.594 230.017 242.493 231.171 247.411 233.923 cv
254.039 237.63 258.786 237.388 265.922 237.194 cv
274.672 236.959 283.44 238.013 292.215 237.705 cv
306.082 237.219 319.109 239.92 333.122 236.904 cv
332.629 242.297 332.896 248.119 333.156 253.944 cv
cp
0 .708186 1 0 cmyk
f
160.699 184.378 mo
160.415 181.464 160.901 178.419 163.505 177.018 cv
169.59 184.598 165.647 206.732 165.647 216.537 cv
165.647 230.352 166.086 243.924 166.059 257.767 cv
166.033 270.943 165.514 284.697 166.885 297.761 cv
167.622 304.781 171.793 307.224 173.502 312.995 cv
174.363 315.902 173.285 329.585 171.118 331.268 cv
164.136 336.695 161.022 312.521 160.699 308.893 cv
160.699 184.378 li
cp
.087129 .0308843 .156435 0 cmyk
f
338.813 161.699 mo
338.813 160.665 334.459 167.016 334.183 168.203 cv
333.007 173.264 334.284 178.539 334.137 183.624 cv
333.596 202.236 334.691 220.325 334.691 238.802 cv
334.691 249.543 335.891 261.092 334.521 271.752 cv
332.971 283.807 335.482 305.453 324.897 313.943 cv
322.692 315.712 319.489 314.961 318.52 317.874 cv
317.954 319.575 319.898 324.224 319.826 326.622 cv
319.694 331.016 316.629 343.001 324.693 341.373 cv
329.719 340.358 330.187 332.999 332.734 329.982 cv
339.464 334.236 338.419 315.175 338.429 311.169 cv
338.453 301.948 338.477 292.728 338.5 283.51 cv
338.564 258.798 338.628 234.087 338.691 209.376 cv
338.732 193.485 338.827 177.593 338.813 161.699 cv
cp
f
279.854 152.631 mo
291.334 152.631 311.2 150.21 311.208 166.737 cv
311.214 177.908 311.519 189.074 311.713 200.242 cv
311.811 205.863 311.893 211.486 311.894 217.108 cv
311.894 221.102 313.709 232.058 311.624 235.357 cv
309.088 239.37 293.697 238.29 288.544 238.582 cv
278.092 239.176 267.504 238.99 257.175 237.153 cv
251.337 236.116 246.127 235.757 243.56 229.744 cv
240.661 222.949 242.612 212.911 242.356 205.304 cv
241.939 192.891 242.335 180.391 242.335 167.887 cv
242.335 160.01 239.693 154.116 248.316 152.594 cv
258.852 150.731 269.233 152.631 279.854 152.631 cv
cp
.00308232 .00985733 .0358282 0 cmyk
f
246.972 338.064 mo
250.238 341.832 261.07 340.445 265.836 340.619 cv
274.572 340.937 282.689 340.341 291.364 341.01 cv
295.983 341.365 306.033 342.508 308.693 337.321 cv
310.17 334.438 309.732 327.476 309.86 324.148 cv
310.354 311.385 287.431 314.824 278.617 315.078 cv
269.719 315.333 256.719 313.762 248.299 316.15 cv
240.501 318.362 242.872 333.335 246.972 338.064 cv
cp
.0520943 .0115969 .0923476 0 cmyk
f
249.756 352.184 mo
241.829 350.052 253.475 347.828 255.941 347.647 cv
261.199 347.263 266.632 347.237 272.021 347.237 cv
281.949 347.237 294.63 344.272 304.116 346.895 cv
302.964 352.903 284.024 351.596 279.027 351.77 cv
269.517 352.105 259.442 353.751 250.169 353.01 cv
249.756 352.184 li
cp
.087129 .0308843 .156435 0 cmyk
f
314.9 157.166 mo
313.317 163.656 314.245 171.932 314.487 178.605 cv
314.735 185.424 313.169 193.646 315.384 199.981 cv
321.188 197.592 320.102 183.39 320.26 177.781 cv
320.375 173.701 321.417 155.653 316.962 156.341 cv
314.9 157.166 li
cp
f
228.729 153.044 mo
228.729 165.436 229.141 177.807 229.141 190.254 cv
229.141 198.695 227.068 210.891 230.462 218.536 cv
238.787 217.32 235.738 163.62 235.738 154.692 cv
228.729 153.044 li
cp
0 0 0 0 cmyk
f
230.378 350.948 mo
230.378 347.124 229.058 321.742 233.999 322.585 cv
238.778 323.397 237.511 347.411 237.387 351.36 cv
230.378 350.948 li
cp
.087129 .0308843 .156435 0 cmyk
f
217.596 352.184 mo
217.596 345.761 215.861 335.368 219.349 329.982 cv
227.132 333.141 222.202 346.146 223.781 352.184 cv
217.596 352.184 li
cp
f
325.757 237.152 mo
324.12 242.539 322.715 248.317 319.36 253.04 cv
318.074 254.849 316.689 257.227 314.487 258.256 cv
312.148 259.348 308.659 257.621 307.039 259.142 cv
308.468 262.302 314.592 261.744 317.511 263.052 cv
321.409 264.797 324.274 267.392 326.032 271.251 cv
328.794 277.311 328.883 291.12 326.917 297.683 cv
324.643 305.272 311.104 305.665 304.318 306.142 cv
295.43 306.767 286.065 306.378 277.106 306.694 cv
272.513 306.856 267.876 306.646 263.362 306.969 cv
259.246 307.263 254.12 306.118 250.169 307.244 cv
246.278 308.351 244.027 312.975 247.902 315.557 cv
250.985 317.611 257.102 316.311 260.888 316.314 cv
279.187 316.331 298.591 316.436 316.748 314.451 cv
336.86 312.252 334.024 287.689 333.453 271.786 cv
333.05 260.555 332.908 248.913 332.904 237.702 cv
325.757 237.152 li
cp
.146303 .745693 1 .0374456 cmyk
f
166.609 239.077 mo
169.29 240.543 176.052 239.351 179.527 239.351 cv
183.951 239.351 188.122 239.762 192.349 239.889 cv
189.1 242.105 184.664 243.604 183.109 247.338 cv
181.033 252.319 182.507 258.772 182.994 263.921 cv
183.602 270.37 183.144 276.867 183.376 283.33 cv
183.553 288.278 182.978 293.545 184.546 298.329 cv
188.033 308.961 200.936 305.557 209.763 305.87 cv
214.382 306.033 218.913 306.143 223.506 306.143 cv
224.897 306.143 229.247 305.438 230.124 306.673 cv
231.539 308.668 228.283 311.299 226.805 312.121 cv
220.902 315.404 210.955 314.714 204.204 315.001 cv
195.559 315.368 186.063 316.063 177.662 313.779 cv
163.151 309.836 166.61 290.822 166.609 279.757 cv
166.608 271.649 166.083 263.295 166.891 255.254 cv
167.136 252.824 169.49 240.652 166.609 239.077 cv
cp
f
236.966 307.177 mo
234.857 308.291 230.515 311.39 232.586 313.009 cv
234.914 314.828 241.132 313.083 243.194 311.492 cv
248.706 307.241 240.909 305.094 236.966 307.177 cv
cp
0 .537499 .922454 0 cmyk
f
243.984 231.793 mo
239.789 234.392 242.172 246.141 242.344 250.749 cv
242.594 257.432 241.922 264.129 241.922 270.962 cv
241.922 281.462 238.233 301.214 251.817 302.709 cv
258.205 303.411 265.949 301.528 272.433 301.059 cv
279.423 300.555 285.754 299.981 292.636 300.235 cv
298.184 300.438 307.225 300.964 309.941 296.091 cv
312.641 291.243 311.19 281.985 311.189 276.321 cv
311.187 263.302 311.189 250.654 310.714 237.627 cv
299.297 237.814 287.598 237.135 275.731 237.565 cv
264.199 237.982 253.268 238.948 243.984 231.793 cv
243.984 231.793 li
cp
f
201.734 236.74 mo
191.853 244.59 200.638 256.366 198.251 264.777 cv
196.26 271.792 197.442 278.935 199.775 285.804 cv
200.483 287.891 197.848 294.609 211.534 295.294 cv
228.374 296.136 231.633 288.211 233.139 285.814 cv
239.485 275.71 237.013 265.132 237.013 254.882 cv
237.013 251.623 241.387 227.491 203.695 235.504 cv
201.734 236.74 li
cp
f
317.374 273.848 mo
317.374 279.924 315.205 292.305 319.537 296.875 cv
323.319 294.063 323.532 286.504 323.558 282.094 cv
323.574 279.392 322.455 266.386 318.61 273.023 cv
317.374 273.848 li
cp
.00158694 .430488 .942718 0 cmyk
f
183.046 271.118 mo
183.046 273.224 184.811 300.697 178.29 296.748 cv
176.716 295.795 177.138 289.437 177.137 287.748 cv
177.13 278.599 177.642 269.384 177.967 260.261 cv
178.118 256.022 177.104 250.787 178.25 246.807 cv
180.184 240.091 183.204 245.988 183.43 249.66 cv
183.864 256.732 183.046 264.024 183.046 271.118 cv
cp
.146303 .745693 1 .0374456 cmyk
f
308.367 259.067 mo
309.462 263.394 314.921 262.538 317.953 263.943 cv
318.828 264.349 323.978 268.497 324.239 268.443 cv
327.567 267.758 325.795 259.071 325.711 256.522 cv
325.549 251.619 328.447 243.223 324.784 239.575 cv
321.966 243.612 321.879 248.996 319.938 253.322 cv
317.245 259.323 314.748 258.84 308.367 259.067 cv
cp
0 .537499 .922454 0 cmyk
f
191.622 239.627 mo
183.153 242.766 182.478 247.587 182.045 255.675 cv
179.959 252.317 177.668 246.462 180.077 242.491 cv
182.568 238.388 187.928 239.132 192.446 239.627 cv
191.622 239.627 li
cp
f
268.31 307.656 mo
278.336 309.824 291.172 305.444 301.242 308.573 cv
296.591 313.264 266.7 312.17 267.898 308.481 cv
268.31 307.656 li
cp
f
197.806 306.832 mo
205.039 306.139 213.476 307.007 220.842 307.315 cv
218.014 311.661 198.053 310.923 196.157 306.42 cv
197.806 306.832 li
cp
f
296.936 203.311 mo
307.075 206.98 308.479 164.824 295.726 159.241 cv
284.871 154.492 259.484 155.244 260.029 171.556 cv
260.48 185.043 271.586 179.446 279.699 182.066 cv
290.183 185.452 287.389 199.849 296.936 203.311 cv
cp
0 0 0 0 cmyk
f
291.186 316.761 mo
285.12 316.761 271.423 314.447 266.456 317.561 cv
258.594 322.488 261.88 330.493 269.645 332.717 cv
277.199 334.88 287.364 331.125 294.378 329.703 cv
300.526 328.456 315.198 322.202 300.76 317.558 cv
291.186 316.761 li
cp
.00308232 .00985733 .0358282 0 cmyk
f
219.382 233.786 mo
213.476 233.786 205.9 232.532 203.824 238.573 cv
201.9 244.172 204.814 252.423 205.021 258.12 cv
205.424 269.21 207.296 287.943 224.267 280.557 cv
237.914 274.617 239.714 234.11 220.18 234.584 cv
219.382 233.786 li
cp
0 .430335 .955901 0 cmyk
f
287.597 238.952 mo
281.086 239.408 274.28 239.247 267.778 238.673 cv
263.631 238.306 257.616 235.046 253.721 236.223 cv
247.221 238.197 249.939 245.73 250.108 250.852 cv
250.367 258.742 251.707 266.182 251.694 274.076 cv
251.683 280.235 249.94 288.515 256.49 291.229 cv
262.187 293.592 272.526 291.229 278.82 291.229 cv
283.635 291.229 295.396 292.777 299.063 289.533 cv
303.545 285.565 301.744 274.091 301.559 268.911 cv
301.28 261.09 300.962 253.557 300.76 245.754 cv
300.533 236.979 295.412 238.404 287.597 238.952 cv
cp
f
321.503 251.737 mo
318.897 254.395 316.056 257.141 314.781 260.812 cv
316.96 263.348 320.053 265.228 323.439 264.842 cv
324.442 260.971 322.895 256.661 322.7 252.535 cv
321.503 251.737 li
cp
f
312.727 258.918 mo
316.023 257.909 320.27 252.893 320.218 258.918 cv
320.169 264.541 314.991 263.732 311.929 260.913 cv
312.727 258.918 li
cp
.0182803 .127169 .744137 0 cmyk
f
207.016 246.152 mo
213.186 243.97 220.766 244.902 227.36 244.956 cv
232.333 244.997 232.565 243.624 232.036 248.546 cv
231.741 251.296 229.952 254.627 229.054 257.013 cv
222.889 273.372 209.938 265.076 207.815 251.339 cv
207.592 249.899 207.405 248.606 207.414 247.349 cv
207.016 246.152 li
cp
f
282.011 247.349 mo
285.22 249.647 295.136 257.016 295.184 248.945 cv
295.223 242.485 284.895 241.315 282.011 246.152 cv
282.011 247.349 li
cp
f
273.235 243.76 mo
275.214 248.816 277.83 255.821 274.43 260.814 cv
271.594 264.98 262.036 268.522 257.258 269.589 cv
248.753 271.486 253.107 262.514 255.772 257.809 cv
256.288 256.898 257.496 256.543 258.075 255.326 cv
258.674 254.066 258.077 251.924 258.563 250.539 cv
259.66 247.414 261.842 245.266 264.947 244.247 cv
268.256 243.159 273.622 242.95 275.23 246.552 cv
273.235 243.76 li
cp
f
307.143 239.371 mo
311.089 239.801 315.6 239.342 319.448 240.229 cv
319.763 244.659 317.493 252.392 311.929 252.535 cv
306.371 252.678 302.922 240.936 306.744 239.77 cv
307.143 239.371 li
cp
0 .430335 .955901 0 cmyk
f
214.595 247.349 mo
218.293 247.349 221.946 247.128 225.295 248.216 cv
223.533 258.636 212.296 253.33 215.792 247.349 cv
214.595 247.349 li
cp
.0537423 .0185855 .160372 0 cmyk
f
270.841 249.743 mo
274.402 254.435 268.254 261.57 262.933 259.646 cv
262.406 255.267 266.818 252.393 270.044 250.141 cv
270.841 249.743 li
cp
f
220.579 246.152 mo
216.631 246.716 217.132 250.679 220.978 250.96 cv
225.603 251.299 223.09 246.566 219.781 246.552 cv
220.579 246.152 li
cp
.0176089 .0121157 .0689403 0 cmyk
f
221.284 176.745 mo
221.204 173.692 221.188 170.635 221.288 167.568 cv
221.442 162.816 221.677 157.756 220.509 153.275 cv
209.269 152.803 206.718 157.79 207.414 168.653 cv
208.602 187.193 206.452 207.942 209.502 226.564 cv
210.469 232.464 219.254 235.806 222.993 229.397 cv
224.324 227.116 223.053 222.292 222.972 219.734 cv
222.716 211.636 222.493 203.784 222.156 195.706 cv
221.891 189.37 221.45 183.067 221.284 176.745 cv
cp
0 0 0 0 cmyk
f
195.039 226.606 mo
195.052 230.043 196.075 232.657 192.744 234.682 cv
189.244 236.809 186.901 234.784 185.453 231.792 cv
180.783 222.151 183.169 204.903 183.48 194.296 cv
183.728 185.819 183.176 176.751 184.276 168.376 cv
185.737 157.249 195.389 153.91 197.619 166.28 cv
199.462 176.502 198.49 187.223 196.081 197.192 cv
193.756 206.807 195.001 216.738 195.039 226.606 cv
cp
f
207.68 200.012 mo
215.707 196.172 224.494 193.359 232.548 189.774 cv
239.105 186.855 248.357 181.032 256.082 183.499 cv
263.632 185.91 265.52 196.391 267.265 202.658 cv
268.886 208.477 274.255 219.602 273.073 225.57 cv
270.658 237.757 258.42 225.128 254.488 220.212 cv
247.518 211.497 241.06 212.246 230.551 212.246 cv
221.827 212.246 212.634 213.09 203.957 212.246 cv
192.048 211.088 196.271 203.266 205.127 199.865 cv
208.194 198.686 211.513 198.045 214.595 196.82 cv
207.68 200.012 li
cp
.087129 .0308843 .156435 0 cmyk
f
314.323 217.032 mo
314.932 224.409 304.164 241.921 320.716 235.881 cv
332.812 231.466 323.216 219.414 315.909 215.476 cv
315.34 216.3 315.169 217.217 315.121 218.229 cv
314.323 217.032 li
cp
f
291.447 200.058 mo
290 200.08 289.022 199.343 287.901 198.377 cv
285.251 196.093 284.743 193.348 281.311 191.801 cv
278.405 190.492 274.098 191.474 271.661 189.017 cv
267.21 184.533 277.136 182.451 280.194 182.935 cv
285.306 183.746 293.343 195.207 291.447 200.058 cv
cp
f
301.374 236.426 mo
301.52 236.249 301.649 236.054 301.759 235.841 cv
302.928 233.576 297.769 223.566 297.201 220.755 cv
296.537 217.474 297.174 213.091 295.153 210.377 cv
292.713 214.752 295.258 219.913 294.397 224.638 cv
293.779 228.022 290.593 232.418 293.019 235.731 cv
294.751 238.096 299.475 238.733 301.374 236.426 cv
cp
f
216.722 195.225 mo
229.01 189.63 268.955 170.606 264.501 198.35 cv
256.427 192.195 257.233 184.891 244.365 187.764 cv
238.853 188.994 222.023 198.607 218.318 195.758 cv
216.722 195.225 li
cp
0 0 0 0 cmyk
f
271.54 217.033 mo
273.025 222.245 272.983 229.664 278.821 232.1 cv
295.945 239.248 283.037 207.217 280.317 201.565 cv
278.854 198.526 273.299 190.702 269.15 191.233 cv
261.645 192.199 270.49 213.347 271.54 217.033 cv
cp
f
307.555 219.009 mo
312.419 226.026 314.399 213.313 309.882 211.672 cv
304.678 209.781 306.073 216.872 307.555 219.009 cv
cp
f
187.07 318.355 mo
188.978 325.366 186.064 334.054 187.448 341.513 cv
188.774 348.657 194.229 349.168 200.644 350.258 cv
208.658 351.62 211.598 348.845 212.2 340.296 cv
212.455 336.679 214.064 322.278 211.701 320.053 cv
208.684 317.211 193.966 319.421 189.463 318.355 cv
187.07 318.355 li
cp
f
244.114 278.066 mo
239.301 296.401 276.603 283.454 273.235 268.093 cv
244.114 278.066 li
cp
.0182803 .127169 .744137 0 cmyk
f
217.786 285.246 mo
220.001 290.727 228.356 288.408 229.355 283.252 cv
217.786 285.246 li
cp
f
250.098 275.672 mo
249.252 283.241 265.445 275.628 266.852 270.087 cv
250.098 275.672 li
cp
.0537423 .0185855 .160372 0 cmyk
f
328.663 346.67 mo
324.986 347.791 321.054 348.021 317.245 348.324 cv
312.243 348.721 307.281 349.47 302.283 349.92 cv
289.649 351.06 276.941 351.191 264.266 351.423 cv
251.895 351.647 239.546 351.897 227.172 351.575 cv
214.734 351.251 202.231 350.817 189.817 349.981 cv
183.893 349.582 177.989 349.017 172.163 347.846 cv
166.867 346.78 162.5 344.911 161.42 339.182 cv
160.973 336.811 161.047 334.311 160.964 331.876 cv
161.457 288.584 161.092 245.25 160.922 201.949 cv
160.91 199.066 160.889 196.186 160.858 193.307 cv
161.162 186.198 160.93 179.022 160.996 171.931 cv
161.029 168.461 161.074 164.991 161.166 161.522 cv
161.288 156.939 165.4 155.257 169.256 154.195 cv
172.865 153.201 176.656 152.888 180.367 152.507 cv
185.433 151.988 190.461 151.175 195.527 150.641 cv
208.395 149.289 221.351 148.955 234.275 148.527 cv
259.56 147.692 285.157 148.123 310.301 151.205 cv
315.527 151.846 320.55 153.16 325.688 154.227 cv
328.074 154.724 330.43 155.158 332.745 155.942 cv
337.503 157.556 338.704 161.424 338.733 165.983 cv
338.755 169.488 338.745 172.994 338.771 176.498 cv
338.831 184.856 339.048 193.226 339.213 201.592 cv
339.145 206.236 339.082 210.879 339.047 215.518 cv
338.855 240.937 338.611 266.354 338.275 291.77 cv
338.188 291.885 338.123 292.02 338.122 292.203 cv
338.078 302.528 338.076 312.891 337.708 323.211 cv
337.525 328.306 337.255 333.36 336.316 338.381 cv
335.442 343.052 333.201 345.287 328.663 346.67 cv
cp
338.513 157.738 mo
335.66 154.412 331.504 153.453 327.374 152.612 cv
322.164 151.551 317.063 150.232 311.788 149.487 cv
300.069 147.832 288.086 147.582 276.276 147.027 cv
250.489 145.814 224.332 146.469 198.616 148.761 cv
190.738 149.462 182.817 150.467 174.98 151.551 cv
170.017 152.238 163.953 153.094 160.735 157.393 cv
159.423 159.148 159.612 161.543 159.575 163.6 cv
159.512 167.093 159.491 170.587 159.487 174.08 cv
159.479 180.355 159.265 186.697 159.495 192.991 cv
159.031 229.028 159.667 265.115 159.693 301.14 cv
159.7 311.437 159.917 321.77 159.876 332.071 cv
159.825 333.578 159.788 335.099 159.856 336.585 cv
159.855 336.608 159.856 336.632 159.855 336.655 cv
159.855 336.667 159.86 336.675 159.861 336.685 cv
160.059 340.787 161.088 344.61 165.013 347.089 cv
168.788 349.474 174.114 349.877 178.409 350.557 cv
184.01 351.443 189.673 351.875 195.33 352.218 cv
220.362 353.735 245.279 353.847 270.34 353.417 cv
283.012 353.2 295.678 352.924 308.286 351.519 cv
315.689 350.694 323.819 350.744 330.891 348.236 cv
337.65 345.839 338.411 339.982 339.105 333.596 cv
339.875 326.512 339.563 319.428 339.525 312.323 cv
339.488 305.618 339.59 298.908 339.618 292.203 cv
339.619 292.095 339.595 292.002 339.562 291.918 cv
339.574 290.918 339.59 289.918 339.603 288.918 cv
339.894 264.639 340.112 240.356 340.254 216.074 cv
340.308 216.003 340.349 215.916 340.348 215.801 cv
340.319 206.312 340.619 196.793 340.581 187.292 cv
340.559 181.949 340.537 176.605 340.517 171.264 cv
340.5 166.913 341.533 161.261 338.513 157.738 cv
cp
.5346 .781399 .703975 .78674 cmyk
f
183.203 335.231 mo
180.464 335.446 177.739 335.887 175.071 336.534 cv
173.85 336.83 166.353 339.167 169.072 341.653 cv
169.181 341.754 169.349 341.709 169.395 341.568 cv
170.476 338.217 175.076 337.703 178.127 337.138 cv
180.164 336.761 182.23 336.525 184.295 336.38 cv
184.993 336.33 186.306 336.568 186.811 335.967 cv
186.905 335.854 186.951 335.693 186.864 335.558 cv
186.255 334.627 184.103 335.162 183.203 335.231 cv
cp
f
233.571 333.134 mo
227.993 332.81 222.33 333.209 216.754 333.466 cv
211.8 333.692 206.417 333.301 201.578 334.415 cv
201.424 334.45 201.422 334.692 201.578 334.727 cv
206.412 335.799 211.838 335.018 216.754 334.817 cv
222.352 334.587 227.983 334.525 233.571 334.156 cv
234.229 334.113 234.232 333.172 233.571 333.134 cv
cp
f
247.664 332.837 mo
246.603 332.377 245.495 332.534 244.36 332.612 cv
243.117 332.697 241.852 332.7 240.675 333.143 cv
240.411 333.242 240.405 333.588 240.675 333.684 cv
241.87 334.115 243.109 334.001 244.36 333.957 cv
245.483 333.916 246.627 333.996 247.664 333.526 cv
247.923 333.409 247.929 332.952 247.664 332.837 cv
cp
f
317.151 336.535 mo
317.528 336.509 317.628 335.972 317.242 335.861 cv
312.017 334.387 306.003 334.498 300.598 334.086 cv
295.266 333.68 289.251 332.819 283.978 333.867 cv
283.737 333.916 283.74 334.3 283.978 334.349 cv
288.835 335.352 294.143 334.949 299.098 335.247 cv
304.99 335.602 311.283 336.938 317.151 336.535 cv
cp
f
332.33 333.952 mo
331.08 338.27 328.091 340.516 323.965 341.974 cv
320.677 343.135 317.139 342.877 313.866 343.907 cv
313.714 343.956 313.71 344.175 313.866 344.22 cv
320.651 346.205 332.283 341.924 333.459 334.265 cv
333.571 333.534 332.545 333.209 332.33 333.952 cv
cp
f
308.123 344.319 mo
307.591 344.405 307.111 344.578 306.626 344.807 cv
306.487 344.872 306.487 345.107 306.626 345.173 cv
307.129 345.409 307.59 345.553 308.152 345.544 cv
308.671 345.534 309.366 345.357 309.422 344.759 cv
309.482 344.112 308.472 344.263 308.123 344.319 cv
cp
f
170.134 324.487 mo
169.971 324.042 169.364 324.021 169.209 324.487 cv
169.002 325.109 169.081 325.754 169.168 326.392 cv
169.256 327.045 169.317 327.922 169.87 328.352 cv
170.056 328.498 170.327 328.506 170.458 328.277 cv
170.76 327.75 170.598 327.154 170.518 326.577 cv
170.422 325.894 170.372 325.138 170.134 324.487 cv
cp
f
172.02 333.744 mo
171.939 332.978 171.73 332.17 171.44 331.457 cv
171.292 331.097 170.822 331.073 170.682 331.457 cv
170.392 332.254 170.616 333.289 171.014 334.016 cv
171.259 334.465 172.079 334.29 172.02 333.744 cv
cp
f
231.418 316.4 mo
232.125 316.283 231.9 315.252 231.256 315.213 cv
219.327 314.489 207.292 315.077 195.346 314.999 cv
189.582 314.962 183.677 314.645 178.117 313.021 cv
172.609 311.413 170.916 307.798 168.745 302.949 cv
168.631 302.694 168.247 302.835 168.246 303.084 cv
168.194 313.314 179.886 315.436 187.739 316.215 cv
195.874 317.02 204.116 316.4 212.272 316.366 cv
218.6 316.339 225.14 317.435 231.418 316.4 cv
cp
f
332.072 302.852 mo
332.124 301.821 330.541 301.833 330.476 302.852 cv
329.964 310.908 323.714 313.571 316.549 314.339 cv
307.878 315.266 298.932 315.203 290.222 315.086 cv
281.396 314.969 272.575 315.172 263.754 315.481 cv
259.082 315.645 254.41 315.768 249.736 315.844 cv
245.588 315.91 241.31 315.57 237.212 316.277 cv
236.976 316.318 236.981 316.702 237.212 316.747 cv
241.779 317.641 246.661 317.165 251.294 317.078 cv
256.485 316.979 261.676 316.845 266.869 316.75 cv
277.711 316.553 288.531 316.729 299.371 316.693 cv
310.593 316.656 331.265 318.779 332.072 302.852 cv
cp
f
167.481 267.661 mo
167.439 267.204 166.81 267.204 166.77 267.661 cv
166.435 271.443 166.528 275.253 166.517 279.046 cv
166.502 284.678 166.046 290.549 166.72 296.138 cv
166.77 296.548 167.448 296.738 167.516 296.246 cv
168.236 291.022 167.836 285.568 167.819 280.301 cv
167.806 276.094 167.859 271.855 167.481 267.661 cv
cp
f
166.795 262.336 mo
166.844 262.756 167.42 262.766 167.456 262.336 cv
168.006 255.746 167.497 248.988 167.377 242.382 cv
167.262 235.981 167.153 229.581 167.021 223.181 cv
166.88 216.318 166.458 209.462 166.342 202.603 cv
166.339 202.419 166.058 202.419 166.055 202.603 cv
165.971 209.464 165.881 216.317 165.956 223.181 cv
166.02 229.087 166.109 234.995 166.195 240.902 cv
166.298 247.999 165.971 255.281 166.795 262.336 cv
cp
f
166.672 195.89 mo
167.02 191.668 166.532 187.259 166.425 183.02 cv
166.338 179.563 166.502 175.788 165.399 172.471 cv
165.35 172.324 165.158 172.361 165.142 172.506 cv
164.705 176.377 165.15 180.444 165.213 184.336 cv
165.277 188.181 164.992 192.232 165.742 196.016 cv
165.853 196.572 166.631 196.391 166.672 195.89 cv
cp
f
165.483 167.238 mo
165.817 166.289 165.64 165.333 165.574 164.354 cv
165.516 163.494 166.123 162.383 165.666 161.626 cv
165.589 161.499 165.429 161.386 165.273 161.401 cv
162.98 161.628 164.249 166.178 165.084 167.29 cv
165.199 167.443 165.417 167.429 165.483 167.238 cv
cp
f
169.209 158.607 mo
175.46 158.416 181.805 156.709 188.068 156.124 cv
194.001 155.571 200.023 155.521 205.921 154.697 cv
206.488 154.618 206.338 153.711 205.789 153.718 cv
199.404 153.787 192.938 154.492 186.582 155.087 cv
180.938 155.616 174.304 155.848 169.095 158.188 cv
168.888 158.282 168.996 158.613 169.209 158.607 cv
cp
f
210.651 154.428 mo
211.23 154.391 211.839 154.435 212.422 154.435 cv
212.968 154.433 213.574 154.542 214.068 154.285 cv
214.275 154.178 214.286 153.894 214.139 153.736 cv
213.704 153.27 213.016 153.339 212.422 153.375 cv
211.711 153.418 211.166 153.757 210.544 154.033 cv
210.351 154.118 210.448 154.44 210.651 154.428 cv
cp
f
219.179 153.891 mo
222.77 154.549 226.518 154.286 230.157 154.239 cv
234.842 154.178 239.54 154.225 244.222 154.051 cv
244.904 154.025 244.905 153.015 244.222 152.991 cv
240.06 152.849 235.882 152.997 231.719 153.056 cv
227.576 153.114 223.263 152.85 219.179 153.614 cv
219.042 153.64 219.041 153.865 219.179 153.891 cv
cp
f
290.899 154.772 mo
296.423 155.71 302.291 155.308 307.888 155.778 cv
314.968 156.372 321.649 158.107 328.596 159.32 cv
329.229 159.431 329.445 158.606 328.858 158.371 cv
323.227 156.113 316.741 155.466 310.745 154.781 cv
304.412 154.057 297.225 153.086 290.899 154.122 cv
290.576 154.176 290.577 154.717 290.899 154.772 cv
cp
f
334.725 161.938 mo
334.135 163.062 333.879 164.323 333.56 165.545 cv
333.218 166.854 332.564 168.235 332.771 169.594 cv
332.812 169.857 333.22 169.959 333.386 169.757 cv
334.154 168.814 334.289 167.559 334.584 166.4 cv
334.94 165.001 335.384 163.543 335.271 162.087 cv
335.25 161.815 334.871 161.662 334.725 161.938 cv
cp
f
332.883 197.511 mo
332.932 198.016 333.704 198.205 333.825 197.638 cv
334.486 194.543 334.212 191.111 334.193 187.957 cv
334.162 183.014 334.603 177.792 333.757 172.923 cv
333.728 172.753 333.454 172.758 333.421 172.923 cv
332.477 177.537 332.888 182.508 332.939 187.204 cv
332.975 190.593 332.556 194.152 332.883 197.511 cv
cp
f
306.995 237.085 mo
308.483 233.097 309.86 229.069 311.593 225.166 cv
313.146 221.666 314.806 217.588 313.193 213.851 cv
313.818 214.232 314.442 214.612 315.049 215.008 cv
318.082 216.984 320.851 219.259 323.386 221.836 cv
326.092 224.587 327.924 227.383 327.14 231.362 cv
326.773 233.224 325.939 234.931 325.126 236.644 cv
319.082 236.763 313.037 236.935 306.995 237.085 cv
cp
304.235 241.492 mo
304.008 240.552 303.78 239.61 303.542 238.672 cv
304.157 238.671 304.771 238.67 305.385 238.666 cv
304.93 239.965 304.524 241.005 304.235 241.492 cv
cp
300.283 226.63 mo
298.511 220.325 296.914 213.917 295.186 207.557 cv
300.693 209.437 307.824 208.832 311.664 213.889 cv
314.547 217.683 310.502 224.354 308.913 227.897 cv
308.498 228.824 307.131 233.447 305.915 237.111 cv
305.227 237.128 304.538 237.146 303.85 237.161 cv
303.617 237.167 303.384 237.168 303.152 237.173 cv
302.237 233.647 301.268 230.136 300.283 226.63 cv
cp
333.609 204.456 mo
333.38 215.188 333.218 225.921 333.072 236.652 cv
332.96 236.584 332.83 236.533 332.663 236.534 cv
330.687 236.552 328.71 236.584 326.733 236.619 cv
328.703 232.33 329.744 227.836 326.666 223.622 cv
322.994 218.596 316.6 213.319 310.556 210.728 cv
306.424 207.686 299.155 206.584 294.872 206.395 cv
293.913 202.905 292.897 199.439 291.794 196.013 cv
290.813 190.452 288.202 184.867 282.358 183.461 cv
278.405 182.509 274.005 182.975 269.968 182.718 cv
265.586 182.437 261.05 181.476 256.622 181.651 cv
253.132 180.998 249.483 182.277 245.658 183.699 cv
236.827 186.98 227.988 190.223 219.168 193.534 cv
211.191 196.528 202.908 198.874 195.278 202.699 cv
190.902 204.891 182.43 207.998 184.514 214.301 cv
184.671 214.776 185.418 214.711 185.407 214.18 cv
185.316 209.528 188.462 208.144 192.049 206.046 cv
195.399 204.086 198.895 202.391 202.502 200.961 cv
209.027 198.375 215.786 196.3 222.356 193.812 cv
228.849 191.353 235.316 188.87 241.859 186.542 cv
248.557 184.161 254.544 180.59 261.047 185.304 cv
261.613 185.715 262.29 184.808 261.786 184.345 cv
261.484 184.065 261.179 183.812 260.875 183.578 cv
265.994 184.148 271.24 184.365 276.248 184.458 cv
280.4 184.535 284.591 184.627 287.26 188.267 cv
289.275 191.016 289.772 194.498 290.887 197.628 cv
292.376 206.578 295.418 215.403 297.876 224.079 cv
299.102 228.409 300.421 232.786 301.633 237.195 cv
297.07 237.276 292.506 237.311 287.942 237.337 cv
284.381 237.356 280.664 237.099 277.055 237.342 cv
276.541 235.671 276.009 234.011 275.587 232.368 cv
274.355 227.569 273.23 222.742 272.079 217.923 cv
271.69 216.297 271.287 214.674 270.887 213.051 cv
271.899 211.025 273.04 209.096 274.509 207.429 cv
277.719 203.786 283.934 206.648 287.98 206.124 cv
288.497 206.057 288.737 205.229 288.115 205.12 cv
283.852 204.374 278.187 203.206 274.357 205.783 cv
272.546 207.002 271.438 209.262 270.465 211.326 cv
269.811 208.71 269.138 206.098 268.429 203.495 cv
267.831 201.302 267.261 199.016 266.574 196.772 cv
266.734 196.721 266.897 196.667 267.056 196.616 cv
270.669 195.455 274.43 194.364 277.923 192.891 cv
278.505 192.646 278.297 191.838 277.661 191.942 cv
274.384 192.476 271.226 193.842 268.095 194.925 cv
267.463 195.144 266.821 195.342 266.176 195.533 cv
265.485 193.444 264.671 191.409 263.594 189.547 cv
263.485 189.358 263.233 189.493 263.264 189.686 cv
263.606 191.787 264.181 193.862 264.815 195.925 cv
262.226 196.643 259.599 197.284 257.147 198.293 cv
256.992 198.356 257.012 198.571 257.187 198.587 cv
259.902 198.815 262.608 198.05 265.217 197.211 cv
265.768 198.946 266.336 200.676 266.821 202.403 cv
267.82 205.956 268.723 209.537 269.598 213.123 cv
267.897 216.46 266.151 219.951 265.336 223.621 cv
265.288 223.835 265.571 223.96 265.689 223.77 cv
267.386 221.03 268.626 217.893 270.02 214.864 cv
270.177 215.515 270.336 216.164 270.492 216.813 cv
272.162 223.731 273.929 230.599 275.76 237.46 cv
275.019 237.538 274.28 237.632 273.554 237.767 cv
273.297 237.816 273.297 238.237 273.554 238.285 cv
274.382 238.439 275.223 238.539 276.069 238.614 cv
276.629 240.702 277.192 242.788 277.763 244.877 cv
277.911 245.419 278.826 245.327 278.767 244.741 cv
278.565 242.726 278.055 240.714 277.467 238.712 cv
280.423 238.857 283.435 238.688 286.351 238.691 cv
291.579 238.698 296.807 238.665 302.034 238.677 cv
303.478 244.057 304.729 249.481 305.421 254.927 cv
305.5 255.55 306.519 255.844 306.633 255.091 cv
307.244 251.055 305.527 246.928 304.612 243.035 cv
304.604 242.998 304.594 242.962 304.586 242.926 cv
304.651 242.876 304.71 242.818 304.739 242.749 cv
305.328 241.397 305.873 240.032 306.401 238.659 cv
312.396 238.602 318.387 238.418 324.38 238.276 cv
324.074 238.981 323.795 239.695 323.58 240.431 cv
323.568 240.473 323.571 240.51 323.569 240.55 cv
322.079 244.212 320.906 248.038 319.341 251.649 cv
318.181 254.328 316.926 256.933 313.998 258.037 cv
311.956 258.808 309.558 258.377 307.427 258.57 cv
307.112 258.599 307.011 259.057 307.349 259.146 cv
311.716 260.279 316.105 259.659 318.974 256.011 cv
320.647 253.885 321.614 251.146 322.587 248.648 cv
323.907 245.256 325.195 241.751 326.211 238.237 cv
328.361 238.19 330.512 238.151 332.663 238.13 cv
332.82 238.129 332.945 238.082 333.054 238.017 cv
333.001 241.975 332.943 245.933 332.895 249.892 cv
332.779 259.274 332.684 268.655 332.559 278.037 cv
332.497 282.72 332.881 287.541 332.62 292.203 cv
332.6 292.557 333.149 292.555 333.169 292.203 cv
333.956 278.13 333.95 263.998 334.075 249.892 cv
334.209 234.767 334.724 219.573 334.032 204.456 cv
334.02 204.184 333.614 204.182 333.609 204.456 cv
cp
f
332.109 296.412 mo
332.152 296.338 331.925 296.618 331.891 296.689 cv
331.789 296.901 331.725 297.122 331.669 297.349 cv
331.54 297.865 331.472 298.389 331.593 298.913 cv
331.741 299.553 332.628 299.479 332.812 298.913 cv
332.954 298.474 333.003 297.991 333.03 297.532 cv
333.045 297.292 333.027 297.072 332.99 296.833 cv
332.97 296.746 332.94 296.663 332.9 296.583 cv
332.896 296.576 332.665 296.246 332.755 296.412 cv
332.62 296.161 332.247 296.178 332.109 296.412 cv
cp
f
190.557 168.685 mo
190.632 167.119 190.511 165.825 189.922 164.373 cv
189.878 164.263 189.697 164.266 189.702 164.402 cv
189.762 166.03 189.702 167.675 189.711 169.306 cv
189.718 170.578 189.534 171.914 190.067 173.091 cv
190.15 173.275 190.481 173.236 190.512 173.033 cv
190.726 171.626 190.487 170.123 190.557 168.685 cv
cp
f
189.775 174.746 mo
189.584 175.359 189.366 176.263 189.776 176.831 cv
189.921 177.03 190.171 177.03 190.315 176.831 cv
190.725 176.263 190.507 175.359 190.316 174.746 cv
190.233 174.478 189.858 174.478 189.775 174.746 cv
cp
f
263.093 270.477 mo
262.907 270.589 262.979 270.905 263.207 270.896 cv
266.595 270.754 271.069 269.599 274.76 267.663 cv
278.943 267.247 283.162 265.453 287.045 264.081 cv
292.102 262.291 297.254 260.656 302.263 258.751 cv
302.985 258.476 302.714 257.422 301.942 257.586 cv
296.722 258.692 291.676 260.904 286.666 262.706 cv
283.959 263.68 281.132 264.423 278.356 265.265 cv
278.998 264.713 279.575 264.13 280.051 263.51 cv
283.061 259.592 281.585 252.388 280.441 248.058 cv
280.271 247.413 279.293 247.555 279.29 248.214 cv
279.267 252.888 281.256 257.408 279.234 261.969 cv
276.77 267.519 267.78 267.708 263.093 270.477 cv
cp
f
181.856 254.087 mo
182.295 253.148 182.311 252.096 182.41 251.078 cv
182.536 249.797 183.316 248.535 183.286 247.288 cv
183.279 246.99 182.929 246.742 182.657 246.928 cv
181.647 247.615 181.446 249.066 181.301 250.211 cv
181.138 251.495 181.004 252.88 181.566 254.087 cv
181.617 254.196 181.805 254.196 181.856 254.087 cv
cp
f
183.307 288.388 mo
184.039 283.519 182.973 278.338 182.81 273.432 cv
182.643 268.407 184.088 262.909 182.081 258.13 cv
182.022 257.99 181.798 257.994 181.799 258.169 cv
181.847 268.148 180.692 278.487 182.429 288.388 cv
182.505 288.819 183.24 288.828 183.307 288.388 cv
cp
f
197.852 306.632 mo
204.526 306.963 211.226 306.895 217.905 306.916 cv
225.247 306.937 232.995 307.86 240.286 306.999 cv
241.126 306.9 241.176 305.665 240.286 305.653 cv
228.082 305.488 215.872 305.637 203.667 305.459 cv
199.812 305.402 195.891 305.444 192.092 304.713 cv
187.065 303.745 184.768 300.483 183.992 295.621 cv
183.954 295.376 183.608 295.461 183.588 295.676 cv
182.813 304.317 190.854 306.282 197.852 306.632 cv
cp
f
183.106 291.555 mo
183.113 291.836 183.24 292.364 183.641 292.254 cv
184.05 292.141 184.022 291.64 184.007 291.306 cv
183.991 290.904 183.836 290.509 183.601 290.193 cv
183.395 289.918 182.946 290.071 183.031 290.433 cv
183.117 290.803 183.097 291.18 183.106 291.555 cv
cp
f
281.862 308.1 mo
286.881 307.862 291.827 307.567 296.857 307.657 cv
301.868 307.746 306.857 307.786 311.793 306.815 cv
312.75 306.627 312.331 305.224 311.396 305.373 cv
303.156 306.687 294.871 305.641 286.59 306.23 cv
277.779 306.859 268.949 306.928 260.119 306.936 cv
256.44 306.94 252.769 307.26 249.089 307.172 cv
243.148 307.028 240.461 304.198 240.254 298.493 cv
240.011 291.823 241.761 285.259 243.179 278.734 cv
247.816 276.924 252.415 275.023 257.098 273.271 cv
257.757 273.024 257.489 272.145 256.813 272.238 cv
253.544 272.682 250.585 274.324 247.629 275.711 cv
246.271 276.349 244.872 276.908 243.456 277.432 cv
243.729 276.123 243.985 274.814 244.201 273.508 cv
244.246 273.231 243.876 273.125 243.78 273.392 cv
243.257 274.853 242.755 276.347 242.281 277.858 cv
239.538 278.825 236.74 279.671 234.014 280.604 cv
229.912 282.012 225.898 283.321 221.569 283.828 cv
216.816 284.385 212.823 282.913 208.39 281.586 cv
208.201 281.529 208.029 281.795 208.191 281.93 cv
214.146 286.935 223.223 285.368 230.043 283.349 cv
234.066 282.157 237.98 280.738 241.859 279.242 cv
239.907 285.804 238.581 292.727 238.815 299.464 cv
239.061 306.524 244.025 308.592 250.432 308.752 cv
260.829 309.01 271.471 308.594 281.862 308.1 cv
cp
f
327.886 271.807 mo
325.742 263.646 312.515 261.077 305.628 260.06 cv
305.422 260.03 305.256 260.312 305.474 260.425 cv
311.729 263.647 319.092 263.636 324.403 268.815 cv
328.65 272.957 326.376 278.985 326.396 284.099 cv
326.414 288.91 328.435 296.381 324.617 300.132 cv
324.145 300.597 324.747 301.345 325.313 301.032 cv
328.92 299.038 328.241 293.026 328.147 289.559 cv
328.06 286.326 327.694 283.224 328.049 279.988 cv
328.359 277.156 328.617 274.586 327.886 271.807 cv
cp
f
284.333 268.608 mo
284.093 268.56 283.949 268.872 284.165 269.008 cv
289.188 272.148 295.765 272.743 301.435 274.137 cv
304.389 274.862 306.846 275.537 309.303 275.708 cv
310.726 278.382 309.974 283.001 309.876 285.876 cv
309.784 288.528 308.676 292.565 309.523 295.105 cv
309.643 295.467 310.18 295.599 310.378 295.217 cv
311.832 292.405 311.195 287.27 311.293 284.186 cv
311.351 282.369 311.969 277.845 310.685 275.749 cv
312.54 275.724 314.445 275.369 316.614 274.484 cv
317.177 274.254 317.179 273.252 316.457 273.32 cv
313.797 273.572 311.567 274.737 308.797 274.301 cv
305.995 273.859 303.215 272.973 300.451 272.336 cv
295.093 271.1 289.721 269.672 284.333 268.608 cv
cp
f
309.58 300.673 mo
309.967 299.921 309.966 299.012 309.64 298.243 cv
309.524 297.969 309.035 297.969 308.919 298.243 cv
308.638 298.9 308.562 299.677 308.531 300.389 cv
308.507 300.94 309.324 301.168 309.58 300.673 cv
cp
f
263.741 301.11 mo
264.55 301.124 265.463 301.309 266.17 300.855 cv
266.407 300.702 266.407 300.372 266.17 300.22 cv
265.463 299.766 264.55 299.949 263.741 299.964 cv
262.793 299.981 261.966 300.02 261.07 300.345 cv
260.88 300.413 260.88 300.661 261.07 300.729 cv
261.966 301.054 262.793 301.094 263.741 301.11 cv
cp
f
270.792 301.199 mo
274.778 302.09 279.124 301.696 283.194 301.746 cv
288.297 301.807 293.548 302.217 298.629 301.731 cv
299.272 301.669 299.27 300.797 298.629 300.733 cv
294.049 300.283 289.34 300.525 284.738 300.469 cv
280.193 300.412 275.251 299.819 270.792 300.802 cv
270.594 300.846 270.595 301.155 270.792 301.199 cv
cp
f
271.604 283.718 mo
272.179 281.938 271.774 279.615 271.478 277.803 cv
271.451 277.635 271.169 277.635 271.141 277.803 cv
270.846 279.615 270.44 281.938 271.015 283.718 cv
271.109 284.009 271.51 284.009 271.604 283.718 cv
cp
f
204.352 298.582 mo
206.898 297.776 209.601 297.152 212.039 296.068 cv
212.451 295.884 212.246 295.188 211.809 295.221 cv
209.455 295.391 207.184 296.333 204.967 297.099 cv
202.508 297.947 199.969 298.633 197.582 299.666 cv
197.387 299.749 197.493 300.052 197.686 300.049 cv
199.993 300.012 202.169 299.274 204.352 298.582 cv
cp
f
224.441 292.956 mo
224.842 292.694 224.737 291.898 224.172 291.965 cv
223.802 292.008 223.38 291.992 223.035 292.141 cv
222.803 292.241 222.505 292.544 222.658 292.819 cv
223.021 293.474 223.906 293.307 224.441 292.956 cv
cp
f
194.676 209.535 mo
194.86 209.535 195.046 209.528 195.231 209.527 cv
195.248 210.261 195.272 210.994 195.283 211.731 cv
195.302 212.928 195.063 214.481 195.763 215.514 cv
195.898 215.711 196.247 215.768 196.366 215.514 cv
196.952 214.262 196.585 212.546 196.508 211.199 cv
196.475 210.619 196.427 210.056 196.336 209.509 cv
200.275 209.393 204.239 208.924 208.166 208.667 cv
212.171 208.404 216.415 208.184 220.261 206.966 cv
220.716 206.821 220.66 206.045 220.143 206.097 cv
215.635 206.548 211.182 207.224 206.653 207.54 cv
203.159 207.784 199.574 207.873 196.154 208.688 cv
196.008 208.164 195.801 207.655 195.494 207.162 cv
195.418 207.039 195.231 207.091 195.227 207.233 cv
195.211 207.803 195.221 208.37 195.23 208.937 cv
195.025 208.995 194.82 209.044 194.618 209.107 cv
194.385 209.181 194.424 209.535 194.676 209.535 cv
cp
f
233.201 207.107 mo
233.311 207.08 233.423 206.978 233.445 206.863 cv
233.602 206.039 232.531 205.54 231.9 205.284 cv
231.173 204.989 230.207 204.725 229.463 205.086 cv
229.232 205.198 229.247 205.561 229.463 205.678 cv
230.072 206.006 230.812 206.067 231.449 206.352 cv
231.995 206.597 232.572 207.266 233.201 207.107 cv
cp
f
247.628 202.431 mo
249.158 201.883 250.861 201.637 252.279 200.837 cv
252.615 200.647 252.443 200.175 252.093 200.151 cv
250.459 200.043 248.836 200.77 247.322 201.32 cv
245.541 201.966 243.822 202.728 242.272 203.826 cv
242.097 203.95 242.199 204.233 242.421 204.179 cv
244.208 203.742 245.9 203.05 247.628 202.431 cv
cp
f
304.358 258.052 mo
304.537 258.063 304.737 258.017 304.881 257.964 cv
305.403 257.772 305.334 257 304.749 256.981 cv
304.42 256.971 304.157 257.124 303.978 257.396 cv
303.902 257.512 303.896 257.705 303.973 257.825 cv
303.972 257.881 303.959 257.936 303.97 257.997 cv
304.008 258.21 304.249 258.183 304.358 258.052 cv
cp
f
287.06 232.013 mo
288.375 230.915 288.908 229.047 289.505 227.479 cv
290.241 225.547 290.801 223.536 291.602 221.63 cv
291.674 221.458 291.411 221.374 291.318 221.51 cv
290.359 222.906 289.596 224.322 288.959 225.889 cv
288.196 227.771 286.943 229.715 286.497 231.685 cv
286.419 232.029 286.803 232.227 287.06 232.013 cv
cp
f
195.741 200.519 mo
195.779 200.937 196.35 200.936 196.389 200.519 cv
196.915 194.932 196.74 189.256 196.798 183.648 cv
196.855 178.098 197.269 172.403 196.501 166.892 cv
196.472 166.69 196.121 166.69 196.092 166.892 cv
195.382 171.911 195.63 177.066 195.579 182.125 cv
195.517 188.231 195.179 194.432 195.741 200.519 cv
cp
f
196.609 292.153 mo
197.011 291.538 196.932 290.633 196.94 289.923 cv
196.949 289.049 196.737 288.188 196.264 287.457 cv
196.143 287.267 195.833 287.336 195.835 287.572 cv
195.839 288.354 195.821 289.143 195.768 289.923 cv
195.719 290.629 195.594 291.53 195.984 292.153 cv
196.133 292.391 196.459 292.383 196.609 292.153 cv
cp
f
223.911 276.077 mo
224.426 272.955 224.2 269.724 224.298 266.561 cv
224.428 262.364 224.761 258.186 224.273 254.002 cv
224.244 253.751 223.919 253.755 223.886 254.002 cv
223.414 257.652 223.327 261.323 223.169 264.999 cv
223.012 268.645 222.558 272.488 223.322 276.077 cv
223.383 276.362 223.861 276.377 223.911 276.077 cv
cp
f
230.966 270.729 mo
232.257 270.109 234.13 269.563 235.025 268.419 cv
235.244 268.139 235.121 267.722 234.729 267.706 cv
233.489 267.659 232.394 268.511 231.345 269.1 cv
229.883 269.923 228.338 270.654 226.995 271.667 cv
226.863 271.766 226.883 272.032 227.089 272.016 cv
228.484 271.902 229.72 271.328 230.966 270.729 cv
cp
f
294.925 253.882 mo
295.217 253.852 295.386 253.527 295.168 253.297 cv
294.102 252.168 292.251 251.949 290.796 251.574 cv
289.17 251.155 287.583 250.761 285.896 250.861 cv
285.768 250.868 285.714 251.035 285.829 251.104 cv
287.089 251.869 288.442 252.217 289.855 252.601 cv
291.435 253.032 293.286 254.044 294.925 253.882 cv
cp
f
260.023 260.463 mo
262.202 259.647 264.361 258.783 266.544 257.973 cv
268.743 257.156 271.458 256.652 273.344 255.239 cv
273.604 255.045 273.558 254.542 273.162 254.565 cv
270.822 254.703 268.401 255.998 266.236 256.859 cv
263.993 257.754 261.862 258.711 259.855 260.063 cv
259.661 260.195 259.779 260.554 260.023 260.463 cv
cp
f
246.693 263.21 mo
246.852 263.43 247.15 263.446 247.306 263.21 cv
247.91 262.299 247.412 260.977 247.063 260.041 cv
246.611 258.824 245.848 257.888 244.839 257.089 cv
244.65 256.939 244.374 257.122 244.496 257.352 cv
245.013 258.326 245.529 259.324 245.92 260.356 cv
246.262 261.26 246.129 262.431 246.693 263.21 cv
cp
f
195.552 239.188 mo
195.609 241.326 195.701 243.463 195.777 245.583 cv
195.656 245.59 195.534 245.595 195.413 245.601 cv
194.922 243.818 194.428 242.038 193.924 240.261 cv
194.472 239.907 195.015 239.548 195.552 239.188 cv
cp
178.706 239.799 mo
182.958 239.801 187.346 240.094 191.593 239.719 cv
189.244 241.103 186.941 242.544 184.855 244.182 cv
184.738 244.273 184.868 244.435 184.989 244.41 cv
187.661 243.847 190.216 242.551 192.665 241.051 cv
193.099 242.597 193.524 244.144 193.947 245.691 cv
191.9 245.84 189.882 246.076 187.927 246.467 cv
187.802 246.492 187.801 246.695 187.927 246.719 cv
190.013 247.123 192.185 247.291 194.393 247.324 cv
194.522 247.797 194.651 248.269 194.781 248.742 cv
195.146 250.079 195.513 251.42 195.883 252.762 cv
195.83 260.794 195.416 268.945 196.286 276.922 cv
196.353 277.531 197.167 277.531 197.234 276.922 cv
197.663 272.983 197.12 268.796 197.098 264.825 cv
197.084 262.272 197.101 259.722 197.121 257.17 cv
199.278 264.724 201.687 272.249 205.009 279.327 cv
205.315 279.977 206.417 279.513 206.171 278.837 cv
202.903 269.87 199.801 260.989 197.156 251.847 cv
197.157 251.484 197.162 251.123 197.163 250.761 cv
197.166 249.617 197.18 248.462 197.198 247.301 cv
201.378 247.178 205.612 246.716 209.574 246.542 cv
217.739 246.186 226.154 246.508 234.266 245.64 cv
234.827 245.58 234.829 244.824 234.266 244.767 cv
226.699 244.002 218.701 244.974 211.114 245.322 cv
206.629 245.529 201.888 245.375 197.226 245.525 cv
197.268 243.04 197.304 240.532 197.282 238.029 cv
197.863 237.64 198.438 237.26 199.006 236.896 cv
199.195 236.775 199.387 236.664 199.576 236.544 cv
203.933 234.854 208.111 234.327 213.163 235.057 cv
219.095 235.912 223.955 235.933 229.618 233.751 cv
232.329 232.707 234.842 231.689 237.777 231.465 cv
238.554 231.404 239.311 231.46 240.052 231.593 cv
240.588 232.981 241.171 234.344 241.859 235.643 cv
242.039 235.985 242.519 235.739 242.451 235.393 cv
242.225 234.251 241.921 233.113 241.57 231.981 cv
243.799 232.713 245.874 234.059 247.858 235.219 cv
252.767 238.089 257.451 237.949 262.975 238.249 cv
263.74 238.291 263.923 237.028 263.157 236.902 cv
260.201 236.416 257.204 236.58 254.237 236.147 cv
250.674 235.628 247.488 233.004 244.359 231.376 cv
243.226 230.787 242.097 230.406 240.973 230.18 cv
240.385 228.5 239.724 226.837 239.073 225.193 cv
242.272 225.188 245.48 225.114 248.621 224.972 cv
249.272 224.941 249.482 223.906 248.782 223.784 cv
245.393 223.191 241.891 223.3 238.396 223.468 cv
238.304 223.231 238.211 222.993 238.121 222.758 cv
236.759 219.176 235.476 215.153 233.221 212.03 cv
233.134 211.909 232.953 211.981 232.983 212.132 cv
233.74 216.028 235.602 219.816 237.099 223.531 cv
235.059 223.632 233.026 223.726 231.025 223.687 cv
226.429 223.597 220.845 223.367 217.024 226.341 cv
216.887 226.445 217.04 226.626 217.175 226.6 cv
222.463 225.625 227.064 224.906 232.477 225.097 cv
234.215 225.158 235.976 225.182 237.743 225.191 cv
238.327 226.762 238.87 228.368 239.444 229.961 cv
236.009 229.689 232.601 230.77 229.165 232.108 cv
222.122 234.85 216.079 232.877 208.893 232.754 cv
207.87 232.736 206.794 232.775 205.707 232.886 cv
208.488 231.312 211.304 229.808 214.175 228.324 cv
214.738 228.032 214.346 227.094 213.743 227.299 cv
209.422 228.764 205.429 231.246 201.566 233.72 cv
199.965 234.235 198.478 234.995 197.253 236.068 cv
197.176 232.951 196.974 229.858 196.506 226.856 cv
196.474 226.646 196.118 226.646 196.086 226.856 cv
195.562 230.305 195.463 233.864 195.515 237.441 cv
194.831 237.838 194.144 238.234 193.456 238.632 cv
192.924 236.784 192.383 234.939 191.816 233.101 cv
190.293 228.169 188.771 222.769 185.803 218.487 cv
185.687 218.32 185.425 218.421 185.473 218.627 cv
186.633 223.678 188.855 228.54 190.421 233.486 cv
190.968 235.211 191.482 236.946 191.984 238.685 cv
188.113 238.31 184.119 238.566 180.235 238.569 cv
176.205 238.572 171.963 238.202 167.998 238.992 cv
167.807 239.03 167.807 239.339 167.998 239.377 cv
171.485 240.071 175.163 239.795 178.706 239.799 cv
cp
f
268.371 238.366 mo
269.232 238.363 270.258 238.472 270.955 237.903 cv
271.143 237.749 271.143 237.378 270.955 237.224 cv
270.254 236.654 269.231 236.765 268.371 236.833 cv
267.622 236.892 266.6 236.928 266.179 237.638 cv
266.11 237.753 266.124 237.924 266.228 238.016 cv
266.796 238.522 267.656 238.369 268.371 238.366 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.0.1
%%For: (Alex) ()
%%Title: (16_1209_whiskey_3.eps)
%%CreationDate: 12/17/2018 7:58 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB7&p`f'*'[SgXO=gbB#6(N?)&\:G+W<Ib(;+tOiu4!3>:Ib1##+>>]oOr_?sjMZVsR^.7-dBL2#1V:npdB(:15=-EW@6FXJ
%@m(IBGlfP;r:[nUeO/@`Di]JR"bokcQ3g0rTL+E?'5KO8f7[;n2Y:T/CRIW)h2[tIdqXY#nXj"6F/i6uM<;A!lZMfS-W\iV2<Y]J
%MpEiIY,=soTliIqO<KV]1[0;?L0cP6IO=IQF1MBH3PEmme\TmKammj7A*9B/*0^V,#0^IpZHB0Kq7o67Hr(\]&7s2-rInQ4g)WiP
%(hWBeLEf7:&tM%\[l!p]joQ1259'+=PL.KV\)*fOndM2LA&mcK+oIp*$X;>\QfMRGB3:#h&,jKtrJ'/n!>b]"!.4_P5B@n&,LC_A
%f`]U:;#lIC#U2CnljiBo$*[un/.r8Zf,Lj'f$Oe^H'&99+?t.>%C4(7pJ&>]^b4&,jFPGZ!#,p#.Z/qQ"rR`96mfur,&?oiaG'W*
%U&PCD%X"nL>;lAR<[VPX$#C@p#62*#0=l;^\ni9*+='J2<6CY.Z_Z1RnNlnK>pHZ5^mk80+nD(%d5rK$B"a+m$$hd7/8*eYM=sk<
%0kK`D1+g2-2m::h""_@5*`c6:IO#4`.e$^YPTBp<`M:Ka^@oRc6#_Y:i%hSh$_j,qN/H!k#pSk2'Q'O-Y`.!qVIe&Jcp%YkTHs"X
%09?()E3(Iemm#I'!+@o/^"L;_jdtM1%c(QFV`A!`Z<<'S%HL>)^W&MjR\3H!ZXQ->Hm-gDLi1C*PVbLpRF&c`ikW>-mu0G/T!S)B
%4?TjlDCaNoS%no?,?ci1]'%"Fl5ofK6_=-:)l-373^6<=#%,h*>oVFMTOtQY'*c_3oM2YP3iq06G6Ye0M]L7J#q^EXKie&$US&@m
%j=RJ>(rQ)3N10j!.om11kY&Y`rp-FGfH=;o?i\oLD#UThc'DjI$Kl$>CgCgk<hF%g0)Z8U1uRY,8-IF(2m1.'\ShLOa=+r"R0__q
%jD$0H;[&5V2bWQ;kk+1KjbO@_F#.91X4N>gV7!<md1`jtmA_OPRe?[DA"NF-E]t_/YbruXrn/]eFeddV:ZH95Jd`U;\t8fPmca)K
%MTTip1JLK6pK6&JUBlB=V1$(bqL<^tI]m`I_8CPe-!)@V))oV*U]*B!o*ipm@rekcJ3j)unNV`LrQr>hT,<7gMMbps)bl,54LqWB
%d0I6s2Hgs3H?*#fV%_,<608A=MU154S:2t"R-;q"L-Ege*InO^?j*gls6L'.\!tj11C-dtkCc^NBLB+T:3[KHD#D\Z2rS0F-t=-K
%DFXq![KV1YbL/jgMH-EXZLfJpi&ob.0[TcRpo!]sd>!Dq-Lk/t@,C)"cG9q6b&EF![<gHm;C9JH\Ea7TVUhEEYbiT-XXRZr9g;/6
%XfD*=:.EPX\\JQ'VM,H%0WUDbW9QjKg2V[9%reu)q-fLK<>X<?E77.n%4XSJT^d*3;>A4)3)TIGs'a>:B?_b]c!89h%l9U`D$#LW
%XrC;!"?e@1Eg*bCFrQiY8,M*W;GQ/LM/87c-_j\gg3Uoihn"-?kXGeIi2;96Ve["o,A69.DV^;_mf?/sSM"GU7=?ph[+@^1qLeg=
%<O8="H?)]Tk9o6M=RkR]T*edVS=bJ1g!VG]ic,bc)1^#@g)/(qm,:dJLJZGd,\M;&U4,A."`?#7L!\?BL#cWYP*NRSQX@*,P+,-O
%^ii$tHbt\?DPg;l@?J]lU9[>O(9-(5Q2An'E\8p$*2[a/8p#tbDAG"<ZDE,ZeB^g`]u];Ialk<s\OA-[aQ;PFQ\-h:VZ3gNF&f>Q
%rqIPh<l4URF^1Ur-b3!&qZb`64!_Oa^-`nL.?OJ6mU]E4S9Cfpd!n!q$!UJVRhL0QGSTN"O$(tM9E_41"WV43G2(B4Z&c/ZmC:i'
%\<Yj:O4#++XYM1]G.]Y#6gd]4B&7j%j`4SoI%h'kXQpaUgK\L(Mj"50Y#X&1HEO3sh:+!1_5ASsFc;+GP[]cfi:<Z>EBZ;A5C^8^
%Ohr\D_V[Z^O0!!*+6h$4('.]OVMK?'Y$#bNg$WNJ2d!c^1,\tHpBW,GBUMTn9*c$=b\=op8Jh;C16)9T6'OU3QohVAd$XJ?=EK89
%5FVcTWYcsr)U6Qa]5l9LY?OKA<n.l<^WpE;oBish^0'Tdq4.Q<OhlN/`gNH)N`i[g0&/e\UZ-ig)$i(:_.J[NK*+>$*8L&B,<Ua#
%?tYr>DCf[BM?[.gN)$dSGMMQ&cBW&?JgZt3YP8M"bGS=7l&aNY(XDPh&V&AZlW5RLo5^_g<4=><;K=Cb*VYHb4o+V@=0XaHZZp!?
%CM0'pVHJs_])JUc*Jqa$VLKI(p,a:*ElFN9YN!./iHq2,@Y6;i;n',sd</q'H[sRSBZ\&*oY+J"q7VfW\\MWkp13"KisSV*W_os6
%[AnJXTF6rHK5&EDN6T!Qq[UX342"YVk!bnrnbRH=l0iSWoK0"\MuAt;dI2S[?)D<cp`,oXFiB)<=,_(rG/&rVb&d?$^Pd>]:>bIm
%\-_ik`Cg0aGPc$=5P*lZk59g_O3ZrK%CY#80;eWpKe&jcrGrb3+rVl>&?E>r^i#7%q44f!(Y]esWn)"Oopf>95EOi9=6!SQC#KkN
%Z.8Jhr8)XcZF<CBm8dLClM0s(Vcmjg?-_@eN]cboZ9o]]o9=WE'6<gIBA/0c]NKGUL70'fhU#Xi(WSZ#,GP0mYMbqJNMF6-p)/'d
%gV15X`N6,OS!Q_0o"GVN[@Fc^@;_2&VmV!)[&n4&Fj7m6?V!qMpg\t0W%e:C(1WhGdm^B/.i,aVmO&si:8FDqdmD63\9:P)^=Jfg
%_cX@kL78jM"Dh7d=?9#!>Y&"sADhD'\WO-\kgUmEUKkUF;<m:=,RQC\1pm)imAC=k^]AR7bGD86OOHOQEIgkNYIFpuCq+2QiZdl3
%l;)?h1P3GR,oVN1(6W6qB>ht_^$b=`H[X&)L"8(!Y'f?^Y?Jb$\<nk@/5Dq`7"SJ;:+&oo+>Y\4M`EtXiee2OXr-'m,`8'QYibF'
%auB=E^uF?)b"Pm^h=,&`>gJq47<&oCcH03'=$eeAB2QB34AbrNB2RG,ZT*lK3/d?GGaiVs(5;\tS4.F/6tY;W0@$<9C.,`pM_[*^
%bnVmD?.H^U=d7oi3fDu%R<d3VIr^lf*m`?GioLuX`\_s$hj<N:3oRL)`;En90gCWlV5p!G$GP'hL!fO6K%p\(r!ukbk0\[hWVA&_
%qO.26A`)prQbRdgbegN2`NDc?]B4\J$bNjOCC@a4(NqBE6-CHWqd/6MN_E_\[=qWXDd0V<YkG2N[=qUb=LJ19<HIR64\oL9He(aI
%JcpRI96RHr!#KDBFZ#<uC?0sL$T2+dd?)S.N(7u0)Nc4liT`\&"*RkqfRN&X\$F!qH9GKaIQgQdS]=lsAYWDVb=;*`hl7YW$.[J3
%:;YQC%1_$)Z+Ac.RqX4E[CDQ8qY/Eccb!"U2cjlJ/jicHL@Y(F$(VW?bl:BcQJO;[<;F:K'?YEUJqjeVN/&/,0B7V5_seQC)hnTh
%?h9<$oJ2N3h"WX?U!`W29tu0$d@JSY>ZX-H4u\8lh4aFI4N9U^o]X'(k;)Y4aLfrh=gu^GZdCP_OG@J[+5*X.C!WYj#i\#6k0aUH
%./)1Tg5g5/"+d<bG.PKJULQPV3:Kj?g0ES*&Y;?LYd;RZ2`A-'7?acT7]4te4)R1%*-t-,+ofd``ihCf\akltkjl]2i?[T+,N=Wo
%SX[M^M`:SMqnJ'fhq?fbS\i?uZR3lQGlN!X]-N=5ho5T`5EbIep4!nU^Pi'JIkZ2e*FOm6]8S!OHbM:>!1NG(a^WS?Z0/aOoDN^Z
%k#Sj00!@S`Jt?-sl66iub2mMFO./iLcC/W-k?X-_@J<^(f?GD$;61_%C'O_?7D)[N"brcmVA;&!0]cT@$osPVW>l,7ESEG<T%6qq
%Drd-fA$i1r/Lk:h$JD.?p=H%%`QuLU.V/R2ST>D9/]qVd/="=j6m&R6]&!i_Pc0AR&K;H@r4?CgohO/f94?;tRNLs50C!3!Yign%
%Ei/Q.dHGa;qK^.*`Tf`a9*us]kid0ak-BHuJ=U_K-=N"#r<,jT<6qEeBVKKUgZZ0^HS@qH\G!]jM@VLKHt^"],%N(P07.bJ8t4ur
%Us@!X$RO!j?"R9Bm+!H_BL,i!,m4HY(58)DiFPl2=VP0XKpP6eAPm^J,pqUj'jg5^$SB$D<>\V`=VP1S3!3G#?G9<^R@Z/253I<*
%VLXo;':ub;+FV^s-GIg,ZsP;g/4rC\ZqQD$-?/6a?8gaHLKVB._TbLYZ[US\)a5f*S!XgtmSDK[^3BL/5NOVr=M9pKN">7A$g0Le
%#&Vq^j5MD_fl2t0S![g?3IW^=RX#/&hP&/QDd;)5oY#-Mq>t"?[kB=N?^d:Jrb(XJb#Pj4q.&q>2;df'Hl'7e/`+XBR?1hE?Y=TQ
%6]n4+D!95#T0K2#>&J:unS>0.BXZH$k,jtQ0":K`C4i@L>aj`!e+jEgn\:Fnr"\XKcX^G73:gF*/:3MQ/Ma[ncd;[MCLj>A%-O&/
%a_4XrGGi.NJ5\g*E.cFHUZC\sU^]77A-/jr!Z<remhEZHG=]587/g<<0kMUCO;;tt3Qc'u^5en7K0"`+*#<[URE]j::$3=8N("as
%ei:"7@k?m^M`Sk:eM0+RWtT%$I@n(F%j-4fdPVHDNmT;)<7_u0c4DUHe6Tb^3s7\ujP3uIe*JtJ`K'Z(/$,8VdmAou]!r'DTXFHW
%V8%0GB$j>10EOHjgkm_AUN:K&;;'A_<pF=piT@NWg2A05rS_CT5Mt;`0.n/H>Vn8>(C`)b(VeSM1#832F2jbRfeOLaiaW$J/PNnA
%`D;D=T0<`;VL.cqRg<qP=44%(khVL\^#I@>Xpt5-KqEbE.Wju!3:g8e>hjefVPZ&df@O9($$0"ErRsnNMaHZ=l1iR=8dAu%q4fmU
%kN^D1o=YW^\O'q(%XklRA]BdY\O#2$+8G]`[<NLC=luq&c[=VRHj@=92lalA-KR@>UD?)=piMYA/TSDdRt4!d\&d_245$,3Vn^=8
%AeCS&2E+8W/@)gsc/r89YqUsdS-uD6akSEmF2.E^eKUPgUiVH9DNW3rd^a:dc<ZoOWFBRZ%+ae.EoQi9j]nK8-b3K4r<CrF4!_Oa
%553l^[(o,9Zac**qPfLu([1&CBAhqO?AZZ"R#?;;k3u]6.3eM7N7U:86,n!RAp$XgkjL!V$?`IQ$[ZQNg!YaIk@_k9n[%'I=a*e9
%Zf.c-G:nA/H>`Ar,sLpp7O]%a\^[?l=5Edi(Z3GaOjgGL/>@bG>.$9!%Q47!Ctj@;?CpK?BZ_&I=+S-uoX"bG"]k>XCW=UGq3>tZ
%\^+rMBjpb2lKT^J])?^5J^8/-'>`'+e&'GM=fZ_t.VhK/X\]L[0+upPKneocV4AR?jSjpX^\L;G/FPq"Zp0O>f@<&Y+*(PDQ!E)K
%V:X[qbAt&oG$6:+,<^`BH%&cgPV@nP4`Rr.\b.Hh6B&^:m0)T-RTi/aMo]:`[cpH"aZDH/JW"'5L\M[kM>(;QL7\i$fir=aO-\JK
%^P(O<b9A?<"@^'Z-sFPWs7ep$[LUW+;"X-IpttIhns@4J71cgSG5kRn\8Zi'O7pM_bWqh8M3f/$5.Z&R#R>gU,O3uQ0LIh(Zcr_6
%QFAb@_lHp0VqTL'?0sjX*n#I&GP8`1G<:I_2`b*dpb7D,36)mpBX@+Hh)L^'GE-S90^I$3%3HA2E?5aW3H1)J*Ql5XcG+:f`sVCs
%`s-06kkR*E@t+4C933j7'(NYaK)8d08G"K`lg6dk00A^$Rs@+;Ydg'67P-Xd@I/K`IHn:8jr+!Y`d[O[k<ZjphK9i(n+J-,\E;1>
%1c-&p`VhjhA0o=_4K"ep2VVj'HNefSonnf;s$kd#F_L43a9[0K9/6Q$,4Cr7-0*TWRAPR2k$NEVG+.,La-TJI]<cX07Gd07O5p\b
%oZWd-ge'g9jaYqea5:@$A.Ei?o:j79q5rqmN2N5*Eq)'H]P5dK#LqYU@,I2k.qMhtW0fB%S&1]9`V)_j/(F5B\+Rcbk\5%+/E2#A
%\5M-pnR=,q85T"6SqWQVO-gs3VjO^s@l@+\(7XUJ&<c&2/&?L(CUVE(IS!rPAcCGL5/-rh_9>tD^(tt=73#$i1u1]K;>M-M*HL3m
%>-BS7SA-PWM^+P&k(r+P>/;#)"DK`^AsqgmZdf"0,gn#Ke+9!\bebdhNhM!Z*n)W/e+r(6s.-R=1PJ$9f":E16[l`T()/?g"l0iu
%]'ZN\<,64`h=>*X'!-*$6P"S`fBRLR6N*McRQ&Lf2Z2qXX(*2hq`I/k6%HoCEde%(+05u-ph5@Fq]$:tGZ]\Ds5H6_4oFru041R%
%U/iXs(P9+^*KQ]PO!a[W3k95@ih1j&HN_GN"">BCRkktb]&![$4;n(G40jS?gh>>\!Io^,TZS5s'pN6o<<_rEJN!:r19;V@G/p(#
%G3PRm](q3?No8A:[/Bu&GYUErO,U"/)a(buD1Gb]YS_C'*$s/b\ge?1J_"B.A@9#*l0&hDCuHlphmgFO&_\7`'T%B=LrR]38A3se
%^\ofi*(QufCN:#SrRa9P1pV\6'l/<$lbtL:3IlTh]8Sm<2Du[XT-.L)TbG4c88d;UK7a"iOThLJ*p.o0$>(<6qL;7M2:D?K%/-D/
%B!L*@bU0$+J0:o=gV!e*C]$6SHD/16QcD5ffZO;7hp;7*_u)m.I,p;gT0Ec4<hD>%RdK:q26.ah(eXi_5+#Gbkc^jHr,qF!<A9m:
%COVIC[fS+B1oGQC#YeQcb6bm?'?E)Vk2c"Ei9FpZVGFi,MQETYqG.I;h^?@?&_lTW4'ik.drM9&DR_cNk'u28KRS,`((bXIKH0M5
%G2"%D0a$S,Q\oITX^O2F4qnEbHV+/poHlNmT[plkT'rMumIH;UORG36jR'NUr'"^tKZnQ86J(Lp@-m=5Crmk@^LoVM\@MHM>I'""
%O5!DOZ[ft[6HBQ"7/SAQRjP323?rdR$l]lt7[](``$=Yk&[R(TB00^oTA`^&3tPeikiGRZ1+JIqZ=G]Y43^GM6&[(k6'EBMs2XKf
%GKCMZZH7``Bf39>=!.Kbfr45/64XHY'7;,@J/Rs'#f2O5<V-b(<ERshV\?5[I,F0MPnGG@0"ek]g&Ued-P]DG=cnRJB!Gp8'h`JS
%NSiQW8;?&8!lrE[he[FoL@M1bqM56"2Xk3'lLnF`WuE('JOgl+-BO]JTR*B+QdYDKehYY:]#*uCT:*K;@l[!WkJeNnA*N3LrLDe"
%_G9Tg^i_D>S*&teE#e:"1ND'c0]V&mSd]u4R95Vh:s$`69J*>Or\5)PB]pJ=UiekI+7C_<;?-?!Q:pqcSh$XZ5S'9:BNk(Nn-ii#
%Zg_QJ:W5(]Si4+/?KH\N35kp"=e1/D=X=US*@;:%*V=P$ILeDQDPCj2p%6hr1"p5Flfap,>pjtgn"E`W95Ec-XK9gO%piLEI?m9`
%(I)4J41)_Ya:ng]SiEt)O$"a!3rkg2Wac2S&?FA=M`%iq!R/c*CG`OFYZZe[FR+/,PLoiuG`jAJUD42-1r2es_Y7-ZgE;Mlc/5pP
%DSZ-ug`<H]H3pqD.u+7fF&r7aB6^eC5J(Efj3,hn>OSq[oq.u],7--]:(+;:d+TMrZH\Hn63iY:3qtfKEe7_L;]?-F\)g33dH*2N
%5R?WqO(3*IBX1RM?(Eeee#1FeM,(EiV5mU<:Y'@TM*F\3$`s4c#rVW?Dml/H`SSLb\lmDF(OE,dD\(FiNlZT4at0rZTFE4"9cujm
%1_$2#Su^tLhIJ4?<#PpVB^OMe>J"Hi#"Bl,p-cM5ZVS@+#f]Cek#4hhnbG2YI].C>dX[!gV%[_:G^OncLHRAM=rl9Y"RUl`UZg[d
%n#R2G4m)f$H>eaF)Q.P;VqdUfXk>Ek5Y%q>#*<g)Jl^H^VXE]!g@aeh.g295o@8Lt1nEp_lTN(qdOjN=4EWZ/]478:IeY0JN/=Y?
%36O>,*]thHms;YpC.b*q=dZRm"&j[#&&@*f':DSod2=p":Oph(%)FuaO6ju2>:n&]4lca--hFrf[4Gf=YS4]NcXrTY%dj#ekj2[h
%.1H+a.g*s$\tbBlV`pqcZ#6qaeDf?A+(1?a5kt&.6Mg?Z#B%*%2).E=4G'SU4P*'/AH$8W-c.:iA^gG74VjehVcqKIQQqQN@;A(i
%b[k#QU`4!bEns(8XQ'W*Z1Ff]`Hi=uPFL$;:RDUXk6q]7aPl*JeotZq\Cp`CM.spI3j3/[,MI3kp]Ps*[,5l3']b&P1s,V6Sid-M
%*i1f`qPA(WcRF@CQd?,6QnNSlHej?.Fd)i/2t=(oPMV"KDL-<k%'5q)bXa-EWE7j7#Yi/gi'.pY&Xm*Yro7QR0MG8;*'p1.Nnak[
%3O'h+cLe[22dVq;l8(iR09\g!Wu]0'%/b'q@qh%g[\*^L$\L&d]a@ZqX>WmW!auJX+JBfgl43E`-[cQ5ORZRn]E&t+ZqVgI\`$Z\
%0MR:KjB>_!r99m]nWVYmB_AW4Nm*+;oi,_g#72U;!ZWG\Z!m$TX%G9RSY'o8??\i8"7lX^JtC#^lXR'4E0kt3)Y]7&SU9ChY)Afm
%*nnDL6!O\p3Zo[?;0`u[rl@.)Ot=cr/&%Wfi3kc<nMtG.FPpZ(mJ$$de:!@;:4$T\r[.LZP)_.!8>UIc=iXCd&`ih.c7J,l25(nY
%-Z=;pe;lRY=9&o?'ANL[&53j6X/)*%d+u$VAp/p$4+_V+PK`.nEFa!)Z8`1Xo9/Jk)A0uD,/QqCoqZPR:nZT][=^op;0'&86_Im5
%fF)!0::20:ET9>nrVB>Ar7Q>6`m7s\[aDfKLj@Fj\AYD1']=SgA$td:40.Tfbg@9'4lZdQ8f"'q:A[b?e!a"[JJ??JhEghonFiep
%Ih14L(+6r^:!E&uT@!Ir<j6Eg,NNLZc!J9$EIY!TN,HOqq`fNp:Dfie<(e&eMqKS&-UAHk8J#b;1CCQ=r?b>OT\=^)"HX^qrY^El
%C(RT7'1T(07:P=J'lO5-i=p*)W#,QAXO2V-.t.J%GmF0H+K-`VLQ3VJ*[gX`5ak&9!!Q$hq5d[7+D$+tP3$pEdNE#_W*>;D8>T/k
%2DhJc2Tt2)4k0&E^oq>n=>2cFXnA9]j48dV(U-;[UNbHR=FF)PENoIq2>);*X_GGfO:JM%NmXhUVDeWq=G]6FZQ/ERIC@e&<=346
%TWY\S<O[Ln:R[h^57+9JTunXR(-$K4=oQVZ&@eIb[oH+`'0kPN8M=RJaE\nHXH*F!!O,Q]XZo#PX'9uUBpkMf`I\ZJWdIE$$=c>+
%iFEoihAROk\SeFn\;>aL\]<AJKHdU?Ir7?*i#[J\"6<Bk&ZTU"QXijAq_8F:QHkJ`ZK"GRNf0)k/H?*7S0%\T^lmP4.SXbr;10.%
%K$Wc/X0no-qSWd9@12f![gAdid;2+T-8WRhoq.Tq)T+Puj21Fl_fVM]'g$h\FYS&F07PTB[Usr&^P:nn*ce?porG(rnoEj4?D?6A
%"AADZi]0-92*jou>:r7aG,K51[9BD&QABK+qC^pnJ2j_AfJ=8B)!&64(l_)97g?)*e-GDjCiE,8;mG$TPU-I2<A4@L"://XmM7u,
%LpF'mQ-DU,`/bEqlAiQ.Z.*MU1k>srHW_BqrWe!M;m0l*_&9WZ41(Sp]s)orP]V!De1?,fIM@9a3N26hF)r%\58G=bik!Y[.R8J5
%5d\GiJQjGMM7R3XcXhrtb$>jI53NP056H"@]-=IFotr'a\W>'&l,Z6>h$1(j@Z-DInC*T*J;;\\/AhD(V[_ueBV;FSg4SuVG2iKn
%16-5TKjdg>pt0rdG1FF4=!kI4$adccl_ZPl#8nmE#hlF!/MNgAcckRf1Y1k*f88IZF,c@fm,?J99Bmb.OG;E98SF\1#5'a;)q90"
%'6h_?n93%>0dN3GVpgNj!2c"%oa%U)Y;b-7ZU_95n*SsQT@hF/Wo92NC@0#]jjW<)5()Mc>1\^W9fTeAKJJ[MC8=THr_tY^h.g]l
%i2$&/T7;1#^6aN)]=GZ:okka$_6AfAP0Ehap`E2ijW`9$RY;8&(4OLuji9t65-1?nT-`SA(=<ZVMUnd5+@`LThgFp%I@Ya[^(f$d
%pbbaZ`crfBO'a[W3.G!<iR]:L)HG)Y(4=b:_SLGj9(oY$T7"9G2%S.UX9YM)n7<9,Q7`YJCM,bWg,d.>agfaDDrXp)<&"ut#diPX
%J0duiESYrYYF##AOF5`.gV==<r)(EM="RP8/&au3[7Oh;!0E))+*[aLm\El@=i`BlWLZF9)WX]f2u2*L+</S?[9$;KfHpjqhKV^0
%<^QP;o(q<[ijd/r&ZQFhnh<2bJ3UX3X`B7TJ'''<mR,4A'moK6T51PD.j@PT7RbH)DXY*22\=`H2YR&3Sj7Mt%q.<#n?Ql:E3j^X
%)]_^U/>1;Z'%5M69H(/tZl]=Klc2fJ?8HoC9-IhCjr'bd0*VfMM9s2dF8H=EE#)sp@^gOtd>QHP=tI4t/<CT`"=nCdrkr,[2n<PW
%C`^M9UmG18<8*5Bh&8#'6k+mqTY07)%MG#WC2_LS=m;f,;X',c*>bp=`pR9VT0,8F,B*HJfq1AuSOr`O\+o-YgU3edYCE`caYoEQ
%8"jU6/(0@qPnIF'+?(A8JdK-(0.652WE:Efp0-370)Gg_ER.sOXQMF1DBEJR"_OeS4hb2S"$^/kZ%..LT1G<slS)SF*i\b9]!tq*
%jm@5ZO'9LZl`[:KW$k=%7kj[o)9m<;<IZRAPn0Uj(%=`Ql\28M#VIFGJHn@N4$DC=AZX/(5D_)ol!="f!UoT&Z/Jt<*PQj5M/*-F
%f8=pgqaVZ3l&s:Fhr`s^f6;E0k1pHFRmbmXG6,Y5hMk&'[[c&*($8<V3`,Q@g:iGrNrg`jhDOcMg1/49]TkJJY&OAlG?"i!?JE_\
%W!2K1k.nU6?bc@3Ou_"'GoR<?rT?g.n(-%<PrJ2oI.[[O!M=SJ@dJE/7eYW\[Un:<06^I0I.pP0MJG:D?>43NaXa^DQ</p5nm41"
%*-su=hC!6O81p4um]Kj=hS$UtN-G;:\)NB(=hcm2g.ZbOpWLn>jI3L99kE3+hS[mpK/]?8/UNN\h5L'9>CH4:mJD=gm$a14Sen,U
%2jZ]C]U-jeV>%"e]&^OZ\!#U[kM7U_o5Jb"H_8UL&)NYc\E,;I?0&YpS(<J+>hV:0<_]^VXfX=5hF?`&c"gpC#MurLop`Fs`>pRV
%dops0\J723>)Ou9/T"I*/slM+I:aqT?@>sc::9R(c^m%&RO.J]FL7j6X`#bE6d:C_]le1).:V,I/]Fb,\Y[g)Z*9IA9\5V+*Y'u!
%RF8(=FAY8@/mWY'nk6G#%.k+50.f?M]['6)##&;4Vn",6&dE##[iUl>=XB'VFOi+Aje\KTZFhON=-n>)iHdMGP7Ep^r`3/;f6I>$
%da6^k4"oR`Eoc6QDE2][PZ^2o0ra8ule:cIp>K7YcG/cOQ>`+<lcY?(CM?qpC=][saYfAk\`6bYB"<1!Y:d<9U6V"?b^OhKI4JW,
%nNS$n=.&LIl\ao>CojQGcYk=\a"?aP4Me2(*:hLmb,PDE>e/L%n#fn#6O,+PgK3&C/[To?;Ed7HY1-e3h3D%(+Lp\GGB[Jae[:mQ
%P?!*VrF(sSe!d=8-gG'p3Et6BNA9PMl9Y*U\pA\8lW_WU_8tp/;WhZbWEspU/\N(NlKe%7G-t=&2V,Me9itW'Q-S!5CQ6o6+>8H#
%6<X#2/Rh+,@%+J*l0<N\oVU2EbHGdMY2,Wj'\5+\&Cr>BGe_g'>R/ll!T3SH>5L@b*mhB7eqL0Fi-P/\r3.5(2MLgG-<FBs54%[?
%?Q0rdoqu^#FM06]qUZZ6l0%_7/[CGgE.)ZV]+HTp2]Io0Kf4*]Q-MiS'u&?\"WP"7Ds#V/*Zh]J7d6joZ;HZ;dRGU-]]<:XksaKQ
%gn48]-RX8TrMOhcGOUo3qm+%Aa`he?^\5@.hIE1_QcEffDfnM(>YVm,2hPo?bF?piib`c::oJ4PngjS!q3n:"hO=;i-3QmNRl06r
%I^<NJhtqi9b+kS-b\)G#E2hbk]J*psfiFj8^HT?9r7Y%qec0rq"T=mf$Q5hpg3?qaD/lQIg"&p6]\c>i;oVk8fO!FGIE_7d`>:_K
%eL8qM"&$md/J)%?o*=>Q+<$'-]j1l'lX_kk,sLgLQ\XnU5V74X%<O+E9[Fln57L5#KmGFND;d=fj/\1*i75rp8l.U`4:Kf%Re?'E
%,CX8eE,eb-<_CQpG.`1s[%.MGq!G]:UShr?7reDXqc$r]2PN8AJ%8fop-gRP*-JR1bZ,s/bnSHKO_M\NltUk,"K#V\1Z(+&S+BY5
%[)SWAQ_r!3"ZC8(c,8l_\,'])3Gs&scg@.B3d2Qn]&dffK*PXQccOtsamqL]9B;PS,kt^@\G1*dBB@bXs/<(gpt(^e+tR#4(mmeF
%m_o(@mZ+q,*8UIXKU^5ONhG:4["UEQdMDehc&S`/b=gh\4ME:ODJ+?+0i2;s\#iA-g>%YS9+(Q:.&CD-3@TH?H^5$3NOnbZhQFti
%%tZ(-^/>;$gqhJ0NI8.Se`;m)DT_>Z3h+UB[BajufM[ai0gWA)$_JlfETC,*c9sXWduUhMD!e7!SgUR#lAN@XR]l'oKf4qFo2$jC
%j9>._Ih93AX0%JGhbCmCiK`H7)&D3:WGj&dh@A]^O!io7p!J)qUG:@^bf6ru'8aIB45"@']q["e^7Db(h90\Ds#.U'[or:hSnZa7
%mdnuOnS[Y`jS-(mNig"N7,`.Sm!(>"pO%1B,-]ZS>&4"d5eOP?G@j#+B3H\9I4_jlfXG%Q)VNCUCe(3T^E1L6XEl+f7]dEu5!@Jk
%]QS3]PGR#+oX]'KNkVZ3e_'^nm5:c4G8mgI(1Y=T@L()]Q<!Rp2"BMW-6J:h-[YAgVfNP*(CmS\.lZ9^6I)+/'1\Hu0_'BnN@%g^
%Vn(m^g7FFc.@\'4jb#L\1c?;^WV,T/Ft1.1<E!OVm4q\_FP6uVODjkY$n+mVC#9e'F7?\C4?[r\qlE.S4cUU2Z<$A^VOH:%Ci%ZQ
%l)jmR?97BC]r!IOMt-G?H=.ch]%kudT"aPUb2o[b8(B,<ms$'uh`fo1Hb)7m<)EhZBlm*.'^PI'pR/q2ZqbZ-dERm?ec"g5O7chM
%mMW;)C&ZQ=:1%L>n!ROc<6q::o)@uZ>Wt5bloZOK_:)@CPB^QHbl(F`/+](.X_52E[[^(\5BO6XSYscDpT`L:=&S2/Gt-UlKk\iU
%I`Zf=Z(5GYpA%eci_%n\^M'-C*p'j'[EI@Ap-g/!Pju0PhPCI,?HM[)jKkP>9YSq((G7Y)=3Hr8qr?&b>qU/HC$!7?/+I>?]fN:`
%SR.T5P-<KO=AFB\Y+q9Qjn51M\o_eSpQ@J`iT'5u`kN,"WRO\$\,M^/q)7bf=h&mmkEJ'3AsDaNeW]sDr)UnOCF"<UpM@CRH%4%>
%T'f6IKtR`KDUJ=m?T%6m*X]$_8+0r,%AnCZT7mW5QfkoC7l+M=T*.klI`cp(b"mc)H2/Gm]M(Me2d#mdGZ4:Mpk3b`-/N0J02M>5
%U:-4;4D=VSX)%)TP0I^sFS<?Y^;smo=/Ds6_:gGF'U?#M'hhQM[FtGOH(<GXdT5J;FC&LZ;WI'!V[H"RW+U>C@X:0Y^*rT.DoHbZ
%qPIK"Pp:[1kP0-FP?WC:eCpe/b+CW1ea.J>W`lT/Q6ABc_T)C_kh^!ESR>k%.V4P&fA)"nn_1"=GAHJI]i;U97-.VL[ADDtP35I9
%[`drqV45J2,I3MK1nM5,;0..Q?#M(AfnX0ZS(T[.jC$"j3omKhC12%Y`A*eB<]9^MdPCdX,FIUfH.`kgY1)*fjlM-+'a['1=jNT.
%6//kP<r[)VO91KbC_PkuNM3`U6u.!mk7[X[a>u4La["7\k6-k!!h`&!QKSqWGA"k9QK<(h"%t0'?3f^`c^B:>M]Q&@d;=,b[$ut2
%rfqQkNq:SAg)CPd7u):J-g[DuW:APtI+J+"8(/HJq"5IuE]VgdJp.orN_E38`9f@n(IMh[LYm\K1495j4?l.:rp9F$0PPLeEO:!U
%J&X[ZSJsVsc$Te`+54OP7XXc/6X]`aS)JdWdBbZnR7`h1P,fS_cq!+,]q3cVZL5=%[rJ%Cf=PS.(Du,@Xj_EDG[.KaOiSkIcfDT8
%Cp:`4Y3=Gh*Bh(7_71K%jt3^cdQcKH!([,6Hi*6'Q$[j.keDH(!jfON1et;4s7mSSC3(CL*/!icPLg@eeqQDa=kl4,!61uc?25rU
%Mat*q:T(4>m)lr<h)i(>UT-79D0erUCO2*<516V^!lUaID1"nCTnRdg015ucBtFkCU.tLo%K+]AH<Qub*jb)3+ibs@)0F5_"uaM8
%dXE6mghh=Eir/pPTR`qMi]org@h;;0H0Q=8pCgoS!q)89WVB4c)t1Yon9eo$Cq:)\UGLZr!PuCPC9p$)OO<cDRl.j_2Y_j=pG`F'
%(G2C>kt&`('/(\KeFe@.;E>!G1XHh<c"k"3A`u?`0-gM][S[Pl$iVS<3%XTfbY]rH5-<''LUBq03I%*j@M.3qoK>3%J*/(H7WSAM
%b4nn3]qq6f9s[s0b_D\hL=86Ih?OL^BJFpZ%N^6DfRXQ:_5ms+psVZ]O<HlZaK1jp"8b)\n$+V0>jJo1m!FA73m=rbp>D:$3eM_!
%U"F%pm-c6@U@_#ir:R?XOCS'.`c9q/^?NUcb.h2j!(JMN2EM^G6Pm\YAW<PB#Lc@k]567tYL<uB^'aKmbm7rPM"V]Aj2BQ#dKdf&
%h7rP1\=,KC3*YR5I-g!<hlW(U3[s8%:?mUKeJo(M&YkDig<Ig9*;>$'(rQ>s,5no<&$5!i"-alUm.d[#jc\MDrn<O+roXZEE;RAH
%s+2I)5L2ONjrYdt6VPd\Y#bAJ"jtd"kR6uL2q^ms0%$D)(:;ADp/@RtBtA[XnM<7E@u*YLg7u+SF,:kKNcu]CfrVX&+YU[ES+^o9
%5Rd^p\3s*UV+]a^N3`!<(;-^B@GOWSc<pPs=WRp+-^rTU<pJ/LMIN#ugs4h%$\;EI#]5%=0r;U5,;HTdT!*;VKr/JShu/u(>sH-g
%KB&u,3Qec$Cs&)T`Dn!M@,o[+N1`"D,Jp#]J>#F[hG6,e*1RT61McaaSa5,)Y]d?q`33_RZ&!PLW.lcrmnq6>[BUc3Zs\5L\i`YY
%bG!#=_;;/q+$+[L5E/e$U7=hrVogJ>#g3Y*::qo'>Kf\br"RqFltj)`OnLN=%F[_^-XNhYFju7J%aRop4+a&^)nUI96nl,WGrO>H
%knYV1'<0NDI!<q/]KX>g]>.IS@@jj$l!1.OhijA<WJ%Kr*IFol?c+^W136D345,RnQK>1=qhJiK*k_>o<[V/90sX_N4[qd*@)JVh
%>4&1F%SC<"L<qID!h<&N+0T82#JUS1A(=>e.c7Ku'R<hS'\S\ZaNje]2&ur<h2X^"SkSpdp4dqYhH3$g?&@\Fb>#R()m.VDC"1`D
%Ikb(?cSsi`iAnOa?00]9Z*UPKgdJnN`V&Z]hUU"o2-_\I2>h"[PN@uXSXO,u2;'`c?:)Z\;(5OQh-U[preGC`,e*K%#l#V&UFI>!
%OMY([O_D)2hXL!*L:?9a_lb`$Tc[b@6P^>*m44j"]WTH04AuS)nSJ`&bb"6?"Ldr)?-Y>V%_!gdOa)1bq)Z'_MRX1h8Dd(`HZInh
%o']hKmR(5fq2pWJf3AKDp8#rEABVZ./Y+h_<-tm=:C>_UH<!"7fZ3+&`4!+\QLan@/=]2H#>\kE!Wph)Kr).A^A.G#48,SClf9dS
%O)H=Ok\/a'QNdc1@JkJ!aXo-M?eMgl]&)6LQX8"0#WMW2L@I#RYr<+W`K'dfGT88ch:TD+-s[s4U,SB_-KN0f(P6`V]b[C=`2c+"
%hEHB]C>/MV9Ia;=X4c$mb@i4Db9k@lj"9iq(okA.1#Y%j9F6"mQ0sg]XT'asgdErt`9[);gj#*m_r\mQ,o&(OZ9Z=@(KnI#R=bg2
%gfreuRQ9%`:*k:a@nN:5Xf2Z##]s7dF8u6)p-qp5P8#S]c?GSKq4g^Z4`VdcF\ngQN#Tsp)_)(2P_nG:L?)WS[DKWDlmJ1M6\Hh-
%Yk,/a8q;k:DY[e>qD??u@H'>9gLCF&TD`N:9B_&]3(\77EY*X_@Yrn,pfl^De406n(hIm]GFWU5Bnrj%Qm,H&6If!RCFro+.UCPe
%rf^`)+KqFC[jEgf\RZ!M2$2L^=9IWMIIToefp9OpbDW<Ha'Fbs+a[>+)B+"f+;rf]W8lO)f(@u^9G>[CQMb-,p=)LsjL-sa]`cgc
%GAo(!6$\V5_]9#\n&;2g:&2*fE%3$fEW3Y((]8iM!G[-dZ(+E56ocRt10;Ef"PL\n/M_*Nqk^\<HgR%9Z$Q#aN970".knuJ^HXt6
%\Rh@PWO78(+2'((f:gsZ>"nLZ<,L+K_dd'eXOjOOPF0"o3UBmjR,Rfpc_htPh&E`q08Y9W]oHF%(>H`GCXJ(<I9h-##BkoG)u'T,
%AcQ3[0fuYo7a"?i*3^@l;h'"rWB&'%^;XNl=f0P?DX>)C%m81Z;\\GTNa.,=lFD*=b)8KSDO81g(RN)XgTB@'F"^%'ql(K^M<l5%
%K)kI_"npkb/]QXiT;/r7?5PdN^hD2iV%KtiTf'tJVkS(dmd+TG:&1MgfjG1`QVi4V]95S0NjAu\P6cWk@u_&O>t-K#p=ZR-pjTtp
%DpST`)1[l^r#.r7(ahJg="/@1S`A1)g:]F4*8=qE[-17--&[>m"o!Dr8g;=d!QM=QH/;n9%&(rN"4:h%_Vm3nrT3M@H\;\2/gj<C
%e42Jj<e:Pq&6"HB/kaJ2T'!:09L]sp6cKt>;K'sXZ]_NjnT)<WqV=`@0EMeRp'9(mn77*7ONgDm]MF2#+_cFpSItRh#Rkci%"J9Y
%1Ia@ORtc)QH4:'+L_*Gn;e26Q2>Bd5lVDp_AeC0qf^)=E$XGUbe/sk!3rG8c#!.?s`8a5<5i@hi?3>Hj9/#i9"o:BqFt(!jK6e6b
%*FOlBR;m<h;;",BGAX(6?qSKQ)BNC<GWG<ne5WeFAgP4pm6cFGY\]-'HNW4Qn48N%(mPF%Q^I00&LsgA6-fn"EPG9:c\7*MSIgsC
%glo*berV$+f?pc.,@sMTQYb,B<d>i;X=lq);&18uAGQ#`DE&uuN97=(S#OK?SqfG$bW5WW)Jt*#XIQ(m:2`KKmq*-e)PX,$,(RH9
%`&!6RjEgX-&iZDR,KXE^D2nBM7uSU7Z6,u+c</#7:!t'+eqPt%ZID8gi7k.a@5dM"(c]4&I#M3g>chqCnS7gX/oc::(3?2aHe+r.
%bsWnAHa4!nOn6I"G'Foi8M*8A9`95an<,OsT5H=XmNGH@C*edBq<aQV`<@6\,o\@6')H52E"I&P!:$M`%VT?BB+IVSOki#B$cl[0
%!ESM8ZV89FG6?V+cn/XCT3aWJEFB\L5qF\GrLN#g7HQo<W5"b5\B%p$iF$"h",IpkXG8RlVqN8G;<gI5d,r7-C<[6XDN80O_B"_Q
%0\!R)4@m3BbIA$('#u_@*G4dU@crmNc.MjW@u#`[BJnj*UiN=^7/HYRj'X)0.Vf./@H)jVZWRiV*m.RWPC,3.Gmn-mC.`&ZY`b&f
%%SG/48_WOs_*P.T<UNFr!7MA)KD/$h1Ppb<WXa>u^4YO.,(/,0*42"=Wp1*&B>`c$I#u84XP:bW+I]?$r6W.J`YL6$1L0"hX4lfS
%IT$JteV"7J!Ud,!*3VPN6a5S5kFMrA"p*[*>(KfCe.7C.[Oh%c-%pQ];ln"+H3XuW1=(VGNB2]n3Z?/:V-%I[q%2nR,,_"R2j[Ib
%Af'!]>?)ULQ*7<Tm<_8SSfG_pZOu[J[uE1jWSQ=ZkkSBL$<-NPKBlUq-F:8&aL,n/bFGqkon.EW[mm7_WTV@hs7Fep9j]YS&^.1\
%$DGr7I540Wfaki*!Z5RmC-:l#4O]0.`e85g@CIlDhB>)<5=O,lEM3=S0>%IJ.*^>+>7kZ8kV0F/gCh;D>se\#<GI,t\k&ZhIGQI5
%b"$U^:X-uR\UQ21p#cbQL?^9$GDE;L=6_aR,`\tN(L,>EbDeHk7m[$@4>`Kg2<L^u)KCV0Ai!#Bq*CSBF#A-B"P"?p7C*smg4i#<
%%tXTcjs^$@*uWKq28Cs7\JLc]:Q9W*C6%T_,fD0=bQq+\gMA6`I*7g(06`K'8r6G5h<KjT`Y,*=qb/2_\4iGl_"@$uBu,=#gTGb>
%OT)P_gS?mSDTD%Y$Pirk2+]>#e'L,$/sXK<o@)tf/AL2(]Z$I#qC\l'QThXid`O$N6VX<dW[%u,GK+T46gXP18b$X6IT!u^9"mK+
%jbE^o"dO<,Un2tV'V6IW$)?l:qiXB4o+2Wpe8m<tf*[KJm.pJ=aNjeH=sDcVmUP8,9e^n-RB8k1npX7p%TX)]j]IKo=j@#%3geaj
%7/Hmn'-iSH!WofV-T>r=8q(V'Q[2tE]1nN@A?i_OZB[E'n848KB4(m6GYqVGJRk]PiUTUD3bDCnh!.<il/.`J:4J&sC-BV/,$-:c
%:4MOB?us:;F\YgN.*uEe(`7S-mUai@#<VVrI@!Ul\u2anEl_?I5D<3X/"0)c*c@!*D?s"UoASXuoD[])W2iYgX;K6AJ;!SC?]ERk
%6>)RfOk__\=>5p_)pO5=a+HioEuj4Gqo7ch/1n?I\"$K5GdB'Z*5p1_=8O3D@de_IhKoO-h_'H.OZ,e_BFi&bJ\p%6ZcQbXA.0Q3
%TW#no[$uA'ge$!k`'Joi1\,85RjdH+bdapb,(b1MR:pXpD2o8T_Ae`QN*0trVr_bRRL(:$,N2bJ)4'#mgY%Bb!O[h$3YI]"94s*e
%qQc[)dlV=i,ZS3RofU.o:Ua3-Rb:*'%?!nEMBZCL#0Vd5mACu!ZF;@Sj.o)F7?dPGXBq!5ni9Q2DkiMn<l884iGpChIB97(OikZ%
%atB0DWnXrFG`_.OCZHt;el"SdNak(WQ^=$_Tkh=S;-MO,.:nO-#'.FP_Cq"ICt1,?2#\F8A`o_8g@4RQ#D_M]hX87iI;\R_23Vl.
%nXkGm]WO]+b5&2Mn3-$7Rg<>b!p$a_8)t/0o$UF9)7R(mqKi#S,q3`5!WI%o"mbjKWrDY=,I]9b.<:g?-4Z[%mDN$KQ/(o3XBpKH
%hS-rIR6C)Rd$ub?40.2"!%Q31JC,$2+bn0Y-d$]Bnj0/.E2[6WrV1E;RdqLiXQ??TU24#L0lj=H+0G<WF6Fqc0CSK72<s9^(bs*6
%^87N)C?=U.?oYDl9cWN%l4A0<'!9q)YO:-CEPnc8FQj\Wcj-on2[Ooq#nr/uIukoK[u'n)%A+hJiG/^b%UPnJ2TA*B^0cfbm'W.M
%9%f,_i)=@E5tIldFXQQ^$H]4`3'Kir_2aq<5`qm,V7?G*-af1"BdSaI';c6BI:MKK*gLfE.H&*\2JP_))]q`Ue3?tt)Iil$.]*h>
%p%.*Go4qZ6.Q\pS2K(cWJ:?=Gl$thXRo+pp:S!,O]eIRfXX,;<LTS$,n<So^Sj]F>i&4I\gQ0%0_nUP?GN9kX\=prF?&l"J9Z,]u
%Q#LA&hX%!$\-N8\4'!G)B<C1cd)X)ip"%;WT'qatLFY#'$d?o-1VU>RPj!a5?.3dh@i74PR-96LdRe7dhFbH]Wn-PjHcY*+C"AHd
%-0Z!s*Nt`#.Mml8&]i_c`<f,6_r\nl)J&TGdNCpr',@$hrD!P'_f;,@!fc\ld[s\:!tCk(T>BocJj(6Z^so@A\>`o*rp87!SU/HA
%%+%L7bC-IBW69,LZ_[Fa*/oBNIA[P`-(7TIC3S^nGDd?_fs\.*g9G/D*`VF8^+FoPPj/kVVNQlf#ON"=U^'d:7tI^#HeE(fp!?kE
%YeKTeVquc9ORSE8kl%5>Cc]1*V9l5%49RCRGN[['"G%m5/pDGRe.A+=M/>bDrZ3kX*3=1nZ"ac#nQ[OYWIV59](scb0pY@B9IPHp
%_C<RQ2$ZFic=uaDrlsTP1djfs`U;/1IDHsk7;502^cs^LQr#;uUoV\Z.n/<U+3(AUV'SgOQ6JERr);VMG\="jml];5j0Y&ZQAgJ=
%0-MO)ci"9]oi;3jIoc_2>])t`lJhJu8_.c'D;WT9iqS<7l!KIY``^pM+b8pMS:BrbZ##b2Npe;EU9q;6eU9-I]sl63Ue.%oWL[#9
%(<X@nlC4cEH*V9jgWhgbC]<.G]TaOo&RZoGEB.)UG;*!7XZQak("#jW<6U+WD)3-3#MAsjc.u)-GghKYl@0N/m&A?+]f^J=j>I.(
%49_0XH%@Zea`+,0(MMH&*c)(aJbtcQd:T*#mb>:G+eQ7KnVW?J)aiXl6!X<:"WH7#Jr)SX%\DC;Freh7b4u)6e6:r+"H[P,&!]/;
%dP'51ZW^$ab3YY+*/.?YYLr\H5-\g<(O*<*O(2$u.uiSk)2JaLg4#Ra&bUJZZ9uAP`)s9R1in&#qlZ2gU]`W`VXl,'(&E>\]/K1j
%qo![KFZ#F`9dBIU;nW=g'=]%brut`\mU'g@F-:kEE:B*q'/l%CaX>)'I6L#9VU,2d@37(2T0k/KRT]rq?F`]5DO!gf\E3l'&MTfb
%.a`X<]d^W8C\t`*6#T$^[DNJMfH4Z<pM[p&:i//]B\Y4%`2u688cQU32*Mq25EAkjV*H51O'ds$!=X2OYajE,N[`&=m+mul+MgkX
%?0^/M"*7Er=i_u0JXILHq@8.7_\/qjpPLDD.Oi,o9U]Td_tBEo;L<]FMDk4Bg!n3b,DSn]O>ufsRDArOK0MSSe!\)].<KW6!,V:l
%*BSkgfllD3_#c@2Im07Y_-,rf6HbFm:+_=fZTia#=$c`]>G+XbG-\W%#X_n#[8tf#jSas>\].;]eolj,rSUU2?S-G?Q,E'/*gm1-
%L:kaY*dMml^/R#e,:'gsef$R!LI\^A??9psc2Nu@PMS>>J"Y/%f';WtY[+WYf%VS805\4nj$uOb[kjkM2:%-,mPlk3P3(ZS&"VoG
%:>]su??`-!&+O+/PJW<nFQjcSpf4j'rS6,qqJ!Fq0j8]_3c^LMo5-kbe$o)JON<%>._[N3e/X6<_ddA<8Kk>$3S>tVIj.K0G'asm
%#d4Mep`.a57['@2rp>3:L]53,5PS;\4Y3LU3)P>^,.='WIf&",J]?U!3,'!h")?kF_=fXT!5;CqB7QlG@@dMtZMug:48-O43l>U^
%Sdtj.)/["sJ%,TDi;'k^0qKfm\bUf+1\ca1n\]io1i-Uf[[Woam0Gnh6JE"]bBQcFpQ(92oG]p*q!EQ/mmk5"^Ok;BZFt0>EON05
%<bXn$F+j+>e/`DYd#:d,,bUni.mlN)MXC26!P,5]dR0]qX]_[iQ:"j5%FoqG@q`q[-uN3_h7Cs*7^jBF0r%tkKs$oag(0tWmS:r$
%8+$9Ca%!Z94%OU1";+/=$bY1-*oKZm?g1)D)t)g*D;8K'S,7Z[[JdL>]jEK+R?);*qB:[Ob=j-7l)'$`CnGo/][-'&AVq_Z;(?R8
%M)NRb_QqcdQ5#a%bm40qnPtaA06*EYMjX/5W@TPsrV^P,[hJRZmC3ujr(`6XR\_mq+$:T&J)/u]R39E:N5Bl0K;s__Ic*WuloUTK
%TW3#`Bi>b$<tS%>3E;^f;@lr\<CBW5(RZDU;I]>&!J!.)``=_5bDPX09p.aAGoT-?OM6Z%@$;EA3H2l)HUL`lYSENR$NuK$3=/p>
%TYRQW),66=lmdR7A0mgjAV.Q_VNo)mb`FiP+Ns:7XUJ<O4KO3;!@O0i#sk/LBjYP=@3*^pn:6\GP.h>Lj)?IePQ>Jg'1c2$O?g\L
%H$cZ&&83?;8JIbO-5IANZli'e2MaXo'SP>EMBW&+![e!%4A3I(L';AsSdR"lKG0@m+GHUX;m3C\WWX38"u]&1`'P,6<8\T"RcL+m
%-pT3^.)d?.8REUMU>W\I*)lo&O2/lAFL"/'!U]t9"ca%LaAQ\LK-JK3UbBmr79'JO,QLD]QM2NQ1.Spu*7.Fn4M6R#8h+[U3$8]Q
%jV:%D'9Ob0H584/n2R^IegJAFSB?1T)C,k9g'$nUaXCL-jDp7mGsM^.P2'gS3V;f+!EN_6]8:*5?X=(;.eaj,?3#YS4rfO)"1_R"
%FgPOPNX%jK'IOmi:DOcd:f[a%0n\VC[g=0"/$L\E"[t`:Be+te^`ciK&U>]J2aI-u(!!.$!>U_W(Ae.iOH`UVX2)$HLQd7!&o1u#
%.h[MB&hFo1!s'*'iM]Fi^h8aF.K^Y$ZuCNr%0[:uCr%4E!RUp6!$.^Q6!$>n;"?kN):11f;dbD8$:,/7a!O9qY+-,h3(<4WAO'M)
%<<Q%s(J,9+JE,!u?r%P%i5.Ha--,[Z9;Vd(!8.SDVJmNK#f?mMSs/Db;;5+/36)?=3CO7m%l>%)#'`gfJpO-XO<p_$:_QA\.&5Re
%[FZl.2e@[E$4LVm(^dWA7O=pdL[EPlj;$FZW?BXm&GZaa$OVcNJiu:9+>Bh&-WhrS>L:Nd%?PiBW2S@%G(OAo=[>SA!KPrMbR[`j
%[k^6g&(h\QQJk12V*tqD]-*RDG(KJo)-)o7=(!&,1<]c!,[!R983fsU$!?#V!#?WE'\$6T!-D-T'e5".=\sCl$G%Xc^^C>.k?-.K
%"@`GcaXMbLN9G:1en?M;YH!+A+nL;K1T5FI)GRU"fV1,T#ae(Rf`3W)/@e@f(8jU#^m1o>YBl;=MMNI29nE`M!?VK2S.W"t7_;4A
%:."Oq89@7MJ\J':S757qZiJh]"9NWldjA'+W4FJdaHUGC:BY)l6O!a]V/W*>?n"Cr6*FAt,tj3L1Q.nT\/<^t+Gg>V)5J"\'Ttma
%GVJ5!nT5D?-R^;.bC]moHaF"ZbJ\:>N'M[.MCeEBZ@FOB!#b\UFZjDJaEX?\1'AK5?#nl=:f>*DU%reTBlI:8,kToY!m"cM6u<kE
%$4>E_&4[cFPP,1'K&.<n(5Td"]eoE<i&;Kt9H:^&/)bap`uXFP&&I8uH@g='7\7a&JWjZ8<BqQ>4Cc6c,0>-b+H[Oq"mWBM3g%7F
%WZItG/-'_k4n;qmS=ku\M7s!n7537;3.Y+u+eE!EhhOgU:#K`Bo7s0HK`9VW4p.>k.$kr#5V%//YXCUJJY!ng,nUXgp)a(Z^5Rr&
%7@V<&XP3-d'7Z!jPpLiE/eJoZlQqLmn/7#c>#HEL?_d`)L6+]!&^r;:^d).jKZbQi`&-t^(rS^j^LK:?p7(!l,se9-!W[j&JR3:d
%DetTPQkQs.Wf@kSqp=PI:,#-;Xl)d/&k"t,J\j+(AAdo:7#dH5P[K=QLUAQ^"H+\\$M=Wdg-.?sTG0.Kr!`n*NNRh7/$Ka$-W!m]
%&uuM"V[s8=ZtcC&7(j)'dOB>RL97OLr%c28S>t#/i9j,=-Y%sE2i60R<*^8d>m1c>'F>L;N^t^s+sLeV635!f5oV'.n3#?/nElAd
%NqQ>g"j#1^0GjnBSI*a>(#U@spf%Z3&9e7T'oAAj=;(N^dT-[Ak<\KgJ;ZB,#t>#68!8KZk%Tq$81G(E^lYjZ.a_p5_2&.t7hD:*
%31(Jk`M#'6$",SjYdoYP7n8054GfI+:/K('+N+hB>A/Lt\``"g%^=G4A)p>)"Bm725Q]GDE*jlFB7[n/&<JN+7YqT[qF=VG!@^el
%!>CD=#jK69(dj`/%Yk-)K@m.[pfBF:#Qka]?slB+78RJ.IbSs1<s\pP%k=ACB*INh7o&[\m"s.4:F$\mB[$2F#]e!"I>)Wn\&X8d
%OL7K73C6RLrB)SC5Y`UU-I)VHdMNp5>H/g@a=O6PA;\3"(P<b8ooI`WaKue#_sBu^-q/e9@^enl7'r']8Og++ci?=>dC3Uj$(s,n
%i^j=SdZ3"58:j8!M!0[]]HiWKV%dc&3a!Gaj#NAq1P9co#+V#N1tcdKkJPF^:N`Gi.Uil9b61X<,Wg;R:#ouO8<tfZ/hrmElO*jT
%Ba+a(+;;Fd8Rt50-)t]&&B"j[(bgb<h[C'fTG`8^$J'tR;^FF=LWi^$@T?B^5_0f=G_RggPZ!f<3"ACaBV5u'M(BNS@#fqO"eulr
%73a!c#g1o,'#qi1:''`/KJ8)%!_I!D%cDm$)))=J(Z_l<56r<>>Fe:dH:E^Wclo/ijM@fPqQ7gfoJpTfLp<18@%e_7(r8QQ2'*tT
%YZD1OosQ@OdDj7"7K(.%RRaIr=Xjf\/?lK7:\5`f#fHa9YHLQ0)!j>?.#KnGQV'pQajM'Xfn?%PD^X1i<Z,CCfoB!%ZA,M\`ipKH
%V(F/X6qQ`>bEGnb6$E[=!saGmPiTOk.LQXh+#rP>"=c%V'/O-`;f*>'#o2a06HgOf;&*(DCOmt?e2<'kFXGa5P'T`;ia%+!#UQ-n
%=6q8/,&+EC5rjp&TTr@X><79LY[/*)'^7-AX@Zs5$s#]f"d9tG-5(QB%`<<Q,1R>p'uN76+:tfYD)YRg:&q^:(e/<OL1Cp6L%WPI
%/Z/?F.bhZO;_-;7d3b1A]tJ`Ba9sib6C0uALc[me#s>SQ&.Ak>J.J_8-psq@7B-<>=G2EM$jnntia@.J/HrX[,!>Y=g2Sbm32jgt
%oKXt1PRs=Zii1i`]4k@PqI]:O(S=7&-41(hVEo?]@\M:;"thu@+Xd[i$mX0P>_/^&DBd1/kSc+\G&7=b0jGkPL[\(dJ1B7\cls37
%:R!`@""]:l;%R;1kp6<L`^J12#ms3GBi7fT8T=dMP;Zhdc]cK[chI=:KE2Y[b,"mP6M/0o[L8C_m4<u(,b,'OWi@n,`qkjKmY1El
%#&QTW;!K0Z03#2/^agl]3HcmqZ.(-GZW3TlN=$%W'E+BB#ecma"&Zuk6s6h/UT@9@a$n*4FUJhl63\IFN4Fpa7i!L%=J8T+]F7[J
%Y(;<MOL-\SECUR(J>CUk%RY#Z?t;\l'M2s=\ZA3*A]V2l$j*Q(5;LJ[7'nlUOJeZ^ZkaXXUC#2B?#"=:K$#5oOP6AD]pomJB2D/*
%aX,f0*qW)NVdsIE9/8NsQ@PE_gG(OqZc-a>4SFJ6jDZ/>)]"WNe0N*DD'9-Fi^R*I[P9fceN"i7(p(nO)$*)FXO*Z&UK-;Rg[kc=
%KO^5J3>PC@I1/R](f#'5M9[EQ1eL)RO/gF1ZrMdtR)DoGfqN>i+Q2l'2'OpZTd8Aj?l[EA]tPsCcm6Wj"ktZ8<+cb,_=jUH)$4k&
%;'r.F,?Ymo0hdXQik>T?-]!5U=D+ok[#@#Oh,bqf`C,PKFl\BDA8Sq,d&7N?/)*&g"CJU%@h,BiXcT5I7&6NuFu5;g8<iQOaWA7@
%oE>sS"&^N,Z.)&#Pd@n$frN?$ShUZMgCYR6QS]2pNX[JR*(Nmj'L"t&=t.#h;5I8s?iW_@"tfsm(NR@Ig(FfXJVG^Xn\mm:Fe']7
%'XhCs%=o%C3\9H-,"3)?3J"]05+jAK:5%dIJO,BKiLJ!3/;4^^L.%WsAU$dWmIDl3!"W,r^o,q09TDWDUQC@i?&]R9Re3>/WN7Z(
%"]$\[U)kcc/IfV5&-I6?<2)d;_P<XL^@)AA#@f<P-K5"cbl7,G#%QT&A/7NYbhg.Wo>LW#!nOBV67ZMqN(jY!)%^7s6Eff%OXub3
%;*\tqq?:,d8j+Bn:ojen9G+Ug]==q1M*q3J6E2X$-RB[jL^[q:CrG%;P9c8?Q`:Jf3hR4.4415%n6"egG`EsK#nof1.ZC;P;S@Z/
%'a:EnQ3R"gF_,(g*'HGX6k2q[KSB9B:of2I),#!@&W=,?OTOb.TF%r)5a*tCdAgZ+%=fEj/od&)4GSY*_]"A.!=KPrUs<roJ'8^?
%gNBM?!JEjp=&bZ-,*:!q,\$kO=&=:"8,[?V.??$QHNP,BJK8S9[7XQfa#sp"*,G]`6ZG1]`[9Ih,#X=kc.Zkp@ORGW#5U]oN'&""
%Wf`sV=Ll3_R0Jj1RUEs$nD.P%Jgaf1\[W5M12)s"=-E];N0]g_0e>Lr3Y'"VPKJD384@ua,iV01-tD'L[n.j"fK]`h*SHM()hiG&
%S.s#HVT/pB+Scu%8G&>"nfZllSc[FcgC`ouA=PEB(5<V"+:i!OL$aR@1<GbpNKkdai/_E-H9$pX-(;8pP8-Xn+\NXanjFP;?FCu<
%HjP_j$>ueNbcbE)5\bucnSP]H^dM7$R=>&\$E@As;N^go#PKr_:5%D$@'CWIg0qFKOZ>.Y&:9N@,-PCF6)(eX,q0?_!AI/IU=/6<
%bV;\#Mq!>,%%.7#.bTa_lm8'e)Q_27\<F$XJ`lBZ9Eg&b]BIJ%3]X0Z$`"ici'*F>)$:?b#mD)t-+-(H-*3Y*@cep)'$\^%/?E9M
%$lQ*<dlAIT.G5N5j\9D4kH%2[+U)Q_J]f6HL:d+("2e:tMc)3<%S*sXYWBVJ=cl]6/(b"*6"Lb9IE5h7Q8E$a68ir,-8;l!O>ZY3
%3#^"[`;?e\]'%<0(5H+t%Te6Yr?+?pK-A\a03'/--b;";I>VS@QD*gNch**kXNE!*.%-tPZCnTFd[5^:%&n.HTIQTB_qcn5;0u#\
%[12k5'\TWuW"Oj'.MgrU?Q&5`[IC8jfVpR"f_&^D9k&F<aGN@n"9M([-jIl0!p?Y)X'"CiqO+o[$\T);Z7,Ys8n(=O*k,ng=ga`4
%U&`+$G*`/7+fTctNJF3Z.UmqQOsh*P0o9QQ"HtD)!2)[l`84h8MPS-t>p[<Q^PS2B_17F00HeqU87/IF@T8-E&MRUM?0oI]!*B`s
%m@]TaT$3Bm/ID/?<*I`00X<$J>_[(>JK\*+)Fn648u#\I<)TuKLq@RT.G9o<MNMU[SclhkW<Q;(i0qKbW`0L#W^\<I833]4nhR<h
%b;(MH0g)>pF>HYUQeiUe"M?l(h)`U#>K3*Ibb,;"j&`Ig9e/p&M-=E"$9+EXL<.ifJ@!4[a'`03D1rO@:PTd'&Yj<:[S"(.K3eR0
%%Gt*""W[c'!hE&]e;WK/ii2d)4OHON8hdcc9"hscdri#D`1I'Qkq5%f1^g[N_p]'j^]@`Fk_u)=UfO@%%`opLgUA#u,(nu^*fLb.
%pYF6e$FhGh`^qA>;GoR9WDV`l32pA*,6XBfU4LmPmqm\b?;G`GWJs2T@0NgCcRKRJK6C4UaVM"1KbE.5$<UOOBEB4uiU+N&[$><l
%MT3HgD\*VGSYL^T.c'mX<8uVBie=17?]h5F(r+P2."f6*VOGJtrf>IBG^i?q\tb`BVfi2?TSGW1)3SKkJ-\BdTEc]6\S!-AAS]Wp
%(7[q."PQE%F%!I:XD"(G#42ksp;DDXZ\^D;OnOJog!7nH%/[7o+S*4/X,M$'-=.lJaH9AXbkDX%fNUm[Z#O(YYt.WNY"9rmiVf3Z
%L5'jk'XY?oJL?Nt2!^nU8S$"u_p&@d;oh@J0trbr](7'Q`+!+G5bWlOZDXZ/[b#.;],!\Q>VlVi7#E"u(9ECo;SOSRKh6PsU7621
%_LTJ:6:rsL.k1Z6bfOZ&@\nf&Pf?TM:lt+?#c_/<A0jts\K*5aVkZh`m2*UK.NB%<c8PC[NEK.8V5Xf8O"/LT4etZ3<2uYMN'riX
%OCBXS'[S[.*-$1ia/Ge7`aUi`9pc%Up+oiV-nA--:e2`Iis3/0$3ZGML6h3pKd9Pa/aY-.dV9"RG.?%W,H#8jKf"@:Zb>`Qf$6b4
%h^BI](!t?;OJLl&WQ0Ug*Xq_W^@o"8H=mRQE]AsC2rQ1hbe1b3g;PjF+oA;.`2P^saR%!<S8Jr'be-WMQft\6@cq`+%NRI\mi`PX
%Y)I0!@fe-BbmP0YZ)la8;3^:$(uik]hZL/=8=56>_1PdU6SmqAan[O0=<US8OU?`'+V>4h.qXs"-Flb;`#:(k@4d][lmC_VM7pl9
%QF<N.0N?L=T'X6H\,[47/ErAVQV8pVNAA_&'SUACX'"-nBZ;8n]&8\T$#)P9P-N0VbNT55*1@sa3+SI%@R5jgF:%\NaOpp%8j[,\
%[I#"%qro6u?j-p[@)N5A%G4),)641<2NW6_%9T'[ODG&)0$o0&;Z^hudX@^9.nZFiBcrS\G!1MOGbC2:1*DE%=c<G^\fJRpl('e"
%ZFc#@Ab<>lEGc1VF?/&#P$/tqcFJbED%fJ8=ZS3<1$hR,MM^W>F@R84AQY8"),.>L=0g^,ni)^gNgu^a%-S_,C^df4Wc4^B@PCu5
%!oq+,Bb10DUls2S/?(_Zh*!=G8[c,8=@'_LH6eDZ>r$:IOsY2X%`;Sa$:\5kjG20C`g-=>\j_IO:fPjE#*b2Uh5J"1.HA5P&r,Bp
%.M9u>O=WhrAd9)'d08"O)815Ir5++lY_,aiSKhT>,lmn#KL%+H.6PjG+Uc2)Fus6q,a#"9cf8G(#N]n=d10/H86l'#^)]",RHt>k
%HAWkIKC1BX[].X<(u1]-ocoK/#af%AoV`EVP+<):Cu*cY,"##eU_Uh7-0ZjS:DPA>W!,mtH"(!O"[pG7DdiQ9p=0o5'unH:P7)F#
%PcbN-mU-^Qm*TL)p@]n)Z7)\b(jN-A6'<f2Sk:DKp1>PMd#]>.Vnd*\Q/h+s2OXmW1=7"8<pes<i`URuLZbWfi*g6.V`!P*%4M=6
%Qm6$R:`qAW-C"c,OJ=(u5o;a/6L6N]7UkJNP)(q\K2qMf+:aSE798bY#)>9#o^nbD"d?t<02@32*0\mq;a?+Pe>cF"A2*@8+@5Em
%KuM<$,!C:Q8kSPG$cgZEMWa=./7=WPP$'6pY\8O&`Na+/^((\$YXF[0Alh:D)fu0Sk37_$;Bh=G[KAp$68(X?H7Ho:`.oKP3C]mr
%5V-*c;o1ZM!uFNpS#)UDR.ZX&1KY_qBuHg1)USM&m9EgOl*BV;([+*56m)fI3VU_D0$.K4fE2LqAt!fd)dJP?aYs.mIb1q"Nm+T+
%Sld$j<:B:8N///1Z7g!qrV"EiM'uAn6HO&\=NfAmc7=Yo3o:XX<2JFBLPp7%BW:JUn+:EoNmfsa4],.H:%oKUTrL-a!!U\fSmNR/
%+m%H3TB2+\BeL&XQ*TgONY\e'9k9'6n6!PdO_WU#*p#;)]XL*&1h?7FE(75MDs*+Xrqgm(r>=QToiL3c<_c5aaBpQ@pe(*&["&j!
%OmLR+A3T6'3n9KNIdoJ&MVW9"@?sjn%5;bG'IbNg*'.2NnXfb&MTD6*`s=RHi1l,+)LuQ"F]pl2o6rLEU,8/#+g*R+%sK8tS-bBW
%DRVN8Q<qc#[Fe$<$6:8YqWl?R@n%cDcN(0689(%eq'gTn$j4][?+X*"<.XeOCod054mN%NfJL][_;m*Ccg+sBg<]sDl)^^R0u6ZP
%PN!BgnB<b<@<ll3[&L"FkJq?[eDF3l+/b^(<)WCr5^lR$,1Se\,Cd000AddX]`q$('lZ`]`"(8=8LMbI>65>XM(EZZ7\jmZ2Ha'n
%"66kEabk2M&?QEAs(LR;EWfC5>N$0-]dZC`39W5CosP+eegnf6"Y+^E'3AWe^^u-W\#([2^L6cc3;?j>5jWuR)1,o$YdS24^i_/f
%TU-Ih[1_[dfAo_;$`j./'W7:RHsb8eE=f)fs!XlN$>$mQ.S-FKC@OcQrlhlm-qK75kYNt_BuX#D=o^QT<M=eZ#nZH5<S"icOn+T9
%fs:oe<==Q@P>!:NassF1lB[]7<=r]7`*ETum'S@Wir;U3nm&JdM@*FLS<ko2Ul88J@kZ90gIRIg&*9h!`l.k$XYOemo+,2J`WlGG
%@_8WW!1/I+>I_i;%$XANQNEf]QDT$QI"Xd6Vg$V&f7F&Y`C-1?HiY6jL\qOY./$tujWQ@7qZ8>4=c<de$-\R`ER39J.Chjh]XBqb
%]CtWq'?YYFFGl:gat=CcO7:*co0(Q\gWi@K470_o@FPB56_8jJjkoIXF?cWbK4Fpo"?9SH26]nt?Z/E0Y79p3.ktZ>2XL)Q/jF\'
%KAk.jr\[uO!?%ub>'JOTIX6hu5-&Mcg-dFp\QA8D?kF@Vl]e?Jf"G<Oh+`up-/?&KZe'V/\6`)G0&Gu2&:iuNo.$M%H=UZ&BJtIF
%Q`6.=bA3jU3t8`K]eU`gT(/rA/9fX0J6k7s:`M1+7K)d2R1kAhY7jWC5?m?!!1+(0YGR?9<)A&)6MFq+8QM5BU-O*Q15Qbipc2J:
%9(I5:o/^+uc6-l.3T]D2FZA-S.4IMRQWK"g\.tC\)o^&6E;C:tIjKc;GqDW0WKa1UEd&EhEIHpg&/NA/I2+(TGZ1'bcu-;/(ZCLA
%74A(Q;0ou83Q%War#%Z$rFu1M"4gqbpVY>;QsXf8#eF!<e68?t/ik+K0>D4G3,GuNf%q/.%Qi!/XiPAM7Tt9L7cjTGnMG1!I$AkF
%JQ08=P59`NWsUd9</W'S;<,)"]K5V2SUOKt3]Ub7GFY!)&BO+5FQDqY0AMD\DiGF,!,O84]U#hj=1`-n"pfFDbms6s,j.%CK/1[\
%NgP>()u)MO8I+ROLs)[TCegJ3@cc4d[7!Hg.G_f0Etn$[M!?R>Z[]J0dkgMuj^bJ77hg4"n3'G2W%+.kE4lH?>Uib)!DfH%cn!/r
%"<(%_h-:O#$-;M9dTKqJ5uY\6$o@&#eU[5jikt`0peUZ2nYl"h=!WlrC7X23f+-?a\k@;S"U)0n[neRPg5rMI?WD2;]_X-:1PdpR
%fo":XgHPM`qt=69+Oo$FHf_=AQRE`\Y@D((mB*Nsl+r65(;G*NBBrSJ![mrSQ_$eBXD$?smoC3FIJh+jU]pF1O7.kC.sfb5+0D*@
%\>)r5F-ZK#g$6kM&n`,L7)=bD(i+u@k\D<lbq]V4po9!7leamE0jc"LQS3`S5Y'iVr@lsn'm<!iVVq;)e%@0"=C.>oFXK83,BG?]
%!-/gnHP(>n''$EHdK?AZ+Wntd@>c\E:+lL;T'#tWje0sbRR1I\_DE]*AN9,[m\$qL%/0.t8`)1VP@.oeYj=\Kb;+F&D7qIA6VVHr
%7l^`qjcn+S*dPOLL#,5q/$V#keO)EP$)9FC/@ht1njgUX->*bL*9bB$D,o.rX/>SK(NBe[oJ-`,W*02QSo,Zb.oGC?ls]r"eR#D3
%T4VD\/$5m\f6ZNjK/n42Q6mdE>5J"&Z4:^P3jN(i_=3`-)?2hRP^$o_fectB/E\sLT3bicM8tCR;OEt+=@3g:W<JWkhM=hoITcET
%kN>[\>s>a\1,VRS+'%X+!'83MPgS,f`X\*3^='s#GQjBd:]1"ANJe,Os/$T/*K_cK+WM;OC."`g8"a>*9QRLQjZ\[n>a0CfNI^aE
%rYVgBX?ZH"`*[;'J,@3oI>_&70/`^X9m";q@@]">a@h;MY(Ju2E=F8]*P&AeihtBTi!Sj'7Mf6p5_N!/M-a@"$AVZYEnIQ+_@TUs
%R0ae1i+cMi=AJV9FT^Itg).:T^^g=CG,MW$"'hN?&Et*P5`.GV=]@GQmMk/cEi:iK<JA50Ea*0A"0_h&$Lp6D2M=.kmkU:!edS3-
%mAl^UQ.bfIA+g/VmWF%8GR+8JC.\^/mhIe5RG=O1l5p*=JPl2)i3L,m6>um=8D_O`,f+#]j]I8uBcjh=nsWrV8MptR0pSk=Z0h7C
%jYnpQ7X6X`c,()D@#h+X_LB0BB]a?r3_mOMCQH=`0m\mV2b?>$B*JpN1VChNHgU#IP?R?#BN_55R/ulE/M[DaaL$qt6fdV$AZ,kl
%&0'&*YW!q?cIFC1*e95nW2.uqZ>e*Gom.gKVVJth-OC.\&;Tc:bY"Nr)??&r-VH6i\R5G,^&Lo??Cjr$8/maT:S7N5^/Sh,0hsu!
%[qK-u1,kn?lf#9d&Buk)7du-O?3G!$!s'h#p&nrZkYX?c&`,_lg4[.j0`F+=&gaVB%odIK:"Aikkg&AFCD_teQ(X_>obYDi'$mTM
%]Rg>B?S6GpW`jNP]fFqLi!U6d:I)1I17+S:(c"NNhgO)cX]O*.a)GM6gNhCCXHDgi,h%f;^pd[b8,+Q3ST$_[Dgq(Mh:.l;Ns3`%
%$CT^ZFKZ&E$6+<MbD;1J3H[bgPGb5%YKYd!q'4#BpOMlLiL(]b?>Z;hA#3_1LD0k_.80`/Q[l]B>qsFrPXX)$Y0!Rm0pUclE:,2$
%ASQU.plm06Ru+d@7uDg:q7tbGG9P'c>F!Zok>gA*^;lRKEk-okX"1!LQ!]hQ(NMeq^W<kb+Oq^H'_O453>Ws'k08O&#H@h))Ll@6
%VWarmOjEh,Ymsk;p[u+o##D1UTDo\'OA6Qd8_p*s<V.T;^Ku60R/Q8:qmFN?DNn"?7!m2cVZ>L>T/*m1WBc;nZan5^RGS&R-Ykjk
%WpNIT789KQp_eT3<C3iK!e!Ltr1[p;=id_OcC)KdLcu0M^DQ+B5N_#5#MF?_)D'#2WWPH4QEJ+B?[0j8/tSA/KSA0mKdPW"#I&uK
%?BmMu?[2^4UR="Z&0UHKZCl<eo"YM2LZYQabhBlWa],I7ErBM"P<Mc]\UO&]n"I]@9QSdiAX;!KnHY?9=,@PY,@e_]Etr)uM,?>`
%!^"\t0jW/Ta>.rV5bksH_NqK12&f!ifr!PCp%P-=kT-\]-A9-'a,o??BMs[IfCW5)_(Mhob2*Q-d]kIOs4e6"`0HtpMjKFQV@l7[
%I"@qfEX7+2Hd/NGKMU+3W_F"?]oVe!X<O<i3d,fU[&PTMRhME>U'.%tq/+..2?`glG7>A[W5.P9,=3[!/nTqApWL)[R\U.>0Njr>
%8U]7(,PbPdm$g1Nh-b?(>H2B6>%=a-1i,4gV1f-m-I<$j?o]4>A6(:h)V>W_#L.Elk(o1kK%s7ekS6:YXG9l1oirfP;ME'l0eF36
%(f%HY&=aC3.,[h2mhntO4$k*`>I.AWDMnun^"HP`IMf,p?]O'Z3mF]o3Lpt6m=@>)5$F5`^daFC-+#$"4c;35fPg03LHLTSDCoJf
%f>!^&$7/?E\.s9fJV@'D][Wl?W;$?X$C%Rg%2%YXhmNdfFW-b`<S+F(mpD\JR8kVK@-G2;aZl<Mis>>V2ip=>ABjmX",<d[_dkj?
%!j4q>m-A$N;uZ0VrlP-4kC<$hn,El#\\J'7Oq%@?4oOa*K3mM;#Do`Zf3olHg:6m\2.?5CKNkUV>_L%$'mG=83!5Hscpc<?:7:$"
%ROJKd19aEn_&Ot'orhl_7;bP'o$XO/7kfA!LkIU9edI[BVV6W/.fmq$;P6QFPQs#TIu\=RCs_QQ\#"m]3(:0B,%AfkED;AEeEulq
%JIj5e=8t-l&d@bp3EHo6oIr_N.SuZ#0aG)f'c5fgGXV11JT6kHe.-o(Z]WRsfA0q5[ceDRHf68bLeCAhEPb"q#2!+2d[_dG#Xkr?
%_DZI'GHe7HI+58N74R\K]>Y9k#rGC]O<hUI:3G9%LFA"]<7-TS2cs^(8m%"O(2M"hk>h_&90fNG^31?rq$P?s6JbCMi#U6R4G\6r
%4g]EVA;b$$pq&eUGOq(fr+p^6&S5\so0War8Pq(Q&1C0K[2>lh:oKl[aPC$+D6DMnRolWHj'%raX@efXoYVEdAKQADT=[:q?BBkn
%0K[a*CRTF6>,Ym9Xg(JpG@0B<@5t<KN<R8LqAc8jTQ0D^3._<"5$pg?r9X\"F+cg7X9!c3jbC9N^%H":@al<:H,.$K)%'8B!tC:M
%r4qarX"tt-f#KPk?B39""Dhp*%18LO(L8LWUP,Vj)RsC)SO!TG*E'Ne1W^:f%^R:E(sc%]Gf'PJNa/d8V/W=nAi#-C-8G.Ok@'=7
%<Y!Z9/f>E8Z!@/;>WC9K"&<\RKk\3.VN0qVDq;mB'LSZ`;71CH1R#DWc;>=;XfMi;7!mguhgfNr^S<1n&qR8,QSk^@QaY%;Z+qO.
%='gc,fXb(rntf#saWUq^jX9$"&Ct$WkBk9t)Ib162sNG/>?sguY%a`:hL,/o*@LZkG6Gu'P1l!G<f]#V<=TkRb=OlqSEt8:%ne's
%%'f"5dPnut*"FL=WG.2[H3Cb\CI@(lKHRi?5ppk_!7a`)^7>s_D*5;@bEgrqhjIA5_r0V0-%0@TZ>0NEG]rge.d`PM]J#^928E(5
%CVLjhi*VPX%!DP!"QDNWP[rC.pVSu2IWgf?'aZ;_nCi9$/PAU*@>QcelBR/"AuBpB^pfCrZ(JYLZ[7ZBiuQ^UY,+=["UuS-%51%&
%#unXc1YX.V8cp]?Wcr=*15"+ENcbOX]>502N-UXSV`&QCZ[8ds<h7b-&?TTHbB%&GFUDh@%7#q7BZsQ5XLFLbcmuVd(MR',TR<qS
%>0&(5"GWcZ)BR4'*bl1jGDuJs<hujh.OqI+^\eAG;Q&0oiiMInW-j$:jdgXTALYf2#1O@&A;-%B+M?>;[nd<IKLRYr9Ra')1gKX6
%IlMi1DSW);?f%&1X5dMs%4htA>kq;.<%1@3dn(=o8PV3I<jMt'*RRd`[9eIZ^@Xs`0)9,#n[%=o7rp!pq8mm@:b>Wh1]8TGl0V:M
%.S83&EkNsBgdAX+P(:H.^E^41D>S[Xh*>RFRWLupjX@*]:D44F\$hW(g?(2c,Gj`:'8(MAG*WQTf%OEoB-!U=2`)In"]"1i2g%Qr
%,*c]f-eKS>.85a'EcK:(N%&:k]]pnb?a(G><,.<lE/;f/FXECP&-o\O:t7ZQWQ'7Qe,7.f8U>ob>_)%JGCo:7,^%p8,IPCTD%tbm
%p9TZGK7]1=c'UCKCIo25T.(B&*G?i)BPc_emo@Fuq$4pC5%NV?71?,M0E@3&31fEB2AL8V4st^gd10>dML:6g%XCetf3KW92`(hO
%1@GS?^Zko:=bB!_>U@q\FIE1\[G)dWR9Y%d;KYa(r+dRCQ#iLE5IYdZmqR&;59%#(1<Dhclg!MJT8F>u^Y9'^B(K%;`[p%1c*GcS
%WdQ]t5G,qYicGH4<>oI-)4RV)4FQ*j:5B.FOW!:hhBA`tG>b:q;';0.M*_UBTIYL%\7"l]&P2%DJ6d&p]1&/iHe`HVK!2)6c`"VV
%>@Z2bl%*)&CB];qMhqO-U&oqbC#e=$:,:C\@`GS0qnAXR>Y]i'9DGn^J"n0ci8$5sYL-P0@)G^5Y3E+7diuEPQ$&@+a3S'>n$V-6
%L$?`hTc$nb[N@-/5`;NbR/t\qkb#3KnA=o0Yra8"SM?O_BT:4p>/Y>[U/H3q5U\M3]ug?W/Y5eP8K$pTc_NV3@L3dB;#nt(a9"j=
%jg@t+!2J&"$-]pmY)URJP)D'Yp%FU2_.@7f!p2O+h0_EG^/:j,l+?eeMpQT4rZD<:ch>7eY`9j%X@!@ql-Jkd-!!%ea",OtM)$FA
%^Rf/<L.mr8]qID8_WH[]XK>b<fX42'fU3o,.dKA>$S,aZ9_!;_@m=7V/dds1(+f_4ShpseFX82F-crRd-Pgef_@4-3CnYRm)U?N+
%$8ud"7;Vf[;F;YAG,%*d]bsl<6's^'#*"k$<PFE4%)5'aCW:9_?noZbdo-0N,[YYWmu$#QV)0!6lOn5[D8^uPL2Gc:ja%1+/2C\7
%*HfKSU#"fa"n@YH!"PQa2=>fLPhFCcFd+,umZ5u6^2L]GU)21,(^CN&J9ntI=reCGq_O-:*4^6X=lSmEbBFtJh;V&#;*GDQ'\!4r
%-G>/bA+[r0@2b;%]GcmcYCdg_BH^Vs(7$OtIb3RQZKVlD=52$F't_=#B@ka?]B```g:C8qNl<]XU3s%'1sj&BS'#2/^8I'uf"*l=
%cm7ZuebHdb1DOF<I`"^A(+bM\#%<I_A1V70\HK,,G+YtO-S#H`QtIt[Ha[MKVXr4LeOnG8>fU@G33?fL]pmUI)?iadS;ZP'97g.r
%o?Und,7gHTj>TlVQ]<T']h,8pJ?*anJgDio9Nq)!j0+]'CmpU4(r?3IgVfYp[BdAa)jYqf%VN`N+7UQ'kjpqo-PZ\l.:KMcj/5OG
%&/;YAoYIB1Qd_C:lh^FITg3PMn#E0c'U#X+;G:`q+Q^>`>^_73_j=fS)@Cr6p=%e7@\c8,S'QC,B8Hi7l8UY3#b]c"MI.eQmuJo2
%M46osn5/!$PA)98q<?VbQ\sRu#22F@^g?UP%]ku8Sg%r(_R*7o;]sI+_rjmqP4[FI$b[#!`R_n[l*o!O1iu6irEk0n`?qW]F;:O"
%*N,k4#f#N^Fhk/Y<\dNYLd.o:'_3&Z0J%W!'21'u0@kTnCVs?oaF_L5?jVbU63C[^__d^.4on1IF/]89JP(pu0'Ka>J)pldX)ciZ
%77*SScoK/\K6J&;kdAB_,'Uq!P"@?C*27-WOd2lT[(5a_Z.hu^G7#5</S#/7(pbWkL($+mYX)Y<EWAtr<DN6*!&E,47lc>HM7W0r
%\sSRDD!h2@.CiE[,0K6>H4a[Qo&7KE65g7!Go;P>Lu6X#.MYCJV(hbLhg=\fGi@u'hCp"iY5HMsA%=+lqjsQH[D,9#l^$e9>R8P7
%?#FPl9(;f=7FU^gE0eIu-tPiD4+[R8"\Bt+VB0j#kou=oV+tsXLocQ^*\B84X(K&e;Xlg[)e<X&NZYAE.J0Z_4kgfG]TO6Gk@Wma
%CVg=D4)HFAm\LJ7HRQb3TXd5T]rmH#)Mgb!!_(1sh1nVHqdKje+b!F%=+$R]1/d22KHQJ4V'I8u.<OO&7`85,BgW#jcOT?_U6X.L
%-X1%]g[fgr(;)ajY4DY>1egHcO$RX"><rLkrJY`Q>(`(7^q'jeB"e0WaPa8ZpANV_(7E\,SK4g@o[32T8c10Wq2;m,QA%X]+jKt)
%l'k\1ZRp]@.G`M?>">OF^cb[M*"S<%V[#FXJ8(813lm/t0lLG6e#J$;WCj(ABt*SWL&Z],^a,XaO3k/m,ckpsN6%sUUX@MioAKjT
%b?`]NPe%((eIn'p8AcD*`ua,T4;(tXfMDE_NppPfb7aYeT\9MpC+WL`UhZ\GZi.hj+;'f'VGiZt.^$k5CB_fg18j?.i+(-o;@nn=
%lI(Umn]OR=ru!!F[;1++'IU8.@"Bns%)m84>polt%1;IibkmD*:\B%ApgI0r*rY!q4L8K_IC-]Z;0oT_;UPjOO+k:3+Jm?*+%U3[
%?2A\%^-+5Ya*:F7SCa7:N'RnOZRMo8`3T%`;`,[J/q('Vr96!O9u'iRFP@+J-G-E3//f\/eg\qA#!sOk?^pWlA!m+j;I/p\W8KD4
%?';el4A2Vm<0olSfPjjr!3=Y;0).S8H_1+,,et$teV"R'>'F7ZEt+]>/%T2gF53[H$KlcH[(b;b[K]7FRP)apI3%DC_67B+&/*bf
%4ttJrKO.Egd6HZu,kMNqa`&KUpi((4cc_^ac&7&A=sLj!h/+]`onWlMac7NLQAn`-;cf$g*FN[0i1IaNBWg076/ML&EHa:mCMr_-
%%c@Inje/@pq.p%r!hT,WI._?5`<H;o\eR3LrRjR^q58!i$c4h_rZP:!GS9gCYT0ruc2/`dH3Ek9k[7K'[rV:9a2QGgaTZLL8?Jd_
%_D5G3JMHaimCNSKmY\^WMm*$WfhkZpZ]C8QI.lNj,;nQ/=:s\_a?dSs)Io\I!(O,]Kc3;Y*ei`Vrgai=W,:+KBXA<gY$aQK[6[]J
%mS]nPjRj$2l84l!DTP;TO_[ItH#5,h'#<Q\I'$fXePIic()i8kUBrk]7Sgj2:,HKUHQZ$Yp:%!O6BV>pbhGb_hnu?c)jQ1gp-XA;
%VjIEZK:J\Iddsu[(Z?cl'BC-pHMg%^BM_)WW)-j1_MHp%!pf>1BTRcFq&.bbA_JtRe[<8g"\/SNY2"A.mmBWXg8,O\Z?X+OlD%nB
%MSI462NB5On((#\$%J)W*&Cb,;'r9eIh#1$^$TYmmqQhn\cL2O%5N/9M]is&O&PoHKLF(@'<mVoo1SSnYa.l?<6;s:>TcB1$sgd4
%CGkS+_`hI(ZOAV=;djo5J998'k%<:D32729K*+[*H:.E.m#t+)oRt8'8Vfo^.KBF,</SJlm^iNK;rA")RIb?jTu!Cm(>?\5W,bC]
%Zf?W,rRJW&L2?I;n8D-e=8CsbG;m%"YdANgBj9@`?d9Y;-g:If_@]=<V''O4WE,,G<:V[s/g_tp)`k89=+l:%oR_;M95h%n`-K'[
%X^W0)aV&PDEMR"k$!EVtH<XEo.?jujj\u@3B>?=]WjM!'kfaHf^['*ZUC\_aOqn=G":l?u-Kk=+bQJt_cFJPQ^cK"Z"j6V+-;_c6
%)Qno+CIYt)<V>)5U<'bj_D&">q-.U8!epGqQt,pALkqGEY@m5g0r@Kr11%id2S>NE_^2H'_D+,GB8;_Dr7KEj`t>,U?F'o>S49?t
%knc>q"IFVnA%j*8j`Z!abS\ed,&Nk%#5frK^E\Z?"1@G8=Bg6?P]I,Y2Vn/hP'G\`U]mopf3`XfnR%d:TRIu[QMGta5b=<jrNC\Y
%;nU'Hp2tc?*pQ*dd?/Ch]0k9U7,9OfJ))%#nUcH+'/);69R[;\]hTuTQ\*k1G?'5Pq=7>d\]B+X%ZlF&%%sCm6UY4&2=YuS<1I3m
%U30"hH$Z`o^K:cKBpct^Zgepl/2D+&9`u1V1_@]bFZX?F@1]fqGWoNiRO0t))\!=2HOth*H+b;NT);h<\qONQ2=&BW_hBhV)8<*o
%h25-EC,lp@C,NUH#Me'j8oaGm6h'fZ44beMY>_Cfqm8(]!9c^MK?-A2GPKNF@W,/djqr^%I\$[W';5d!&3Q(>k*D<r#)4P.%VWk,
%?=[4aC7^$nHir:l;aC(_U/U09K/RPWreuUTIUn;CK2\NJW!%<$Rd`VH3kP:UeYoG8<hHNfGUll$WGEbd\n:63<ke:n#j9Q-M#l<8
%;e5T<K%MX]:.[cTDrlGj%+`o?1QS`U+/M9>IW$9T/@&Aj5.K)GE5o:53YO52P5&SZf(f`IC&;(B'!A[i/o1G-X&ed>#".0`D617U
%2Uc`ZJ58*<XOD2oZuVtMmH7,>9rkuuKtYdA5a+RcV)d9O69'[toU.@\HOtl+glZQ"[%t\R.Xq;)R%lR20PFF\X=)gNqFoS$nefV0
%[0QNDQ8s1^O;]YMd16_B2V6;ed=[jT#IlVU"YG3/)i?7kX5>bi!%KIj\`;*f//<3pLna^Kd1Z;Cb@m*>TAN!p^4<Xgs'),t<J4M"
%EQ>r:]$u-Oi@`B.@7)_4VGad->\be-lo#;f[q+irfasln[X=,s6\@HE8U>\3+fK+.7m&QZFj!Vf!>Aa0PUYgHlei\*,d`;1NO_]V
%quan^f>*P\+d;@Y/Xe>p'k/Z'P\!>!Z@=%u.urJ[?D_UOrqbcbc&krK*6qEELphh`dnkjJL?,LLUjqmp)$;V7<:?Nq&)2X"fVfi\
%ho%4VA)I_E*Mt9CTA!/N0BT&"6ZQBTh/^6IIu>)hb%!;-/5'Zr\Xq&f<8g6X=&)dhhb(n#7?S)\hh\&-?m>M[McpL@.N_XKj4YB0
%pEtkmLjH`kAci#V-l3aFopH$`Xh`&PT8nTW=/,l>oEq>/Z_Nd!VEQ+n$VY/QWXc4Po%Hh3QMr!T,,uMJ&F-_m5iAM7K8?,S&fOXp
%Dkk\561HmhkDcA#7OMO:E^:.[5!0iRJ:g%"PmL2(brb!/%4fNuARp?u^4=2h[6h8#JW$Ym3bj>']4%O*5i&+n1ZW`Kp1bt$QheDJ
%,kn$=9e'(2-8s39gJ>nb.-/SV2]YD-iP\IjDuf*`"O>[P_t"a+2\eeOd%Xso5a+>WI`SS;rkO+=Kqm=:<[eUGL_Ugo_$aJ3Dn$&>
%R#i;n[%R-Bi$A_P<:]jbi&3&o>:gJa3T9(b4Boug?e(*fJu@V==brmBjDJ<2bk*m_jQ%Q5Ic=<@[Z6>6E!SW2Rupf:pO+)8pG59^
%(+2`Oii\\I(Etu)7plp.lou8";]/-_>X;85J'6EAa*2+44gnZTKr\psit/`;S3kmLg#2MjV!L_-^Vu4_eauD3V6Z8'\HV4df#LTH
%Y$LGrZZjn:@!*5.1t9)[)V1lFZ)T%<]Y!'q"N3oZi!+A#dt1?Fk$:ube7]?JT7WH=U`%%PE.G-[JQaPRWf5dt[FCnaJh/5d6pZ6=
%5Hp6i/=oU$V/#ih=9f+8&l5gW$E7bMYeW:JT5OM<1b4eC"r'B#7_Z=><X/Bh'ko'/&/B%1f=X]^dBj*AU\5_V&$GubN1t%>.e/-h
%`)*DoRG21"dC.i$,SAI$6HS85I"P:kh<m`TZhjK`)@E3Gg$&hl1#*/])K]9o$;NKH,mZ@iWqLmU?<E$L`*;S'X54eP-">G=]o"pR
%LM\M;C4GjbC2A,fD787s,=2&M:0Jr'_0=)VkD\td<U41Qre)n-PHC>%cq^tLdY(U@3C=4uZ4uX>QH\X<FkR$hgoGD<Z=4Q"cH>V,
%_`T$@j)oQm#hJ9goQ@Ne7U/UT3p'o+E@q;27'\=b#NY],N$.>>NM]G$nnkg?($d\EY?M/r(eqm9FplUcT,UD1*I)qMWT"i/:l,KI
%T4[pfVs:DF7IXfFimI1#3PfF4:b=7e[+l#\Aa0kZTO_IS,)qK@2GomK<hNdmMANa&b.1N8^,&3:<qDfZHn+Y=(`kWMlc!jB>9#Hd
%!E*L\BXFDLX/:S*b5KmXXJ(a![9aP&4jR@jA\r3Qh,<5[GA_M4d,2:5[hMMj3FsTJ/NZ,IYDJoOLsLr'(6c"+*'n4d9$=D_#1gqm
%9+cP<1@Ocij?h7VfnpS,lU0.RC;o'Q+.#W]llF?hKk<Nbe(gLr_ObmEIh?f(XFhaYoPtBS]e^4K-ATF@!l.G^C\Qd'iF]?79/<)W
%VX7H??"fa`S#&W9X^^]3$lt7N$5Lri*-tRuTm.7BWGX`5?%d%1MB!jFC<ch;WJ]H[_\K;`BHVU`,huE^h$s%-]%[\Me.`U1F:Hk&
%GD8g:6#U9sG0$G3SDHcbOkB]sCS)juCS#$89')S'L]@XASjk"e#,rW;A34h)BHBk#XBNQp;ST1`7s^VVL))nQY$.IXVgCYZ=r37K
%UjegC@@bbR4@kfnWUG%FNGI&].>Y%qN#)3tOi#]^lu$%JK(i/L)"(.T(\PGp\B&kbjE$%cBbuk<oiq2#[]J[*WX;c"RK49K8#;L#
%/*/%B7l,I+rlWjmDB4[GTePk%MF*4V)`Qj&?65,$-T$=\Ws4r-M3NYX(s;7K+<%Qh%/4aoP*ZiiI,St2&j'uMM@S<#4<#gZ`dF6d
%K3CN7]gkK'ii],:pkf2Yb-50PN<h_HK,2p-D8H%**rW8<S1Xa"<&D\>\nJ$6Tq%c,,;&kia10@R7<bWmACJ^[9,BjajgJpm=ED^B
%;keF;]5?oA?4kdJ^HYL^mi4uI9H)7-e8lX2'iE9p"Wi1`mL1-2XtuNl'@(=-_jsRBmnf:)G.ZRrn*UtQcmi.PIs(?aC7FeMo^1W5
%UdGQ.,YajmU=/h1OapC43(7ffT+9cm"?B+YMLapD[M6H(3>7-ap?S]P^R"@a"ltuNe-XRZeaGQGhq(:h3h3RA7;aF((uQcGo_N@1
%r'm0_`Lg?n+I1[b:AEDdD(?;0Xm''%Fb-Fe7;1f?mLFthm]J-T7",:^<V=O1d5jih=0$%9h4\;h4t_!7S/-WSr9#>l?$Je!^FVGs
%)?o+i8df0J*4F#YjqXR>ASXp];FhShGa[_n.S<mP:Udms3]4nuBt+^%3=9\!8K'D>q9\pa&n'4coQX#k^G"uZ<R)=._KHeX3O(/t
%VofE0%)iJDn#U"BB=s'=kVOC1:)WVn.822CmEfb7F(FhPMQ;c4kp0T?If(R>O8KMJ5KYi`V^j.k5ZSurF%erI5$a"_<bbHe/815U
%+EHM29nR?!TANYjfl%Y*.kPh],Z;R%.ZqLeQ7@gRA6_)tM)<6r-)`)d[4j;FYMeTNk1^-tWY/.R3sbu"7W`=Y%TU&(lIe`*5Im?L
%9#<=hT3/2O(+l$Z_!Hm\f`:'oE8e)0oIU>&XjWQJX:Nq.h[J,N:2k<$=\e,um3E0Vn>u+c$%[f&m7%P:&-h!k&:Gt:1O.U3Z_gK6
%_;1#DiNqZcD"F^pZpNerJgE1Q5+/'*7<lSB.@@35Aj=6ZcHdUP1=OZfRF*ffVEK@ZDK`AjV$+J%Q$c^P:=q37'#&gf-lWkX']"ZT
%;6D"LNbAQpm<Mh8XkN;Cb7CTL=?/P",fiR7IHd7`I0Xo^j(R3#_m)kLNcXT`0MsLb)8QfOSYOHIk:aR5KC0EHVs"$XL^%ul?lI[4
%WAD8$#UR;^]$Yf9KT="5Bb8YU+a\@+;[*,j\N-eS6@>o#S61FIr90<Hd4V7(qfgB%<h6Bi7<Vh9kWFlJ"--\"$X#C$^<+K\CcEdF
%,4JcNY.5"/A-QrGiLA+TrS[XqoLj$E!/M0kD&&U;(FE"DBdN00E'Zc<^_OgXm:hlnPY@00UMA9qqNt4E4!t3F-`@_-EPo%(`+I5?
%'ON[H_l4/[*lreYq**[X;BZ$AYR@BbN"<-o!/X=8DDj\PJ7kPHaI1-!9E7rXTZ%5jHYRZd8F=UP<q@[(G1ornZLV)koVZACc&E<$
%Ueli1_@#9,E.,;DBe6/)fnF*OKT\A)a$pU**<u]qBpg6WoNmp_I'$3l1N$(5oq;E=Pm<uoO/Z?*kbt>tF5DFNi&-2L^d<XFQd$a2
%RP'D/H(NHI3E\2qMXrS!2/%eae<[\bUagnmT%>m#h6tlopub5AAG(fD-A2,"o6>@MhF`udAkpS&H)Z>X^R,[Q+o/.Ld16"uDh3BP
%E&8ubqRco^pGM$l/4lR<Oi3tVZtS7r,cXU@:nW4Wq8^W(2uCMq``-uG,_'m=M49j_eH5e@5/fan8X)rc!G-l1W<]lgW,8M08#nlD
%U#4)$=0>d-"V`KCD'OdtE>jaUOW4"@,&WG*BX.B`>?",EMN2H8]<A_7b5jWcO%]<U55s0mI383pXf462V>):'!N(*;MpV'n(4[H;
%`g%;3[4>35`d3+P2]-U/_s%Dp%mBhFmHX!*a(osgTC-]Wol?ZPWDWG9*]\,M8?nptX&tFdJ?%<Ndnd1E(-Sgb#BSY4C<b<O[aNY@
%/)pDm*7!cM[,\a$6iJQ';Fm!T11(-X@^RC!pE("GNm+T1KD9,1J_bQ<;*qb-\,^BjqL3LJ8Q3ILP(+,2TA`'')YGPEc0Z)`[%6TS
%KiGFH'";&rE]JoSm)038$<!>GToH$';lsr$.SU-"<YB+b&T"kB8@f,U!<.nTJ6i6Ec1de-\nG$.EQ[,7;'a:G(fT.+:h^XOU:Yd?
%e9r^$O)<s\\s?UEaY6\\Le`G2Co:14Drm:eb/:3X68[J^3eA#$&fG`):$6"9\%RR`$M*PB]HCW.8f+:lSi*OUm5CqBJTTZX&u43Y
%.QnlC8jp5JcenZAY,tp`K"Ic#iB]qA:;?&]]csalgi\6un78M>7!G>go;Bd`pr,@UKe<Y.Kt@"44QV@#lai!A=*i(mc0Zp!967Bq
%f5ob];K6C;!I^btlZBot+C?i>*HWd+<igL^+<W2/[:$_0d"7GR27<BM.gQGF]ko1c8+&4ZF4XmG#Jfl:eS@rB3ttU'VJTU8.E%2`
%<.3#l)bC8$cbeb-Ce9=UTM-.%iA45Sf=GJad+ild[!jo]*oe5f<D[n>#WDF\6!Xj1D&/QUWS<#gj15<E[8`/r)Q=ZKGR"Y;2[O"$
%)\r'd:9:TYU:L)=RX[Of43#jg\3QI^+c'o^R*H,(>7df_97M\i%HaZI(*R+Vk1VBiN[d5CbPrt<jP/g=.B0+6(HlA]Q+gd4h&lTn
%Oii;K>RFH9crb?C8h?)VUo-VM^q_ie8!fF<_I1'[EnW@&7,@p$N3J0OdrD;@55D/L;dmNrb;rOZ)c;f;iA19W_+C*K0"mVBq9l+>
%AuH1N#qT;]eq6UG/JZ'E2)VM'&$&H__1&67Dl/]!SQ:b4V9H7,,+o1fo;%)[%_./p&7Mr?p4'2g?chT\Cnr+JU/(S,_P3.G`ep(K
%XL+M*YBA8=G;"L9eL$/)0i;.tPNian/2%p>e^&X)H@Gh(mgBA(1's3q<M"$/8I&Y1>NG*r.[;\n9kGFY<$fYRF5A51Ak9Dt]aRUQ
%TZLb[E-Mnenh:U<N\[27n5rbP2#je&5G,6SihnIcDNA)Ykokd)'MD>/NO:rD2Nk0(MI*MMmnhU4[DBXX,C25ejbGdO8m:5h(ob!B
%Gu@jCmf\R5fd$"i3Q>!G)+2ruOAoje+JR9qodi4sAoCF>[)Lr/b]Sg)`uKf@iu5OnA3H7;(r:\<j9T=*IqKsL6MTfuH3A?Kb?T8;
%<.]SFoM=VnKamrE!+Rl&%Lj5`p#e$"aC!uTR%d5-4]4tbjJH>,<9XbG>h+Cq<EdBU$_uujak_/6HCE_+e%9EFfbIi(##^B54$ZdT
%oVl:7*r.eo&]u=fCoKfS+j_.-6US`m,8"cC@)*[cmU2j0]ge`E2e&^'O?e$<j6#sReQll%^]$M"c*_RG-gPJ:?_&C=V=\n]p-^-L
%otMo0Xu4E$?"3$-FsJP/J55hP'\:Ck]C`XO<opPd3_dL*Lec!@A*]ttiS`bQGRO?u%O"=?@^qT@*^DKqE@p.0gU@!7do]rWnFd-$
%&JE>EATcF,@Fdb'A;4VCW1\G7kGgTFl3In!IRb7Us5\4m/fq7Bm"g,,,RiX6>!2CqL4n'U+W9Pn9+k7imr44.jQ`Bp-B@GD2Z=c]
%H/U6R\WOa.l&iB@35;jZ0,0fYc`Gj0(b:3$MWF0s'Im*oFo!j_6@@4r7bVP+J%e)%4E$1Mq]=/pi^O#QR>1"%DWfsL>VqC)_Gk(>
%GR^bt'*XIsG6(IXdpA#&o,FK#M$Cb!e.Rr]g7&;=VWF-/VDSS&ARFr5"-FderPEHLegk4/lIlX?P2_QC8oj.G3u>9?TH(#1A.?#B
%Z@IZ>#q3LPA#t/'&BmuXathP\n8Jj)GnY`LI7:9#](=AAm2&uI,]<8W_[/aK*H&a:6OZ(8*N%8NcjO*AYNWVtakBbsrf,ru7jS$M
%RmPa^S@;cV7OV.QgJuDVb2DThQ$LDKam+.I=6PC$!4!Fi9REjT06GDNWA[=Sa-)l*8fBiBVn^Ta_VMZ'OYYoZ)I@+G6s'p"&"V.U
%rf/%mgPTX6#rRobHR1^u\q)6C9G;j\s!f!NqFs!#\Z<K5ck<tR"8?In.T*_Dql]E/'J*=TONscMkfohBb;Z:R?1;ASf;l@#J_%W@
%9X!iK'b-DH.@4?MLH]1F_:S=FP*t1!Ajd^+Ot!8(MFq3KVbd?<)drcD>mJ@h&]1NHLU^#gIPIr:)Y@K7S7e;r.Ok;8N1I2bd\3tt
%M@G"&g9T/3c]-CbguZa6!oE9s<R]i3:7o)g7noqFnqkn$-l>R&h9r[[6)I@nHbu^79B>YD`pcNO]s)6FZ/D,EaJu;TDZ)-)<Y#Op
%r%%(R$)1G"b=V<Tn6]D_cUloF'3pt)&.[_rpE$0HUA@&gJ_!:%CdHMl<@!aL"]duQZ;`/Jjq/lG%%"Re2+-CiY8s9V;U2sk2uN*u
%?C+>sQ*-&2%kA.=;PH`jW?\9:bpP[]osqsc8PI,?>ZC&CKk_M8gEi6'I1^GlmeGisgi9T#:=HqXC[:Z]\AR^%;qb@r:a_Au+e?V5
%iF$>O"thui,bNk*^!D6.VEDjF_GW^Q]hG4C_$>Fo#%A[VoF$`9J@<Wcr69RJY)j/Fe(L)Zh<9iC)O+\#AQ?i^\nD_98C9*/U?Lcb
%5$N?HmE:4&C36H`F:21-f_fkXZ\:HYlX<HP/W5q(S?U:um(K3$7_I9F@e'+[1S6[[;MJkr!51U5]b;cgd>m"l5>,!5BTb7"MftfE
%/KhBfa5L@"9?=TgQ;Z<5FJ7=k&M(WR5Z10"R^U.5B[6_$p\qZHELd*=WS)<QXa]N)2A40;J`N"_1.8"JK^%p:SqHete>SM)qd]ct
%s7+gi<-^:b0lKtG$h`PT88%17Ic_L,\#81X]e-utIr>Kp6QT5)0]hb`$N1Hf73`S<9jo"J3D@7l@%VUFVJus1"*96M&8;T/Opg*>
%I;NG;FQ?QP#2%0SpL`f_#,BfGkuq,E]bt\MZc'nreNKc&aN7:Jo;5MeJ'nVa4\%Q8-->p8Vn:PsnN"XC;tG"-7^a@+O(u\i+"*F6
%pVs,cpY.@@3!WgfC?3n@CbbXH*t#L,LdSRC*H<8J<GFJ;#N0TGa#ALk1M\8sODCPLXh4U]1-$lae$X&&C&N)d`.7<S8!1mBqXD:?
%l*T*1p.JL+lE"LCRs3?-mi#]/o9`:0g2pM@rEi5)\dG],6+2=[Kh='77>(Z;B4s.TeaZ7fq9rlOKlmagJlEAP;2+r193ZE7F@,AA
%1M,^mX</5=`<Et81Ci+hSKm>I_FaVj@LBrf\adI6jn"M]?_X4I:h!7qoX*73HH;5k\rX=u,&s1!%hI"k[LV[rZqgg*D,]<#\du$I
%K1G>?Y_RZ&If%),a6:!G5_aV>D`!c2i&r:XE+^WN%:`#DA'n[pmZq%oc507;@NquXhZ/m+M<bqJYs`Hm1D!3+LXs*6GghJ>"PAHj
%9bK?-9,imPC%c<UMN`&IB[/h5jHU4M!h$1cTuQ9]RqAgHKbn@BF;`cHZ]Y-0X9atKF.XF)EQfukJ]2"OXQ.5@4;+>H)(jsCiF6:`
%VLh97/+VM_BagN1441r_<tC</m4WF$.@YjA5#KWPXq$,l\S-1W9tOW;b2!Q:)jYl_<^OOgc)(R7nkGjm"HoI3W=ZJ2jW3?pU9pE1
%e>jOO@;7/dkR/]0]-"8#EO3CJT"N6G-3Y'?#W5PI*Cn(&FPp2M[8ucgH:]]CDS9kfV'F]uXcijKlNlIs$(XaEfkO%mH#5Si#,u3.
%/#nqIjpgspb,'1OLPc^9$'@BM\24>XVH"Upn=cPD]BU0@P5s#Dj:UJVQYf*G8NP3@=[=-]&oCCA3DcA\RN'SOl>/A06?'?Gi+kDA
%7(0FH7\-#BTpKCHE^lT<`[1J\B5J$rcDI+#LO"(cI(dBX&,C1p)QtmjY]R.2a",#`qQE'>9Dm1>"/Fs*6^aAXeOkATQJ`6(4]<O=
%?B,p;8cb@u75m&H,eujkrR5NZC"^3`C=0*C)["Rf@;GLfPa27?&@d&s%?8D=1*Dh2lZk6I`ACiE%FFkOCndQG`i/6t2%Y$LYt+C`
%*Ln\2-;=k#Xce>H!+].Fc9C2*2_C,$P%sBO?)t)c`)@!(61.>dr55A2A#,E\>"Q!V:cQnfWAZN>"i$9b"q<h-JlUOG2J[UN[kUs]
%:<<h!G.3t_BZYZCjgTHAkS22i.pVmQSD&,W#Up=CdbTlC't-ek\HFd\+)X2ibsX._'WfIEFA'sNa/"D6)/!q*>tAkPC'n4G==pN(
%oO(-!/=*K.V^^d_e:>e>>b=7o+[:V@B]!*s9%$lN7U0<FZIRf*FTS]7Ito)bbW.-3;K($@A%&#VGiE@.e'#r:n?)ZR!4RoHVXR$3
%=+mpnI,A!n=MK8)j0o7c\]qigBiIhp5UgVq3EWM9'241*P>VPi`Z98C5>P*C[]T0%<=Al?!`!o^X\Fp4R008,AZ?VDCXM_2ZK`S4
%!6s;N80+22@AXtuXLtpP\%$A[,LE(MY'=Kq'7=L)du\qV4g%4/O;FnFONj-0OetkJTjO')JY(Dd#Bd%5Z6?)9;e9fK66O#[k3nGp
%3g!f;C2lZ5bZ?p6K=Om>_0/^!6,'R[A@a)/W\nl=KbH4.=@A>kN8W-9PZ9ZDiL\fQd$b<6#Y5=Nae7i\ggdeD1mR+0ZeNFWdG0XB
%DS'W@`Pc?bd,TEH"^`%TKpS/cjWgLN(Q#b>hQ^[OIL+f*#9(*Ni"0)5[%6n5]J-c2]EPZ3V7dHfpXf@!_Wf#gm9F/mW&'r'*RQ/m
%U8e[^L:CG9QLmlK/9,5^7$WB)2W_71?@rq5mE%)n/6*8CGeEhfSR7X9QQR?JIUn<-=o(>@9\%L-RF)&`c;\6Y?[I<qD`0,MHn^PL
%%Ii5X'r%,9.00.?4greL<c8;s7(&V76cic_qtQ`6n8FF_kR&\:r$LH.WUGW&q.Yq3n0P3qA<PBG-ZF@Q66U1qc[]HkUm&SZj7-f'
%Pc**F5<,GbZDC34`F*oA8.[,+f%l6@[lgfiIVGt#m7_FV]2buF"/cF@AVA0N>6na;EM?;A73MN(Vq#N-qR>5%6/$->5P#BP.DK,s
%F*&u7X<C\pP3t/G%TP]5mh+fsT%MA5VT0B1O([BH_u(Rop$-RkC'MoaC[rBIQ4'To1?!o]/Fh^/PPLnBC3/\IjH,E)Au>Tea0BAq
%Qq)*=/iEV5>(%*MA.=Qg5^Kd`SSl:UVX&$Pffri$@RckGW6\T>JeR2.F?Y^,*Stu3NV[s15iA$*=-[ACIWTpN.BWrJj$2-ZN`98q
%:F>tB@(/8Ui]+;7jSAM-;,30N!??:2E\1k.Zf#$BmCT,['pa/5<F`BR3T2aNp!qV1+]'\2);XH1>+([,_Z)p(@G>7<buPo2qLBK[
%WFcg7:/,^=oRc_NHc/bJ5+b_i4$D_\OrtMj30Dd0rbN+"hF]8Y^04adIg`"u9TVr'ZhZM#":69HA@#m)aBe.g&O2ac33FEhMs/c-
%p0BlnE"'BO$Z3m7RPf%bKIo9AG_9/;f!o1ddMrYC%pcbC0^'*J??C>lFEd5;_%n<7&7'6<CCOW=a)U=0B\:PLK`H=Fo%h4!8:1YE
%WM4K!M=T1?%reu-D6V<;aMWJbX9rD3CYG;M)t[s1X^QoV5ordn>Z),6iG_95mF%K30VhL,$gp1n1<JW0B5.MLWJ.<ldP"'Me+Ou#
%%kl0O>4W9&UK;/,g2/$%.eapY4g>r[9E\Z^Llg^bQ&n!oJpi;rGXG'>MRj`e.d5=8CI?MXHURFF-9"ulCidE_/q3+P@L6GJ,WE%E
%:eL5p$1A-5d./X<]ZUp%4/A/c?/H6mBgJgipjk8OdbDB9%^m3+m;/T`;Klm3#Vjl(Yl39iml0j.8mma]&7AiM3+FKVl<I%fY3a4C
%)BOK7JgI9I6e96".5l#VLuQiAa)&FmVHNjA28t?@h7P\(j7m["7&+!#YT[$9C9UJ=ko0*(bf5dS%>I.;(lK\YHG)LOl",16BuP,J
%HtSM3!J1n98;LZ!K%**XfGOH8D)*:n;n(+;":@Lpg>oa"ndaQ^#RijNLL[E"der?AOF/)/\'HO>dSd.M8!gs*]d;C94#XmSjI\>M
%=-j`j&*>eY'GIm4b<0&d'l+udrMB1h%#O`P+E#d?fQC>U_%c"B!d:Jtmb12\No+!DAke3_e,9[)?;)L_7ghae3>\f8h:ls15DItA
%[)d&dalZsQ%._IP^uSQk>H%Q$D'PW^mi+FDLIX`OM+N$7kZKp&#.?g_Yad)`'=D!hX#FCth%Dmm\2iK0[F%)&Alp<Hp<Qh63*@E3
%<0',iCB?btl\H/1,\tqlbij:/,rh$>'7,ua**8iT5Y[Hb-0mDSmo<kbea.DH-NuG]/?P3e,<@tg*t/d!*<D0`T$kcsXIZ?*Ap#j@
%".F;Qa%BSD[BsH%#Q&`jJ%2'k'&.`]Eh1gh#<=BlnBjY%^!E$[9(_VC(1:?PC2"m.B=ak1@3E"/*%V!]@BCI8,UFH.l0VFQ#\b^^
%DoK:P)E;cRjCl"%>^,2:9*d2`NMF<em:@!,2^hBjC/kqei!S"@jYK$tga"I(A5*<U<TDN4lcH5E00P[TZd@%#C,4o-f1*EkN!"Q#
%kN9B`et"WHn>X^o!Uascdp+\&pY?(1ELP'gJ?!J2_`:*.5bOWaM[:U6W`q#A;&^t"[6o:B@&f[=JZ)._/GDeLL$ZST<a(J&0<h3H
%)'+\3L]pZK=^coNT--hff]ePW1Q.CPd@Q2O5Z1=F"QOjD')qXc)qInbAcnSNnIV8'?DP1a>s']$U2kU:ajJ8QG>Rcp[hu(lSTojO
%UU2$'XC*Hq[op!5.7`Ps\?0S?PBLfh_f]/(Z)lL9;AJLq4lA1!QdXUh(]hMIU<P9?^^<!alj5fh+CGC:FeIQcmM@7=W""S3'*#e`
%VTf%qFjQ^b=*g]ApBV(Y&_\`Zqo5rkDN!(^T\[\OWn!qCQ<HX&]7rM#*:%'+n;P.6d_4BHf*P[(TnW01SXg@A;N3rDHV\"C7!Iph
%2%*^F8!'bt#s%p&!Z<%8s&r@,ik#e`pRJb\W['VS1<8/;F/(7YeTWhd'C\Q?GM0Qd287UU5"cd0aKEf,V@pC^d^<,D<LYcbCZrRE
%U*4ikMIh*o]5-Pr][fC!RUX,f.4?.i0Q,(\aUn["4?^V4.eb<ENNSRY->;?'St@/M1t@N/>eLiH377/5AX>N["3lZ]h:i4']S5e,
%q!FTt9T6rn;qd@mqL=ClcQk.gk$:oZN*4Y+N:7<:\%\Bm6Oc-)P2*m;!ddSR8Y]'j,j.e%ml4enIO6gFl^RM)-h<lu'H6c54#;IL
%0Om^k1j1rt_XP__$Y#7L;>'i*]*H+KLtDPf4tNoM>JoPbVZ`cDNrZm1VqakM`r_Vn::dQK".#d'>A2/SSp6,fbuPuRX*RgXU#@J_
%cCZh(XoG>6M6LD)83(ah[=mnBXPT"[/O$)dr'l:(B#TK9cZnSiKeaG#0q?4)I*).sd/k\m9FRA?)NAJ/1tKbO_6ao>8lNm]5U;e$
%M-fI'KB]legruRR3`mC[lHX44aG7;?TasMdg#X")(ob)5kH$=LkUe,NW+h"]UW]K);;Dt.OC:kf]5:&/^(cuZQ&G^iaoj+\B^sJ*
%=+2qf&Vg3;pS:+`3(H1Q<aQE?6_OU<6WVRdDDoUb]<Pa30@#h//W$G^U,;Q^p7,`_7R.5jKb4?u%T+o44g#VO*V3r.#TAiS_Q'_q
%?Be"dpUs3NN)H*=B36[J'.4!0VfSY%H]*qhI+HU.cI"*ZcK3MAH(^`^4&**BpeaVqdebK%7Pr!C=#A6Im=H_Z$i4u(UWTU:MN7*C
%arG.V>23MpQ5uhO#kN7ICX$4k0+_htDUUF4&QK%K%To*l+E;%U;_*roC[7-fMp.l;=4A0#i0t:O/j9]TdQH6nVtCnT%Mu<Zrt=UO
%LI[)*)8[ncb.\,?`e\/r,2:t*4kHV3%RfG#kKbb`a4EH.T`m1T'd1okJ/;BagJJj0)),t,J?l+.73/2'm16])BGqY-rcm[J)N@s+
%A[dL>QBa?2FU^G?m=23eVpYJb0UQ0F_p1:?l,I=!V\WIZ:gHC\V6)U12XE#V)cZIV&TBp-JfYl(;c!B'qC&CVTXKg:+##_dSGjEV
%KBabZE9klUqKNs\Z!X/X+0qu:/L,A+gC3n@11@@<PC]eH^,!&XWI:ffW&ADtZqs4[GgG@R#8/(JHRk-u5[X4c">uqQU9LJJL<_p3
%n(W95Tjno,.^H-=chRUNG?S+lK.?O1[1?M*YC-RaNo-h=XqY6<YE0sL'q/m87q]%I$G"bJXLE!JQ;T_DO8*7sRiYGQ[B!DeN8*XR
%S;2V,kRQb(du*4A<%G[p8`&<(S!\:@.!3-FUMO#S%CNXV!daJG)+'[lgaJgqn%=<!qe!KG/8-VN)_n[)Yf:cd`6^Z"SFl\[1hn?J
%14/"UDJ8u"HEeoidGfRLCqT\kZM?.(9m]1Ae/:kFp%/Od5JQU[7t:e%\@74Yrf'.4&1%AABlV7(MLg!2qktg7Jkt^@i(Kq,-n*C_
%HC"L4.!(C\g1I2T:R>s3>2P9P?1[S"XTkI(WK4n+*<Dc;Q6o'XpftXfp4RA,]h<L@PdhE>]Wp'Ip6rDl[RhFE3qA+pPLQYr\4s47
%pa=p@c-ugGBsV8S<$W:rl[7f=Nc/80fG!d4p@m=6s2DI^s1:Mpn%\\-J,1OBp2Bs/r6KlkO8n<[IeS>@s+fM0k%4=os7j3Uq#,^=
%_sdTZJ,fHhrq'"ciLbVo^OH4MGQ7H!s7@tZqj64?O4SmXp()ZJrBL>*5Q0R8hu<GdrmUn572J*'r7R_@omca\J,1Pm(Rlq(o)~>
%AI9_PrivateDataEnd
