%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 16_1209_whiskey_11.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: Alex
%%CreationDate: 12/17/2018
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.1 x249 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">16_1209_whiskey_11</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-12-17T19:58:34+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-12-17T19:58:35+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-12-17T19:58:35+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWndUUu5CooJZiaAAdSTirGpPzK8lByl&#xA;tqP6RdSVK6ZBcaiajqP9Djn3HcYOIM/Dkt/x7A9Ta6HrNwN6E2MlvWgr/wAfZt6VHjg4gnw/MIe+&#xA;/MK5sbf6zd+WdStbQja7urjSLeEMQSFYyX4YVp/LjxJGO+v3/qSaT86bQITHp9uz/sq2s6OoPzIu&#xA;m/Vg42Xg/iip2/5zTTzpCuk2QaQhV/3O6W256CiSsxqfAY8a+D5/YUzv/wAxNd02Ux6h5ZMRKc41&#xA;Gp6crN7BZ5bf78eNiMYPVWh/MqV0Ly+VNbjRSQzxR2d2tQATQ2d1cV67YeNfC8wiU/M/ycsgiv7i&#xA;40dyaV1azutPjrWgpNdRRQmvaj48QR4UmVgggEGoO4IyTW7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYqxH81FJ8ogNVrc6lpIvIBSkts2p26zxNXqjxswYdxsdjkZcmzFz+&#xA;f3InQbSDX/Luj6jfCa3uTbIZIbO5ubWIScaOAkEiKyhgePKtBgA2WRokJZ5uuV1v8rby+lMll69t&#xA;6xMErROgDbj1FKmhAo3iKjGXJMNpJknnPQLZFsNP9TVb6FRGbDTI/rDRlRQJK60hg6f7udBjA7Me&#xA;A9VzHzxqY6W3l+0O/wAVL69I+gpbQt9MwwlfSPNi/mC7ufLeswLe+cSk99G8lpHd2Vk8rJAUV4wY&#xA;EgkkZzICqqtaK3hlZ2bBuOSXeb9T1RdAabUhbX1pqkb29peyWDWt3ZzvEzRs8dwXJVuJQfCrKxXq&#xA;D8ItMKtM/PPk7yo+seU1/RFmv1zVmt7gpbwD1I1068uAjngSRzgXDJEZmjv+LR/nDyxpdl5O1a30&#xA;z/QEuIWMsYLSI6RK0jxLG7FF9RFZWoOhOMuSIyNi2SeT5Ul8paJKh5JJYWrK3SoMKkHfLRya58ym&#xA;+Fi7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWK/meCfJ0wHU3mm0/7iFv&#xA;kZ8mzHz+f3IryrfXj+UIbllN3exRzBoweJkmhd1KAnpVloDjHkiY3eZ6/wCT/N035YX8+sTRvILK&#xA;8vJdPNy62tvUyT8Y47deNz8JqGnkI8FWmRkNm+MxxbPT/K9hrdpaLFdTWC2aoVt7SxtJIPSPLb42&#xA;mkVhTsI1ww5OPIgtRC217TjFLe3HKxuJba9+rSPZO00DFDzML+qqts6gOKqQehwnknkWM/mJc22m&#xA;aZb61ZwwDV7fUbdbMyDj673KtZsssihnKJFI0r9aBK9sruwyx7muiA81aD5h/wAKapJLqb6tdW8S&#xA;31rZm3hjVrmydLqJECLyo8kHGjFuuQCwkOIbIrzp5ltmk8jazFbzXOnHVTcu1sjTSiKTSb3iyxRh&#xA;mccZCx477bAk5K0wHMfjmEb+YF/a6n5Njn064Sey1BZilxExKvD9SuJDxZT+0EphlyWIo7sn8pIk&#xA;flTRUQBUSwtlVRsABCoAGWhrnzKa4WLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVYr+Z5I8nzEdReaaf+5jb5GfJsx80u0b80vy6itmtv0rZ2EkE9xC9nJIqOHindGbh1HMqX&#xA;+nKRmiOZDZ+XyHoSwLVvzB0S1/LLzD5V0719Y+rw6lptncWXAxQ2UkBe2d5ZXjWkMFwsfw1YlDtl&#xA;GXXYokAy3PJzMegyyPFWw3LMrb8z9US2CjypfK7Aei8t1pyREmv22Fw0q/7GNswx25pxG+L7Cx/k&#xA;zJdJSfOHmfSNfvL650i3udN1hUkvrbTLlpJre4hUReqPrMdsk5khEakDjQR7VJ3E+29ODRP2Fsh2&#xA;ZknHbp7kdfeafI+u6dcWd211G00MlvE0un3ytDJdQyQ+op9HiCqMwLg/DXr8W90e09OOc4tUezs4&#xA;O0UDa/mV5a1G10a+ub+5tIoVF1qUCafqDVmEXEws6wFOEcjMzEN9pF7Vyz85huuOPzY/ydm3qJSX&#xA;Q/P/AJTtV8vaWlxcyfoTWLiGOKOwv3cWSWl4LSiLCzFhBLEOIHLvSmT/ADWLnxRr3+dfeynoswsm&#xA;J/bzQnmD8wvKlzqmvaZoDTR+oLi7FnPa3Vsou00m+e7lCTxRBOX7nkmxZuT03JNvjQl9JBa/AmIg&#xA;yH4sPddFiSLRrCKMcY47eJUHWgVAB1zKDhnmjMUOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KoTVdW0zSNPn1HU7mO0sbdeU1xKwVVHQfMk7ADcnYYkpAJNB5T+ZfmPzDrHk+8vU&#xA;jj0Hy7DJbTE36lb24WO6icOV5Ktonw1AflIf2gmUSyXsHMx4a583i1hp2v8AmLzBq135Z0m41FZ9&#xA;Qumhuo6Q2CxPdPIeNxLSJqp04Bts0ep0E8uQ3Qj9vJ3em1kMWMXfFT0LT/yy/Mlri4ubltFtkvII&#xA;4Z7NmubkERl/tfDEtSspVuo2GRHY8OEAylsbv5fqZT7WJkTwjdmFnon5jW3FY7rRYlQVEhguZWLd&#xA;q0khGOLsbHAggnb3fqcLPqfEuxzVNR8uedNTAGoeZrWMCh4WOmmMbDxmubk9cyNToMWY3Oz+Pcw0&#xA;2U4fpHzSuT8vdUYFF81XIn6gG3tCm9afBwDU2P7X05R/JOn/AJv2lzB2hl8vkwfzVZeZ9F+seXxD&#xA;b679at5JJ106C8iuIobhnVpnijivY/iblT4wWNaDrlZ7IjxCUZEVXPfl8m+PaR4SJR592362Ex+e&#xA;LW08xQ6gqNDdNIssdnIwQtKlvcwF/VNIwCTGm5DAhgVBGY+Ts6ccZidx3ju4onlz73LOsx5JX39P&#xA;hL4dyhG17aXlxdTyCW+e01a6uZa1DyzaXdu9N6leTUHtmR2fkEsm2wqh7hTh63Hw46PeH2npX/HL&#xA;s/8AjBH/AMQGdQ8oeaKxQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtlliiieWV1&#xA;jijUtJIxCqqqKkknYADFWGH8xLnU2I8p6Q+q2oqF1e6l+pWDkbfupCk08y/5ccJQ9mOVSygORHTn&#xA;rsxTUfJXn/X9ci1fXPM1vCtqeWn6dZWQkitWpT1IzcySRvLv/eSQsR+zx6ZVKduTCMYjZMIfyw8r&#xA;G5jvdaNx5hvYjWKfWJjdKh8Ugotsn+wiGQtnZ6Mn9WONBHCoVFAVQBQADYADIGSRDvSNL7WT5hlS&#xA;VnTTEX92wEfBmIUUJ/vAQanpT3yszbhj2TR7iMfaev44mQQIFYbuL3P0ZHjDLgKXtBH+k5b8bu8c&#xA;Maq24X0TKQy+BPrsD7ZEzZiCR3mttonmW+vLmwup7TULW2EFxZW0123q27Sh4pFgSRl2kUozALud&#xA;xkxKwx4HkNg0esfnKury2aW9g93PFcQnix5vZAMkvAsnq8bfnIoJpzAPxBs13auUDAY3vsf9kHL0&#xA;0JXY8x9iXefbOw07zlrVrpcaQWAsb14rdBSOMy6Td8xGo2VT1AG1TkOyZmdSPPff3EI1IMcYB/ov&#xA;s8AAUGwGdS8w7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXnHnS7HmbXBoES/XP&#xA;L+ky27a/DGeS3F1LKvpWklK/u7dD9YnQ/aqinbllOWXRy8EKHEU+S8s/rMtkjgT20cckkIBHGOUs&#xA;sZ6UoxiYCnhmOXIAc9wx+zsPxyBkzEENJcxg7tyPtvlZmG0QLFvMf5m+UdBm+r6jqUUV2elpEGuL&#xA;j6YoQ7rXtyGRMi2DGw7WPzttY7WSTSNFvbuThJJHNdhLSAiNObGrM0poN6envmP4+O64h8N+bkjT&#xA;ZCLrZL9R826ikZbVPPNrp1y4NbKwS0RVP8q/WVuZmp47fIZrhr80pfu8R4fO/wBFOSNLjH1z+5I9&#xA;N1u8v76ZJ9X8x6nbenG0H1BLurOWf1RWzij6AKR9OZEzq5RHDGIO/d5VzPvYkaeJO5KdQ6NaXEqy&#xA;N5L1/VSpLH6/I9GPub66B3J/lzHGm1s+c4j7PuiwllwgbD9P6UJrv5f+aL1WOjeSn0kuXD1vrRQV&#xA;aGRFFIp3DcXdW38My9Ppc8D6slj9o/RswOoxUBw7/sQNxHqnl3WhLcaXZ2728wuhpNtqFqZYYzaC&#xA;23i/dhR35EgfryvJ2XOcOHiskVZ/rcTZHWwu6oX+imNapfjzB5n1G7hjeCK4s7uIpKBzQrpU61YA&#xA;kb+p8NGIIoQd8t7O05wyEJcwD9rVrcgnDijysPtzOkeXdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVYf5x8xajNcP5Y8tTKmtyIrahqFA66bbyVpKynZp5AD6MZ/1m+Eb1znTfhxXueSn&#xA;5d8uaR5e0xdO0uExW4ZpZGdmkkklkPKSWWRyzO7ncknMYlyyUbNBGSZQi+txCmSg5FQa8a9ab5GX&#xA;JlE7oC8W5aIi3pzoePLYVptX2yiQLkQI6vO9R8ofmbr8l9aXlwtpYsGitZorg2SUZSPV9G2FxcSU&#xA;PQPcoG7oOmWRgESyhZaf848aSLmea71WSGOeRpRa6ZBHbRoXblwBnN2xUV23rlc9LCcuKW6YauUY&#xA;gBkcP5Pfl/awhpdObUWiU0F9NLdKdqUEUrGIV9lGTjhhD6QAxlqck9iSU18rw+X1s1m0rTItPtWH&#xA;7hYoY4A8bAMrqIx9lgdsN77oIKe+rCOifgMPEGHCVGWVCami+2RJZxilmiy3dvpsVtfOZJoy4Mhb&#xA;1CRzbhVyFLfBT4iBXwyJyBn4fViGmedNA8uQ6xa6tNHb6rHf31y1vsLm5hmnea3eOOgaUCB0TktQ&#xA;ONCRTYkk8k8DxOxukXUry+jZPQureW0f0jzjLCym+CFqnlHB+7hDrs3DbbKROMtQB1jEltyQIwE9&#xA;8g+3M3TzrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYt55803mlxW+kaIiT+Z9W5Jp0&#xA;Um8cEa09W8uKf7qh5Dbq7FVHWohOVBtxY+I+SD8ueX7XQ9OFpE73E8jtPfX0xrNc3Mm8k8rd2c/Q&#xA;BQDYAZik25qaYFdiqXCcyXVzGImRIHCBzSjkorkrTsOVPnXK5DduidkR670oKfPDxFHAFGW74/aY&#xA;k+AyBmzjjtDm9cn7O3uch4jZ4bEbrzl5J8pWNrp97rVvb/UoY7eKFpBJcFYlCLWOMFyaDsuACRNs&#xA;tgldz+cOmNKkVhpOr6jJMQIOFr6Cvy6FfrTQGh9lxmDHn9xP3LAxPKvmEtvPPn5mzqfqHlRNPUV/&#xA;eXzT3B+fpwJGP+SmYk9VGPKMz/m/rcmOC/4oj4hJJvN/5jXTH19btdNj5BWFpZLyqxCgD6w9x3/y&#xA;colrMn8OKXxv9TkQ0uM88kfs/Wirr8qvMvma1srgXl5qqsxaabVJ2+pgFTxKwhRESG/kTBhlq8pI&#xA;MeAe6v2teoyabDuJCXxv9iZ6r+TVpougQ3dxdfWLqOdBccPgQpNE9skEYoS3KadN9jttm00ei8M8&#xA;RNyLqdR2j4vpAqL6KzbuodirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS7zBrtjoWkz6ne8&#xA;jFCAEhjHKWWV2CRQxL+1JI7BFHcnATTKMTI0Hl2m6RrupeaVvNUfjfl477zBLE1Uj9P4rDSIG/33&#xA;By9aUj7TUJ2k2xZSt2EQIig9ByCuxVa8ioN+vYYCaSBaCWOJHkdEVGlbnIVAHJqAcmp1NABXKyW4&#xA;BzhijBetNsBSHmnnXzB50t70WOki1s2LArC/rXGoTxciDJDFbQXiwoSKK8kbjxC0yMIDq2yl3JQ+&#xA;j6vq2gX7ax5P1u41GSCWOymn1WG4jEzRkRyG19WxjVQ9P90cvbMgcIcSQyE89ma2N75B0q29C28o&#xA;3FhHIKPDFo7EEf5ZhjdT07muS4x3uKcGU/2oi380eTLaUTW2gXkMq9JI9HuEYfIiIY8ce9TpsqPX&#xA;8wNLc/FpGrSwsKH/AEJ1qOhHGQo33jHxI96jSZO5JrXz35T1aafSvKug3ZnsbiJtYjt9MhlKx1Ja&#xA;Alm9FZJePA8zULyPUZdEg8lliMfqP2plqR12STSV8reSbrT1tdQe9v0mOnWEEweyuLYc2imlkLep&#xA;NGxIibZfkDIiw17b2U00zyLruoX9pqfnHUY7g2cyXVnoeno0dlDPEeUckkr/AL65eNgGUtwUNvw6&#xA;YxhTEzA2iznLGt2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsYsfzM8kX2pPYWuqJK6TNbfWg&#xA;kgtGuEUO8CXZX6u0qowbgHrT6cHEGZxyA5JNBM/mrV49elqNFsiw8uwn/djMCj6gyn+dSVgr0Qlv&#xA;26Lj5J25ePHwjzTq0t/q9tFB6jzGNVUzSnlI5ApycgCrHvtlTYq1p1xVQkuD0T78gZNgh3qJJJqe&#xA;uRZuxVpWjdnRZFaWMK0kYPxKGrxJHvxOHh2Rxbt4EuxVj+kaa+m/WAbiScTHiBIxYBEZhFQHfksX&#xA;FGavxca5VKdtwgx7zf8AmNY6D61rZWkus6vD6QextiFWJp3EcInmb4IzI7AKu7nstN8MMZkmUqZP&#xA;bflhr2rx182646W0g/eaNo3K1hoeqS3ZJuZRTrwMYPhmdDTRHN1uTWk/SznQvL+iaBpsemaLZRWF&#xA;hF9i3gUKtT1Y92Y92O5zJAcKUiTZR+KHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8v/ADd/&#xA;N6TyxanT/LyxXWtvJHDPPKC0FmJpFjBcL9uUmQcY67fabagaJLKNdWN/lj5m/MP8x9HmstVkB8sS&#xA;FRea4EFtd3CGvqWUYiCxHlsJJUVeK8kHx/EsbbAOHcjf8btebtEtz57OhG2DaXIkkqaNHwiguI3t&#xA;bAWsDVHFEEmjzdB9lSOmxqyGnJwC9/x1/W9L06O8jsYUvZElugv754l4R8jvRF3IUdBXenXKmaIZ&#xA;1UVJxJSBaGklL7dF8MrJtsjGlmBk7FXYqox2dtHeS3kcYW5njSKaQVBdIyxQMOh482offDa0panf&#xA;pYWMt28csojApHBG80jEkABUQFjufo6nbIllEWWKPrHnzUAWsdHg06Jvsyapc1loe/1e1WVfoMwO&#xA;VmupbQEHd6H5ilgefzH5r+qWCis0WmxJp8YHg1xK88wHurqcQR0CVTyd5e0nW9a0i28t2oTyfolz&#xA;+lL3UkDGK7vYgRbxxzPU3DLJ+9kl5N9lRyr0y9PjJPEXD1eYCPCOZe2ZmuqdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVQeszXEGj301t/vRFbyvDtX41Qldt++KC+S9espU0rUJlcskarcxQA&#xA;ftwuJ3dmNWd3ddyT+NTkCxhK5C+v6dnvX5G6pbXn5eWFvCqIdOMlm0cYCqPSchDQAbvGVc/62QDf&#xA;I2b70B+cVrLp13o/myBSf0fKFuuIqSsfKRT47wNcwKB1aYYJiw36eVGmTwXQkhSSGQPFIoaN1oQV&#xA;YVBB8CMxLLmmIcSSak1OBNOxV2KuxV2KtEgbnYYFQtzMrAIprvUnK5ybYRQV3d2tnay3d1KsFtAh&#xA;kmmkIVURRUsxPQAZABsSvyf5UvfPNtHrfmyAR+W5JDNo2gEEC5h5coLq+B3YMtGWH7Pdq7AbHDpw&#xA;Ny63U6o/TF6xDDFDEkMKLHDGoSONAFVVUUCqBsABmU69dirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdiriARQ7g9Rir5q8w6Q2l6xfaZKCVt5GjXkKFozujEf5SEHIuORRRP8Azjxrv6K17UvL&#xA;Fw1BKPUhqestqFjYnxaS2aF/kpys7FzCbF/jf9tvdfMOjxazot3psj+kbhKRTgAmKZSHhmUHblHI&#xA;quvuMKxNG3l/5b6xNAk3lbUFEF7phZbWHsIY24PApPX6tJ+7Xxj9N/2xmJkjRdpA8QtnOQS7FVOS&#xA;ZI/tdfAZEypkIkqRvF7KfpyPGy8NTa6lPSi/LImZZCASDVPOeg2N6NPe4e81Vvs6ZZRyXl2fnDAs&#xA;jqPdgBhjCUuSTIR5pRaD89tWuHFj5a0/SbFj+4u9XnYNxp1aC3Z5Rv2IGZMdJ3uNLWQDJtJ/KC7v&#xA;Zobrz5rJ8wGFxNFo8MK2umI60K84gWkuOLCq+q1P8nMjHgjFw8uslLYbPSwABQbAZe4jsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeTfnToggmtteRaRSD6vdkDo67xsfEstV+gYC1&#xA;ZB1eGXGq3Wj+YrPzHZqPWt5Y24nYc0qqA+0yO8DH/LB7ZCQbNPO9j+O/9fwfWnl7WrHWtHtNSsZP&#xA;VtbqJJoZOhKOKrUHcHxB6HIgthFbMC/NPyvNbXSebtNdbeaAq17Ma8YnQBI7pwu/pFP3N1/xVxfr&#xA;CuRnCw5GDLwmkd5a8y22s6f6/Bre5idoL20kpzgnj2kiem1R2I2YUI2OYZ2NF2FWLCYzXIXZNz49&#xA;shKfcyjDvSnWdZ0/SdPn1LUpxBaQDlJK1T1NAqgVLMxNFUbk7DIAEls5IXT28/axEGsPLT6YjA0u&#xA;NbnS3A32pBb/AFmYmlDRgnzzJjpJHm4s9ZAct00t/wAq7++WvmfzFdXiNu+n6YP0bakHqjMjSXbD&#xA;t/fivhmTDTRDiT1sjy2ZhoPlny/5fs/qeiafBp9uaF0gRULsP2pGHxO3+UxJy8CnFlInmmWFi7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu8w6Ja65ot3pV1/dXUZXlSpVhu&#xA;jj3VgDigiw+U9f0Oezur3RtSj4yxFoZ0/ip8CN1P05BxgTE+YZt+QXneSwvJfKWpSD43eSwY7D1S&#xA;DJLGOwEy1nT/ACvUHYZWdi5xIkLH4/s5fJ7+yxyxlWAeNxRlIqCCNwQckxeD+ftF1r8vdYj13Q4/&#xA;rGlSBYTaE0Wa3T7Nm7GtJoFJNpIftR1iO6xh6suMSDn6fP0R035k6XLpa3enhmlRkN9bzKRNbRsA&#xA;wLQL8cjS1CwiOokJqp41OYXhm6Ln8Yq0+/LHQ4vMHDX9aaSWbSZ2hsNJuGWT6vIUWVLq4K/BLcSQ&#xA;zLIhX4I1eiiu+Z2DCI79XW6rUE7Dk9UzJcF2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KvL/AM6PI/6QsP8AENjHW9skpeIvWSAftfOP/iPyGAtWSN7vnrVFlgeL&#xA;UrV2iu7UqwaMgSEIwdWjr/uyN1Dp7inRjkCFwZeE0eX4/BfQHkH86/LOp+XYZNYvI7bVYgEuLaNX&#xA;kaT4eXrwxRh5DC6/FWlF3UnbIA05XAen48md18v+afL9UeHU9F1KL4ZI2DxyIehVlOxUjYjdWHYj&#xA;JI3ifN896z5Hm8k+Yks755r3TZ51Xy27pbuPVnbgkSPPx9Is7hZkjki6+oAyc1iiQ5QnxD73vnkT&#xA;y3f6FofpapdJd6vduLjUZYVEcAlEUcCxwIAvGOKKFEXappU7nLoinEnKzsyLCwdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiriAQQRUHYg4q+Y/zm8hT+XNaF7aR&#xA;EaFekm2I3WKU7vCfDxT2+RwOFmhR8nnvl/XtR8p6/Bq+nMqcWK0f+7KykGSCUjpFMQDy/YejZXKL&#xA;lafNxDhP4/aPtD6M/K7zVpt3pfmLWoFTT9Nm1CS5NpM0aPa8LWFbhp1VisfOWN5eu4PP9rIA05E+&#xA;nXZg2hfmt/in85dJbUIOXlpZHtdEglBAW5dS0F+yd5GZDGisPgDg7NU5OI6liJjeI5/jZ9F5awdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqC1rRtO1rTL&#xA;jTNShE9ncrxljPzqCD2KkVB8cUEAii+WvzI/LbUvKGoNHIpudHuSRaXpX4WB/wB1ydg4H39R7BwZ&#xA;wMCwKQX1tBNbRSzfVLhFicQvxl9NG5rFIrEJPEGFeLbjtkDFy8WpsUf2fsLOPyD8mar5k89xatMH&#xA;bSdCnjuLy5eP0ozcRITb28Slnq4dxK57AD+ZcI3LbCAjGx8OvxfW+TQ7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhtS0zT9TsZbHULdLq0nXjLDIKqR&#xA;/UdQeoxQRbyTUf8AnGTyxc6obq31W8tbY7C3AjkeNSfjEUjCi1GwZkY/PBTCOMDbo9U8v+X9I8va&#xA;RbaRpFstrYWq8YolqepqzMx3ZmO7MdydzhAbSbTDFDsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdir/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:51efeb75-469c-5b4f-a984-f06f34f752f0</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:51efeb75-469c-5b4f-a984-f06f34f752f0</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:c03b5fb6-50fa-e643-afef-256248cef5db</stRef:instanceID>
            <stRef:documentID>xmp.did:c03b5fb6-50fa-e643-afef-256248cef5db</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5f298e5a-570d-8541-b819-53ea8da04c0f</stEvt:instanceID>
                  <stEvt:when>2018-12-17T19:21:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:51efeb75-469c-5b4f-a984-f06f34f752f0</stEvt:instanceID>
                  <stEvt:when>2018-12-17T19:58:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
.000106567 500 li
.000106567 -.000169119 li
500 -.000169119 li
500 500 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
390.163 145.197 mo
390.314 147.902 390.365 150.607 390.346 153.312 cv
390.327 158.469 390.052 163.611 389.713 168.754 cv
389.479 172.287 389.068 175.846 388.938 179.385 cv
388.932 179.652 388.919 179.919 388.912 180.186 cv
388.866 182.142 389.25 184.071 389.29 186.02 cv
389.323 188.041 388.677 189.82 389.061 191.802 cv
389.961 196.39 389.616 201.031 388.899 205.613 cv
388.228 209.941 388.84 214.165 389.147 218.525 cv
389.336 221.198 388.859 223.675 388.69 226.179 cv
388.508 228.824 388.879 231.588 388.045 234.006 cv
386.656 238.028 381.273 240.153 377.773 242.03 cv
375.485 243.262 373.073 243.953 370.609 244.363 cv
365.375 245.243 359.9 244.84 354.803 245.582 cv
351.537 246.052 351.505 247.46 348.898 249.284 cv
348.689 249.428 348.48 249.571 348.265 249.715 cv
345.579 251.494 342.634 252.804 339.655 253.971 cv
338.254 254.518 336.846 255.04 335.45 255.555 cv
333.234 256.376 330.719 257.555 328.736 258.781 cv
326.658 260.059 326.254 262.464 325.484 264.583 cv
324.78 266.538 323.686 268.356 323.021 270.338 cv
322.31 272.45 321.515 274.118 320.459 275.513 cv
319.247 277.117 317.702 278.361 315.571 279.502 cv
315.565 279.515 315.557 279.515 315.55 279.515 cv
315.148 279.73 314.717 279.945 314.267 280.161 cv
309.294 282.508 305.514 286.595 301.478 290.348 cv
299.87 291.841 298.493 293.431 297.106 294.976 cv
295.071 297.231 293.012 299.395 290.15 301.018 cv
287.086 302.759 283.925 303.977 280.712 304.962 cv
277.708 305.888 274.657 306.597 271.594 307.335 cv
269.267 307.888 266.933 308.462 264.607 309.139 cv
264.587 309.139 264.573 309.146 264.554 309.153 cv
263.681 309.414 262.801 309.687 261.927 309.981 cv
252.052 313.305 242.947 317.672 232.753 320.208 cv
230.289 320.82 227.844 321.831 225.42 322.45 cv
223.562 322.932 222.017 323.069 220.544 323.754 cv
219.827 324.079 219.123 324.536 218.406 325.226 cv
218.106 325.513 217.806 325.806 217.5 326.094 cv
215.44 328.068 213.367 330.037 211.282 331.992 cv
209.535 333.628 206.817 335.095 205.435 336.992 cv
205.494 337.076 205.559 337.168 205.611 337.259 cv
207.932 340.733 209.711 345.96 206.36 349.415 cv
204.868 350.953 203.134 352.166 201.674 353.814 cv
200.507 355.132 200.521 355.04 200.455 356.578 cv
200.39 357.96 200.833 358.52 199.966 359.765 cv
199.478 360.463 198.728 361.154 197.959 361.845 cv
197.652 362.125 197.346 362.406 197.046 362.685 cv
196.63 363.077 196.232 363.481 195.912 363.879 cv
195.984 363.787 196.988 366.74 197.836 369.392 cv
198.428 371.244 198.943 372.951 199.008 373.369 cv
199.393 375.8 199.334 378.4 198.506 380.727 cv
198.343 381.164 198.161 381.588 197.959 381.992 cv
197.881 382.142 197.802 382.292 197.718 382.435 cv
197.555 382.722 197.379 383.002 197.19 383.263 cv
194.641 386.822 191.623 390.258 188.475 393.405 cv
183.45 398.425 178.255 398.405 172.46 394.194 cv
162.025 386.62 153.206 377.176 145.456 366.955 cv
144.322 365.456 143.207 363.944 142.112 362.412 cv
136.324 354.297 130.777 346.025 125.693 337.441 cv
123.588 333.889 121.73 330.2 120.022 326.445 cv
117.382 320.651 115.101 314.693 112.82 308.807 cv
110.552 302.961 108.987 296.951 108.421 290.876 cv
107.749 283.707 112.918 280.878 117.715 276.576 cv
118.302 276.048 118.915 275.429 119.56 274.79 cv
122.2 272.156 125.25 269.172 128.418 271.035 cv
130.243 272.11 131.683 273.695 133.476 274.718 cv
134.075 274.098 134.662 273.472 135.249 272.847 cv
137.927 269.986 140.528 267.085 143.448 264.445 cv
147.503 260.757 151.198 263.826 154.536 266.772 cv
154.633 266.668 154.731 266.564 154.822 266.453 cv
155.644 265.548 156.42 264.589 157.188 263.611 cv
157.201 263.598 157.208 263.592 157.214 263.579 cv
158.394 262.054 159.548 260.47 160.728 258.925 cv
160.819 258.801 160.917 258.678 161.014 258.554 cv
161.595 257.784 162.188 257.034 162.8 256.298 cv
162.879 256.207 162.951 256.115 163.028 256.024 cv
163.674 255.242 164.313 254.447 164.939 253.645 cv
164.971 253.606 165.004 253.56 165.03 253.521 cv
167.089 250.882 169.019 248.15 170.87 245.419 cv
173.659 241.294 176.951 237.448 180.002 233.55 cv
182.068 230.91 184.238 228.427 186.448 225.996 cv
188.475 223.772 190.548 221.583 192.627 219.341 cv
195.299 216.46 197.907 213.37 200.462 210.319 cv
201.081 209.577 201.7 208.84 202.319 208.103 cv
205.416 204.414 208.446 200.882 210.806 196.717 cv
213.081 192.688 215.662 189.233 219.423 186.464 cv
219.612 186.32 219.808 186.183 220.003 186.047 cv
224.116 183.198 229.037 182.423 233.573 180.395 cv
234.004 180.2 234.427 180.004 234.838 179.789 cv
236.735 178.857 238.403 177.795 240.04 176.615 cv
241.617 175.473 243.155 174.242 244.811 172.899 cv
248.07 170.272 251.4 167.835 254.822 165.58 cv
255.234 165.319 255.637 165.052 256.048 164.791 cv
257.541 163.833 261.588 163.051 263.107 161.695 cv
263.302 161.532 263.453 161.356 263.55 161.167 cv
264.066 160.209 263.713 158.194 263.713 157.093 cv
263.713 156.056 263.719 155.02 263.707 153.984 cv
263.7 152.296 263.668 150.614 263.55 148.945 cv
263.492 148.163 263.433 147.374 263.381 146.586 cv
263.048 142.121 262.729 137.61 262.899 132.976 cv
263.087 127.651 262.892 122.371 262.899 117.007 cv
262.904 114.393 262.142 112.627 264.163 110.612 cv
265.89 108.886 268.341 108.474 270.557 107.843 cv
275.759 106.349 281.273 106.108 286.69 105.927 cv
292.099 105.744 297.255 105.248 302.659 105.072 cv
307.11 104.935 311.483 104.486 315.903 104.16 cv
326.69 103.364 337.921 102.869 348.774 103.645 cv
354.066 104.023 359.13 104.597 364.293 104.909 cv
369.65 105.242 374.657 106.193 379.898 106.578 cv
383.483 106.839 386.872 106.885 388.997 108.638 cv
390.085 109.537 390.847 110.88 391.141 112.933 cv
391.845 117.887 389.779 122.984 390.424 128.003 cv
391.154 133.66 389.843 139.449 390.163 145.197 cv
cp
.00308232 .00985733 .0358282 0 cmyk
f
385.751 179.331 mo
385.649 185.304 385.481 191.283 385.275 197.179 cv
385.045 203.719 385.039 210.468 385.275 217.168 cv
385.412 221.065 387.656 226.116 384.537 228.859 cv
381.921 231.159 377.452 231.415 374.194 231.991 cv
366.038 233.432 357.848 235.284 349.479 235.853 cv
339.44 236.537 329.248 236.768 319.176 236.769 cv
309.534 236.77 300.446 234.823 291.415 231.453 cv
286.379 229.575 280.894 227.724 276.812 224.086 cv
272.643 220.37 270.488 213.38 269.476 208.037 cv
267.826 199.317 268.738 190.398 268.968 181.6 cv
269.209 172.369 266.97 163.194 268.2 153.976 cv
273.986 155.43 283.719 155.392 289.245 153.13 cv
290.613 152.569 291.604 151.377 292.986 150.946 cv
296.167 149.963 300.221 151.116 303.362 151.338 cv
310.317 151.82 315.832 146.937 322.486 149.323 cv
325.484 150.399 328.15 152.707 331.227 153.502 cv
336.176 154.782 341.79 153.85 346.766 153.51 cv
353.103 153.074 359.629 153.547 365.982 153.556 cv
369.324 153.561 372.656 153.796 375.965 153.482 cv
379.199 153.177 382.421 152.574 385.672 153.546 cv
385.901 161.94 385.898 170.628 385.751 179.331 cv
cp
0 .708186 1 0 cmyk
f
354.425 223.916 mo
340.548 226.236 326.97 228.127 313.14 231.68 cv
300.599 234.899 286.109 235.825 274.546 242.167 cv
280.556 241.534 285.998 244.741 291.851 245.367 cv
297.633 245.986 303.812 245.608 309.666 246.28 cv
316.737 247.088 323.445 247.46 330.738 246.671 cv
336.943 245.993 345.768 244.696 351.948 246.28 cv
349.907 247.818 347.94 249.2 345.931 250.465 cv
343.931 251.728 341.878 252.883 339.655 253.971 cv
339.296 254.146 338.932 254.323 338.56 254.493 cv
331.814 257.628 327.388 257.823 325.537 265.625 cv
324.631 269.471 322.929 272.795 320.459 275.513 cv
319.077 277.045 317.447 278.382 315.571 279.502 cv
315.565 279.515 315.557 279.515 315.55 279.515 cv
315.336 279.652 315.114 279.782 314.886 279.906 cv
309.6 282.846 305.278 286.43 301.14 290.994 cv
299.856 292.415 298.513 293.744 297.106 294.976 cv
293.885 297.805 290.333 300.138 286.409 301.905 cv
284.441 302.785 282.622 303.997 280.712 304.962 cv
279.884 305.379 279.037 305.751 278.157 306.024 cv
276.026 306.689 273.803 306.97 271.594 307.335 cv
270.589 307.504 269.592 307.692 268.602 307.94 cv
267.272 308.273 265.936 308.683 264.607 309.139 cv
264.587 309.139 264.573 309.146 264.554 309.153 cv
259.633 310.828 254.718 313.116 249.914 314.72 cv
244.452 316.544 239.023 318.48 233.573 320.357 cv
230.295 321.492 224.442 324.549 220.544 323.754 cv
220.199 323.681 219.866 323.584 219.553 323.447 cv
218.895 324.366 218.211 325.246 217.5 326.094 cv
213.994 330.278 209.855 333.72 205.611 337.259 cv
205.559 337.305 205.507 337.344 205.455 337.389 cv
205.031 337.741 198.089 344.592 198.8 344.762 cv
195.704 344.017 191.871 342.337 189.082 340.576 cv
179.78 334.711 172.401 323.532 166.249 314.569 cv
162.905 309.707 160.33 304.401 158.042 298.932 cv
156.035 294.148 153.864 290.127 152.45 285.192 cv
151.387 281.477 148.037 276.328 150.194 272.411 cv
151.237 270.527 153.349 268.754 154.816 266.948 cv
155.05 266.668 155.266 266.382 155.461 266.095 cv
156.022 265.261 156.602 264.432 157.188 263.611 cv
157.201 263.598 157.208 263.592 157.214 263.579 cv
158.342 262.014 159.522 260.463 160.728 258.925 cv
160.819 258.801 160.917 258.678 161.014 258.554 cv
161.673 257.706 162.351 256.858 163.028 256.024 cv
163.674 255.242 164.313 254.447 164.939 253.645 cv
164.971 253.606 165.004 253.56 165.03 253.521 cv
166.223 252.055 167.396 250.595 168.543 249.141 cv
173.712 242.584 178.652 235.857 183.815 229.294 cv
184.688 228.185 185.562 227.084 186.448 225.996 cv
189.616 222.092 192.881 218.298 196.264 214.556 cv
197.548 213.129 198.995 211.734 200.462 210.319 cv
203.505 207.374 206.648 204.348 208.635 200.875 cv
210.135 198.255 211.308 195.973 213.146 193.444 cv
215.134 190.714 217.103 188.392 219.423 186.464 cv
221.365 184.827 223.549 183.465 226.182 182.35 cv
228.855 181.216 231.911 180.44 234.838 179.789 cv
235.157 179.718 235.477 179.645 235.796 179.58 cv
239.505 178.785 240.183 177.117 243.175 174.744 cv
246.832 171.844 250.795 168.317 254.822 165.58 cv
255.846 164.882 256.876 164.237 257.905 163.664 cv
259.607 162.719 261.243 161.897 263.087 161.479 cv
263.094 161.552 263.101 161.623 263.107 161.695 cv
263.439 165.208 263.414 168.806 263.374 172.326 cv
263.368 172.463 277.577 166.785 278.665 166.407 cv
283.15 164.83 287.752 164.152 292.504 164.152 cv
303.597 164.152 314.639 162.959 325.706 162.347 cv
328.959 162.171 332.414 161.649 335.744 161.421 cv
336.95 161.336 338.136 161.291 339.296 161.317 cv
344.309 161.428 349.126 164.445 354.203 164.804 cv
361.848 165.351 366.946 167.464 367.35 175.996 cv
367.533 179.9 364.665 186.606 360.962 188.236 cv
354.216 191.222 345.671 188.392 338.56 189.351 cv
331.448 190.309 324.442 190.993 317.05 191.528 cv
309.677 192.062 303.298 192.193 296.629 195.393 cv
290.724 198.228 283.698 199.408 277.343 201.357 cv
273.458 202.544 269.085 203.834 265.16 204.597 cv
265.147 206.546 264.932 208.52 264.723 210.397 cv
267.409 211.05 272.754 209.707 275.361 208.873 cv
283.248 206.356 290.92 205.522 299.034 204.004 cv
308.362 202.264 317.8 201.123 327.265 200.438 cv
340.841 199.461 355.051 196.749 368.765 197.166 cv
375.733 197.381 380.862 201.09 381.364 208.26 cv
382.231 220.683 362.872 222.502 354.425 223.916 cv
cp
.00360113 .197391 .216831 0 cmyk
f
198.506 380.727 mo
198.343 381.164 198.161 381.588 197.959 381.992 cv
197.881 382.142 197.802 382.292 197.718 382.435 cv
197.555 382.722 197.379 383.002 197.19 383.263 cv
194.641 386.822 191.623 390.258 188.475 393.405 cv
183.45 398.425 178.255 398.405 172.46 394.194 cv
162.025 386.62 153.206 377.176 145.456 366.955 cv
144.322 365.456 143.207 363.944 142.112 362.412 cv
136.324 354.297 130.777 346.025 125.693 337.441 cv
123.588 333.889 121.73 330.2 120.022 326.445 cv
117.382 320.651 115.101 314.693 112.82 308.807 cv
110.552 302.961 108.987 296.951 108.421 290.876 cv
107.749 283.707 112.918 280.878 117.715 276.576 cv
118.302 276.048 118.915 275.429 119.56 274.79 cv
122.2 272.156 125.25 269.172 128.418 271.035 cv
130.243 272.11 131.683 273.695 133.476 274.718 cv
134.075 274.098 134.662 273.472 135.249 272.847 cv
135.138 273.016 135.021 273.186 134.903 273.349 cv
132.387 276.804 126.15 279.724 126.182 284.521 cv
126.214 288.764 128.457 292.708 129.702 296.664 cv
131.005 300.829 132.831 304.832 134.401 308.892 cv
140.671 325.083 149.028 340.655 159.672 355.001 cv
163.329 359.935 167.285 364.641 171.515 369.093 cv
174.853 372.606 178.887 376.583 183.221 378.844 cv
186.898 373.486 191.141 368.2 195.541 363.429 cv
195.456 363.526 195.43 363.683 195.45 363.898 cv
195.528 365 196.831 367.476 197.836 369.392 cv
198.402 370.481 198.872 371.388 198.969 371.759 cv
199.66 374.464 199.549 377.887 198.506 380.727 cv
cp
.650477 .405951 .57644 .166751 cmyk
f
341.277 233.028 mo
350.622 233.028 364.708 234.392 372.979 229.524 cv
376.662 227.357 384.26 223.455 388.484 223.952 cv
388.522 226.755 389.2 229.727 388.533 232.377 cv
386.661 239.828 373.922 243.298 367.603 244.688 cv
354.869 247.491 342.08 246.066 329.22 246.064 cv
318.639 246.063 307.586 246.403 297.614 246.056 cv
290.733 245.818 282.473 243.936 275.804 242.091 cv
279.157 238.863 287.401 238.525 291.812 237.337 cv
308.264 232.902 324.423 233.028 341.277 233.028 cv
cp
.00308232 .00985733 .0358282 0 cmyk
f
380.278 204.566 mo
381.352 210.87 367.55 210.988 363.597 212.002 cv
360.992 212.668 357.628 215.121 354.804 214.18 cv
351.882 213.205 351.051 207.784 349.638 212.393 cv
349.264 213.613 350.206 214.493 349.04 215.787 cv
348.543 214.824 348.413 213.681 347.91 212.796 cv
345.072 215.96 344.964 216.546 340.519 217.169 cv
337.161 217.639 333.977 218.536 330.523 218.906 cv
326.879 219.298 323.393 219.881 319.878 220.639 cv
316.425 221.382 312.698 223.147 309.447 221.514 cv
307.495 220.532 304.559 215.446 303.359 216.076 cv
301.603 216.997 302.082 223.551 300.264 225.559 cv
299.814 224.557 300.137 221.082 299.181 220.472 cv
297.368 219.311 297.911 223.293 297.667 224.121 cv
296.272 228.852 293.864 225.247 290.546 225.376 cv
284.074 225.627 276.205 230.092 270.557 233.186 cv
267.842 234.674 263.927 236.253 263.382 239.552 cv
262.897 242.488 264.406 246.371 267.298 247.367 cv
270.358 248.422 274.648 247.264 277.522 246.728 cv
281.406 246.005 283.899 245.84 287.309 243.836 cv
283.792 241.544 279.095 243.634 275.36 241.449 cv
275.519 241.542 283.107 238.552 284.005 238.3 cv
289.083 236.875 294.449 236.655 299.406 235.2 cv
306.371 233.157 313.375 231.244 320.529 229.781 cv
335.228 226.777 350.112 225.43 364.639 222.171 cv
373.777 220.121 384.694 216.825 380.278 205.218 cv
380.278 204.566 li
cp
.00848402 .276371 .328954 0 cmyk
f
300.758 246.064 mo
303.877 246.804 314.525 251.362 309.718 256.281 cv
306.392 259.687 306.446 253.337 304.233 252.632 cv
301.743 251.839 302.624 257.821 302.012 259.508 cv
301.028 258.55 300.482 257.084 299.074 256.525 cv
297.592 258.661 298.915 262.427 296.906 264.809 cv
294.402 267.783 288.959 266.73 285.546 268.17 cv
281.746 269.772 278.442 271.569 277.22 275.819 cv
275.671 281.208 277.188 287.534 272.61 291.748 cv
268.505 295.527 262.353 296.146 257.233 297.727 cv
247.016 300.881 236.168 304.476 225.577 305.982 cv
222.118 306.474 218.173 306.216 214.932 307.498 cv
211.205 308.971 208.657 312.413 205.609 314.862 cv
202.536 317.331 199.005 319.261 195.823 321.614 cv
192.708 323.918 191.423 326.906 187.084 326.466 cv
183.587 326.111 180.353 323.631 177.763 321.45 cv
172.141 316.713 167.393 310.66 163.388 304.514 cv
162.188 302.674 161.171 299.306 158.592 299.351 cv
158.969 303.631 162.768 309.3 165.132 312.882 cv
168.42 317.863 172.959 322.04 176.643 326.725 cv
179.239 330.027 193.458 348.158 198.805 343.563 cv
202.753 340.172 206.872 336.978 210.713 333.463 cv
213.621 330.804 215.044 327.285 218.535 325.259 cv
222.93 322.709 228.024 321.554 232.842 320.183 cv
238.405 318.601 243.806 316.35 249.265 314.45 cv
256.856 311.808 264.504 309.104 272.079 306.405 cv
278.688 304.05 286.621 303.534 292.437 299.31 cv
296.106 296.648 298.533 292.776 301.785 289.681 cv
306.444 285.248 312.535 282.595 317.645 278.812 cv
323.092 274.781 324.344 268.776 326.13 262.746 cv
327.779 257.176 336 256.057 340.898 253.186 cv
344.782 250.91 347.889 247.964 351.522 245.62 cv
344.461 245.649 337.58 247.395 330.305 246.933 cv
324.276 246.552 317.954 246.986 311.915 247.242 cv
309.143 247.359 306.561 246.38 303.799 246.499 cv
300.758 246.064 li
cp
f
264.256 210.649 mo
260.246 211.469 243.636 218.816 242.108 211.715 cv
241.183 207.42 251.915 201.375 255.24 200.357 cv
263.109 197.948 270.691 194.737 278.572 192.4 cv
283.985 190.796 284.012 187.272 284.245 182.187 cv
284.681 172.685 287.387 185.814 288.591 187.375 cv
290.294 186.118 288.588 175.859 292.497 180.675 cv
295.2 184.004 295.152 187.575 300.369 186.173 cv
305.348 184.835 310.035 183.576 315.314 183.056 cv
318.869 182.706 322.398 182.435 325.96 182.187 cv
328.816 181.987 331.808 182.33 332.961 178.927 cv
333.628 176.96 332.346 174.38 334.607 173.313 cv
335.877 175.34 336.093 177.894 337.096 179.981 cv
338.562 178.816 338.234 172.334 340.039 172.889 cv
340.855 173.14 341.252 176.229 341.821 176.972 cv
343.656 179.362 347.456 180.475 350.3 180.662 cv
359.901 181.289 363.288 174.841 359.719 166.529 cv
359.695 166.474 363.452 167.474 363.983 167.919 cv
365.237 168.966 365.719 170.474 366.291 171.933 cv
367.966 176.21 366.508 178.057 365.238 182.188 cv
364.182 185.628 363.907 188.134 360.023 189.309 cv
353.303 191.343 345.599 189.105 338.562 189.357 cv
331.506 189.61 324.512 190.38 317.487 191.143 cv
310.384 191.917 303.826 191.728 297.547 195.283 cv
290.92 199.036 285.028 199.098 277.722 200.438 cv
274.627 201.006 271.526 201.929 268.608 203.099 cv
264.745 204.649 263.982 205.185 264.462 209.357 cv
264.517 209.832 264.687 210.295 264.691 210.867 cv
264.256 210.649 li
cp
f
333.654 161.879 mo
333.728 162.632 329.386 165.494 329.22 165.566 cv
324.435 167.659 319.599 168.369 314.573 169.497 cv
309.606 170.605 304.53 172.75 299.308 173.46 cv
294.232 174.151 288.494 173.062 283.593 174.692 cv
278.913 176.25 274.852 179.659 270.232 181.777 cv
261.24 185.899 251.592 188.988 242.492 192.791 cv
236.732 195.197 229.439 198.685 228.802 205.735 cv
228.024 214.354 237.25 220.132 238.896 228.174 cv
242.056 243.603 217.858 251.328 208.31 258.377 cv
200.964 263.8 194.127 270.553 186.624 275.604 cv
178.346 281.178 162.853 293.268 156.817 278.022 cv
155.37 274.359 154.757 270.651 154.816 266.948 cv
154.816 266.786 154.822 266.616 154.822 266.453 cv
155.644 265.548 156.42 264.589 157.188 263.611 cv
157.201 263.598 157.208 263.592 157.214 263.579 cv
158.342 262.014 159.522 260.463 160.728 258.925 cv
160.819 258.801 160.917 258.678 161.014 258.554 cv
161.595 257.784 162.188 257.034 162.8 256.298 cv
162.879 256.207 162.951 256.115 163.028 256.024 cv
163.674 255.242 164.313 254.447 164.939 253.645 cv
164.971 253.606 165.004 253.56 165.03 253.521 cv
167.089 250.882 169.019 248.15 170.87 245.419 cv
173.659 241.294 176.951 237.448 180.002 233.55 cv
182.068 230.91 184.238 228.427 186.448 225.996 cv
189.616 222.092 192.881 218.298 196.264 214.556 cv
197.548 213.129 198.995 211.734 200.462 210.319 cv
201.081 209.577 201.7 208.84 202.319 208.103 cv
205.416 204.414 208.446 200.882 210.806 196.717 cv
213.081 192.688 215.662 189.233 219.423 186.464 cv
221.365 184.827 223.549 183.465 226.182 182.35 cv
228.855 181.216 231.911 180.44 234.838 179.789 cv
236.735 178.857 238.403 177.795 240.04 176.615 cv
241.617 175.473 243.155 174.242 244.811 172.899 cv
248.07 170.272 251.4 167.835 254.823 165.579 cv
257.227 163.942 259.717 162.115 262.688 161.707 cv
262.706 165.129 262.54 168.648 262.785 172.035 cv
272.067 171.191 280.67 164.314 290.438 163.611 cv
297.611 163.095 304.81 163.254 311.987 162.823 cv
319.169 162.392 326.178 160.883 333.402 161.705 cv
333.567 161.723 333.645 161.785 333.654 161.879 cv
cp
.00155642 .134737 .141634 0 cmyk
f
254.588 215.103 mo
264.384 212.03 274.845 209.288 285.223 208.912 cv
289.126 208.77 297.429 209.977 294.267 215.347 cv
291.639 219.808 282.283 219.66 278.036 220.309 cv
271.889 221.25 265.689 222.454 259.73 223.831 cv
257.087 224.442 254.127 225.76 252.063 223.568 cv
249.904 221.277 251.301 217.501 253.61 215.756 cv
254.588 215.103 li
cp
f
309.991 207.282 mo
314.532 205.39 321.134 205.183 326.358 204.668 cv
330.875 204.221 338.082 204.641 331.5 209.308 cv
327.366 212.24 319.825 212.502 314.879 212.497 cv
311.416 212.493 300.624 209.86 309.666 207.282 cv
309.991 207.282 li
cp
f
351.706 201.416 mo
352.482 202.217 355.477 207.455 351.725 207.552 cv
349.172 207.617 348.215 203.229 350.729 202.393 cv
351.706 201.416 li
cp
f
255.566 266.923 mo
251.085 263.523 254.445 256.595 259.866 259.672 cv
265.655 262.958 264.163 273.194 257.195 268.226 cv
255.566 266.923 li
cp
f
149.321 271.811 mo
148.973 269.746 149.41 267.794 149.704 265.661 cv
150.961 266.383 152.235 267.624 153.272 268.87 cv
152.029 270.136 150.484 271.302 149.321 272.789 cv
149.321 271.811 li
cp
.087129 .0308843 .156435 0 cmyk
f
197.881 344.813 mo
199.744 343.156 201.463 340.661 203.691 339.64 cv
204.729 344.964 203.154 348.681 197.555 345.139 cv
197.881 344.813 li
cp
f
192.014 346.442 mo
196.178 348.052 200.784 349.525 205.343 350.093 cv
203.883 352.076 201.68 353.959 199.836 355.527 cv
197.325 352.616 194.823 349.968 192.666 346.768 cv
192.014 346.442 li
cp
f
126.182 283.869 mo
126.665 282.621 127.446 281.479 128.4 280.642 cv
134.44 299.372 141.787 317.449 152.826 334.783 cv
155.861 339.55 158.388 344.465 161.714 349.057 cv
163.053 350.906 164.276 353.362 166.023 354.836 cv
168.143 356.624 169.564 356.14 171.799 357.207 cv
176.71 359.549 175.537 366.481 180.608 367.301 cv
184.34 367.903 190.157 363.881 193.082 361.849 cv
194.21 361.065 195.454 359.263 196.776 358.868 cv
197.488 358.655 201.005 359.325 201.108 359.233 cv
200.106 360.138 181.686 378.063 183.792 379.317 cv
180.073 377.148 175.658 373.907 172.634 370.854 cv
169.598 367.789 167.266 363.857 164.719 360.386 cv
159.254 352.934 153.735 345.621 148.75 337.906 cv
143.085 329.138 139.671 320.805 135.388 311.499 cv
133.359 307.089 131.736 303.06 130.745 298.543 cv
129.748 294.004 127.252 289.507 126.834 284.847 cv
126.182 283.869 li
cp
f
275.989 241.284 mo
280.398 238.394 288.368 237.879 293.782 236.481 cv
300.016 234.871 305.817 232.825 312.491 232.594 cv
319.62 232.347 326.541 233.049 333.783 233.028 cv
337.424 233.018 340.139 233.498 343.776 233.463 cv
346.359 233.438 352.225 231.597 349.968 235.743 cv
348.305 238.8 344.217 237.26 342.015 238.653 cv
339.6 240.183 339.609 242.89 336.412 244.339 cv
331.304 246.654 320.745 245.211 315.099 245.195 cv
308.504 245.178 302.132 245.893 295.556 245.055 cv
289.486 244.279 283.517 242.3 277.293 242.588 cv
275.989 241.284 li
cp
f
390.163 145.197 mo
390.314 147.902 390.365 150.607 390.346 153.312 cv
390.327 158.469 390.052 163.611 389.713 168.754 cv
389.479 172.287 389.068 175.846 388.938 179.385 cv
388.932 179.652 388.919 179.919 388.912 180.186 cv
388.866 182.142 389.25 184.071 389.29 186.02 cv
389.323 188.041 388.677 189.82 389.061 191.802 cv
389.961 196.39 389.616 201.031 388.899 205.613 cv
388.228 209.941 388.84 214.165 389.147 218.525 cv
389.336 221.198 388.859 223.675 388.69 226.179 cv
388.508 228.824 388.879 231.588 388.045 234.006 cv
386.656 238.028 381.273 240.153 377.773 242.03 cv
375.485 243.262 373.073 243.953 370.609 244.363 cv
369.82 240.811 370.375 235.128 370.283 233.01 cv
370.062 227.749 373.464 227.208 378.503 225.604 cv
384.284 223.76 385.516 222.391 385.275 215.756 cv
385.085 210.522 385.092 205.118 385.275 199.786 cv
385.64 189.116 386.2 178.355 386.578 167.847 cv
386.962 157.145 385.796 146.795 386.253 136.235 cv
386.487 130.805 386.494 125.631 386.253 120.265 cv
386.109 116.955 383.528 106.546 388.997 108.638 cv
390.085 109.537 390.847 110.88 391.141 112.933 cv
391.845 117.887 389.779 122.984 390.424 128.003 cv
391.154 133.66 389.843 139.449 390.163 145.197 cv
cp
f
371.26 111.793 mo
371.26 119.402 371.26 127.013 371.26 134.623 cv
371.26 138.332 369.277 147.511 370.928 150.583 cv
373.569 155.5 372.965 140.569 372.89 138.516 cv
372.7 133.191 373.095 127.648 373.47 122.474 cv
373.666 119.759 375.448 112.409 372.89 111.467 cv
371.26 111.793 li
cp
f
297.933 109.512 mo
295.167 115.984 295.652 123.411 295.652 130.687 cv
295.652 135.112 293.156 151.689 299.513 149.874 cv
300.916 136.895 298.653 122.548 298.585 109.512 cv
297.933 109.512 li
cp
f
268.603 169.151 mo
268.603 165.755 269.792 143.027 265.444 145.134 cv
261.935 146.835 264.283 167.611 264.237 171.606 cv
264.599 170.905 264.966 171.083 265.561 170.889 cv
268.603 169.151 li
cp
f
264.258 205.218 mo
264.505 206.734 264.696 209.498 265.106 211.245 cv
266.23 211.185 268.37 210.553 269.407 209.912 cv
269.043 208.208 268.784 206.314 268.538 204.393 cv
267.425 204.873 265.678 205.35 264.692 206.087 cv
264.258 205.218 li
cp
f
263.823 123.524 mo
263.823 128.073 263.331 133.123 264.334 137.374 cv
268.688 135.107 267.837 125.247 265.236 121.853 cv
264.547 122.626 264.514 123.448 264.258 124.393 cv
263.823 123.524 li
cp
f
198.506 380.727 mo
198.343 381.164 198.161 381.588 197.959 381.992 cv
197.881 382.142 197.802 382.292 197.718 382.435 cv
197.555 382.722 197.379 383.002 197.19 383.263 cv
194.641 386.822 191.623 390.258 188.475 393.405 cv
183.45 398.425 178.255 398.405 172.46 394.194 cv
162.025 386.62 153.206 377.176 145.456 366.955 cv
146.655 363.67 148.285 360.567 150.383 358.586 cv
154.829 354.375 156.589 359.231 159.503 362.646 cv
164.808 368.872 170.277 374.542 176.56 379.803 cv
178.32 381.275 186.077 387.917 188.338 383.59 cv
189.681 380.989 185.32 379.267 183.58 378.636 cv
187.752 373.851 191.376 368.761 195.45 363.898 cv
195.495 363.84 195.547 363.774 195.599 363.716 cv
197.046 362.685 li
196.63 363.077 196.232 363.481 195.912 363.879 cv
195.984 363.787 196.988 366.74 197.836 369.392 cv
198.402 370.481 198.872 371.388 198.969 371.759 cv
199.66 374.464 199.549 377.887 198.506 380.727 cv
cp
.751583 .429206 .654383 .280278 cmyk
f
125.856 281.262 mo
124.926 277.751 127.183 271.175 131.021 276.437 cv
129.942 278.174 126.965 282.034 126.508 281.262 cv
125.856 281.262 li
cp
f
129.695 314.432 mo
128.776 318.741 123.946 323.85 120.022 326.445 cv
117.382 320.651 115.101 314.693 112.82 308.807 cv
110.552 302.961 108.987 296.951 108.421 290.876 cv
107.749 283.707 112.918 280.878 117.715 276.576 cv
118.302 276.048 118.915 275.429 119.56 274.79 cv
123.9 272.137 li
118.843 277.781 123.999 295.862 126.175 302.126 cv
127.596 306.246 130.627 310.033 129.695 314.432 cv
cp
.557061 .357702 .475074 .0605783 cmyk
f
132.7 274.093 mo
128.792 269.426 126.338 273.728 131.966 276.651 cv
132.47 276.191 133.027 275.635 133.352 275.07 cv
132.7 274.093 li
cp
f
155.782 354.222 mo
156.589 349.271 151.345 343.973 149.076 339.844 cv
147.047 336.149 144.914 329.935 141.235 327.911 cv
140.961 327.76 142.388 334.138 142.575 334.572 cv
144.197 338.329 146.505 341.952 148.311 345.621 cv
148.762 346.539 155.658 354.991 155.782 354.222 cv
cp
f
134.33 319.067 mo
135.454 320.872 136.475 323.321 138.574 324.468 cv
139.108 321.682 137.089 316.963 134.411 315.531 cv
133.062 317.462 134.015 319.698 134.982 321.674 cv
134.33 319.067 li
cp
f
268.927 154.486 mo
273.496 155.154 278.497 154.651 283.233 154.877 cv
280.559 154.749 279.304 163.437 279.185 165.054 cv
275.007 164.884 273.391 169.156 269.417 169.589 cv
267.922 165.038 269.098 159.846 267.95 155.138 cv
268.927 154.486 li
cp
.146303 .745693 1 .0374456 cmyk
f
379.734 153.508 mo
378.994 158.065 374.549 171.517 367.433 166.594 cv
365.313 170.645 373.331 170.538 375.515 171.668 cv
379.622 173.793 380.432 176.843 380.785 181.139 cv
381.238 186.663 383 194.228 378.064 198.149 cv
380.579 203.166 383.055 209.897 379.488 214.843 cv
377.248 217.948 371.892 218.374 370.068 220.596 cv
368.906 222.012 368.203 228.398 371.269 229.198 cv
372.741 229.582 377.691 226.887 379.161 226.264 cv
386.294 223.249 385.466 216.416 385.788 209.908 cv
386.263 200.341 384.929 190.794 385.275 181.21 cv
385.573 172.972 388.152 161.893 385.927 154.16 cv
379.734 153.508 li
cp
f
287.121 198.865 mo
288.028 198.748 286.988 202.812 286.748 203.287 cv
285.797 205.16 283.497 206.259 281.675 207.032 cv
279.306 208.038 271.111 210.597 269.182 208.331 cv
263.986 202.22 283.767 199.298 287.121 198.865 cv
cp
f
302.495 193.595 mo
305.751 192.448 311.489 191.735 314.863 191.622 cv
320.57 191.43 318.596 194.888 320.713 199.377 cv
314.926 201.291 307.937 201.024 301.844 201.669 cv
298.387 202.035 296.406 203.603 296.613 198.792 cv
296.759 195.355 298.852 194.541 301.844 193.268 cv
302.495 193.595 li
cp
.0875257 .705745 1 .00762951 cmyk
f
318.138 231.399 mo
326.548 228.533 335.432 227.06 344.191 225.713 cv
351.014 224.664 358.341 222.64 365.279 222.901 cv
362.418 225.837 358.5 225.737 355.302 227.57 cv
352.566 229.137 350.819 231.568 347.713 232.467 cv
344.757 233.322 341.046 232.702 338.019 232.702 cv
330.211 232.702 322.533 232.535 314.905 231.977 cv
315.42 231.689 316.212 231.055 316.836 230.747 cv
318.138 231.399 li
cp
.146303 .745693 1 .0374456 cmyk
f
363.765 153.834 mo
364.987 157.75 364.895 163.105 366.689 166.592 cv
368.75 163.814 369.828 152.219 364.09 153.182 cv
363.765 153.834 li
cp
.0875257 .705745 1 .00762951 cmyk
f
368.545 233.463 mo
362.939 232.305 359.256 241.972 363.78 244.65 cv
369.619 248.108 371.236 237.496 368.981 234.332 cv
368.545 233.463 li
cp
0 0 0 0 cmyk
f
354.641 237.808 mo
349.555 241.723 357.403 243.728 359.527 239.653 cv
362.594 233.773 354.119 236.135 352.033 239.547 cv
354.641 237.808 li
cp
f
291.615 151.98 mo
289.265 153.368 284.314 158.273 284.428 161.228 cv
284.611 166.006 292.479 163.042 296.098 163.037 cv
306.015 163.024 315.27 161.57 325.085 161.842 cv
329.989 161.977 334.254 161.73 339.13 161.543 cv
344.543 161.336 347.415 163.441 352.279 164.457 cv
356.721 165.385 361.343 159.434 359.085 155.335 cv
357.154 151.828 348.969 152.967 345.705 152.877 cv
341.021 152.747 336.358 152.44 331.66 152.279 cv
326.85 152.113 323.966 149.73 319.706 149.291 cv
315.466 148.852 311.223 151.986 306.856 151.996 cv
301.923 152.006 298.176 150.229 293.109 150.785 cv
291.615 151.98 li
cp
0 .537499 .922454 0 cmyk
f
320.603 191.128 mo
317.487 195.342 319.975 200.378 324.786 200.691 cv
329.823 201.018 334.421 199.135 339.13 198.292 cv
343.048 197.592 350.008 198.998 353.25 196.88 cv
358.386 193.521 354.978 189.226 350.42 188.804 cv
345.39 188.338 340.169 188.879 335.246 189.268 cv
331.02 189.603 324.787 189.892 320.901 191.427 cv
320.603 191.128 li
cp
f
303.569 193.22 mo
300.996 194.575 296.732 196.05 296.33 199.495 cv
295.77 204.303 300.871 202.554 304.159 202.178 cv
307.794 201.763 312.338 202.042 311.637 197.104 cv
310.94 192.189 305.605 193.154 301.776 194.415 cv
303.569 193.22 li
cp
f
358.854 189.335 mo
362.979 188.026 365.823 184.639 367.155 180.602 cv
368.426 176.749 366.85 169.698 373.497 172.002 cv
377.7 173.459 379.375 178.607 379.772 182.462 cv
380.085 185.51 380.101 194.39 377.985 196.506 cv
375.943 198.548 367.895 197.717 365.131 197.402 cv
361.034 196.936 357.496 195.226 358.854 190.231 cv
358.854 189.335 li
cp
f
368.417 223.402 mo
365.831 223.632 359.441 228.748 362.134 230.865 cv
365.21 233.282 372.837 227.389 368.118 223.701 cv
368.417 223.402 li
cp
f
370.509 153.176 mo
369.761 155.775 369.057 163.521 372.302 163.269 cv
376.124 162.972 378.936 155.759 379.129 152.921 cv
376.349 153.018 374.051 154.078 371.107 153.773 cv
370.509 153.176 li
cp
f
303.569 150.785 mo
300.719 150.959 292.081 155.8 297.054 159.391 cv
300.077 161.575 306.825 156.446 309.612 155.931 cv
313.806 155.157 318.904 157.715 322.995 158.255 cv
327.972 158.912 333.742 158.998 338.532 157.641 cv
340.534 157.075 342.416 156.618 343.866 155.044 cv
340.535 153.701 336.926 154.078 333.154 153.773 cv
329.221 153.456 326.508 151.902 323.06 150.404 cv
316.168 147.409 310.729 151.463 303.27 150.785 cv
303.569 150.785 li
cp
0 .430335 .955901 0 cmyk
f
372.302 153.773 mo
369.559 154.08 370.896 160.549 374.11 160.362 cv
376.515 160.222 378.942 155.357 378.824 153.526 cv
376.561 152.89 373.923 153.59 371.704 154.072 cv
372.302 153.773 li
cp
f
334.349 189.932 mo
331.73 190.853 322.518 190.36 325.9 195.909 cv
327.886 199.167 336.414 197.948 339.728 197.337 cv
342.301 196.862 350.296 194.457 347.803 190.232 cv
345.987 187.156 337.547 190.174 334.648 190.231 cv
334.349 189.932 li
cp
f
306.258 193.518 mo
302.237 193.03 296.784 199.91 302.971 200.077 cv
308.518 200.226 309.135 192.772 303.868 193.817 cv
306.258 193.518 li
cp
f
376.784 174.692 mo
372.644 169.159 371.293 177.243 371.405 180.37 cv
371.513 183.352 370.753 190.748 372.974 192.928 cv
378.142 197.997 383.05 177.555 376.187 174.095 cv
376.784 174.692 li
cp
f
367.819 224.896 mo
365.689 225.417 363.459 227.356 363.381 229.633 cv
365.971 230.051 368.879 228.264 368.969 225.555 cv
368.254 225.134 367.979 225.408 367.221 225.494 cv
367.819 224.896 li
cp
f
312.534 149.59 mo
309.353 151.22 303.289 150.691 300.871 153.101 cv
296.378 157.581 305.754 154.493 307.686 154.006 cv
309.9 153.447 320.179 153.228 320.85 151.396 cv
322.95 145.655 313.322 149.375 311.637 150.187 cv
312.534 149.59 li
cp
.0182803 .127169 .744137 0 cmyk
f
375.589 154.072 mo
374.562 154.244 373.379 154.929 372.355 155.318 cv
373.401 161.332 381.264 154.358 376.784 153.773 cv
375.589 154.072 li
cp
f
377.98 174.991 mo
375.037 169.232 371.969 180.241 374.014 183.358 cv
377.574 188.785 378.998 176.994 376.784 174.095 cv
377.98 174.991 li
cp
f
318.511 148.693 mo
316.242 148.973 313.151 150.003 312.886 152.526 cv
314.699 153.062 318.132 153.354 319.706 151.979 cv
322.288 149.723 320.133 148.097 317.017 148.693 cv
318.511 148.693 li
cp
.0537423 .0185855 .160372 0 cmyk
f
343.016 191.725 mo
339.4 193.174 341.184 196.195 344.511 194.789 cv
348.725 193.007 344.823 190.37 342.119 192.622 cv
343.016 191.725 li
cp
.0182803 .127169 .744137 0 cmyk
f
341.758 193.447 mo
342.205 195.847 346.511 194.354 345.957 192.495 cv
345.516 191.017 341.331 191.151 341.758 193.447 cv
cp
f
384.953 211.489 mo
384.592 211.321 386.188 191.549 386.234 189.854 cv
386.511 179.648 387.89 167.066 385.451 157.163 cv
384.593 153.682 384.172 150.93 380.747 154.881 cv
377.401 158.741 379.653 169.108 380.28 173.696 cv
381.428 182.112 375.361 207.025 384.953 211.489 cv
cp
.268772 .801846 1 .231266 cmyk
f
268.765 168.455 mo
272.191 167.756 276.895 154.997 277.011 155.026 cv
272.709 153.941 270.463 154.759 269.347 156.645 cv
267.799 159.264 268.429 163.942 268.765 168.455 cv
cp
f
277.87 199.994 mo
272.552 199.494 265.602 208.194 275.459 206.746 cv
277.248 206.483 282.363 205.47 282.95 203.082 cv
283.883 199.285 278.67 200.082 276.276 201.588 cv
277.87 199.994 li
cp
f
374.693 227.487 mo
378.976 225.888 391.463 215.45 380.661 218.225 cv
378.449 218.794 374.856 221.646 373.4 223.404 cv
370.739 226.617 370.365 230.223 375.889 227.089 cv
374.693 227.487 li
cp
f
300.58 158.555 mo
303.834 156.942 327.32 152.942 322.007 159.661 cv
320.02 162.175 312.261 162.041 309.346 162.14 cv
307.054 162.219 295.32 161.803 301.775 158.555 cv
300.58 158.555 li
cp
.0182803 .127169 .744137 0 cmyk
f
316.518 156.164 mo
312.988 155.108 307.194 158.315 312.533 160.956 cv
317.249 163.289 322.147 156.393 315.721 156.164 cv
316.518 156.164 li
cp
.0537423 .0185855 .160372 0 cmyk
f
303.759 109.146 mo
304.717 115.244 295.732 144.362 309.175 147.018 cv
329.052 150.946 326.799 117.703 324.617 112.821 cv
321.759 106.426 317.657 109.47 306.875 109.545 cv
303.759 109.146 li
cp
0 0 0 0 cmyk
f
269.502 114.724 mo
269.346 120.937 270.701 127.298 271.096 133.451 cv
271.496 139.69 273.113 147.115 279.882 148.572 cv
288.475 150.422 289.106 142.821 289.734 135.93 cv
290.148 131.407 293.08 118.49 290.53 114.416 cv
287.136 108.994 275.84 114.257 271.096 115.123 cv
269.502 114.724 li
cp
f
360.747 133.054 mo
363.941 134.927 366.446 135.197 367.52 139.03 cv
368.303 141.824 367.284 147.428 366.665 150.126 cv
362.53 148.951 361.09 137.668 359.503 133.843 cv
359.856 133.103 360.152 133.737 360.747 133.452 cv
360.747 133.054 li
cp
.087129 .0308843 .156435 0 cmyk
f
336.74 117.913 mo
340.856 126.459 341.789 136.445 344.495 145.122 cv
345.948 149.787 350.528 151.46 355.5 149.523 cv
360.436 147.6 358.096 141.585 357.128 137.27 cv
355.916 131.878 355.639 125.156 352.512 120.37 cv
349.229 115.345 340.9 116.019 335.545 117.015 cv
336.74 117.913 li
cp
f
331.008 133.197 mo
329.984 136.775 325.219 142.003 325.63 145.75 cv
325.999 149.118 332.958 151.222 336.087 150.229 cv
341.129 148.632 334.911 131.724 333.025 127.565 cv
331.424 129.686 331.625 132.902 330.411 135.588 cv
331.008 133.197 li
cp
f
336.125 119.2 mo
337.911 127.115 345.132 141.908 342.62 149.837 cv
337.898 149.524 336.662 136.915 335.652 133.016 cv
334.995 130.479 329.793 114.946 333.808 116.897 cv
336.125 119.2 li
cp
0 0 0 0 cmyk
f
380.37 145.107 mo
379.344 143.72 378.054 142.477 376.486 141.954 cv
374.572 143.37 372.632 149.053 375.357 150.724 cv
380.043 153.599 381.545 147.263 380.071 144.21 cv
380.37 145.107 li
cp
f
281.156 137.636 mo
281.644 133.674 285.608 129.073 287.43 134.348 cv
288.478 137.38 287.472 143.77 286.483 146.555 cv
283.486 145.2 282.393 139.825 281.754 136.739 cv
281.156 137.636 li
cp
f
314.021 130.616 mo
313.511 130.41 312.808 130.217 312.291 130.489 cv
312.118 130.58 312.13 130.839 312.291 130.932 cv
312.793 131.224 313.42 131.265 313.941 131.551 cv
314.257 131.725 314.941 132.315 315.136 131.692 cv
315.298 131.178 314.37 130.757 314.021 130.616 cv
cp
.5346 .781399 .703975 .78674 cmyk
f
328.227 127.014 mo
327.077 126.915 325.925 127.44 324.861 127.826 cv
323.606 128.283 322.394 128.82 321.309 129.608 cv
321.179 129.702 321.254 129.911 321.421 129.872 cv
322.683 129.58 323.874 129.094 325.091 128.659 cv
326.167 128.274 327.379 128.109 328.365 127.526 cv
328.616 127.379 328.489 127.036 328.227 127.014 cv
cp
f
352.848 149.466 mo
353.785 148.715 354.166 147.364 354.582 146.27 cv
355.099 144.909 355.486 143.493 356.041 142.148 cv
356.095 142.018 355.898 141.957 355.828 142.058 cv
355.145 143.039 354.601 144.031 354.151 145.138 cv
353.615 146.452 352.708 147.836 352.426 149.22 cv
352.374 149.479 352.651 149.623 352.848 149.466 cv
cp
f
339.683 153.961 mo
340.282 153.961 341.049 154.044 341.517 153.615 cv
341.656 153.486 341.657 153.235 341.517 153.106 cv
341.046 152.675 340.281 152.763 339.683 152.811 cv
339.17 152.854 338.384 152.883 338.129 153.406 cv
338.081 153.503 338.088 153.608 338.165 153.688 cv
338.53 154.075 339.196 153.961 339.683 153.961 cv
cp
f
370.639 136.326 mo
371.107 136.614 371.577 136.898 372.039 137.194 cv
374.344 138.669 376.462 140.365 378.383 142.313 cv
380.279 144.236 381.549 146.21 381.017 148.987 cv
380.767 150.291 380.182 151.483 379.612 152.681 cv
376.561 152.741 373.509 152.82 370.457 152.899 cv
370.486 148.864 370.525 144.829 370.58 140.794 cv
370.6 139.305 370.619 137.815 370.639 136.326 cv
cp
370.451 154.099 mo
373.319 154.043 376.187 153.97 379.055 153.902 cv
378.849 154.384 378.66 154.87 378.517 155.372 cv
378.512 155.39 378.515 155.407 378.512 155.425 cv
377.474 157.963 376.652 160.614 375.579 163.123 cv
374.848 164.833 374.149 166.345 372.53 167.401 cv
371.898 167.814 371.157 167.975 370.387 168.043 cv
370.389 166.616 370.392 165.19 370.398 163.765 cv
370.411 160.543 370.429 157.321 370.451 154.099 cv
cp
389.743 141.658 mo
389.581 151.478 389.175 161.301 388.869 171.118 cv
388.564 180.85 388.4 190.578 388.341 200.315 cv
388.303 206.632 388.156 212.966 388.151 219.292 cv
388.097 219.384 388.057 219.49 388.06 219.629 cv
388.072 220.422 388.113 221.274 388.158 222.156 cv
388.172 224.275 388.213 226.392 388.279 228.509 cv
388.129 231.509 387.513 234.381 385.701 236.45 cv
384.256 238.1 381.971 239.026 379.999 239.848 cv
377.539 240.874 375.314 242.374 372.829 243.335 cv
372.201 243.577 371.547 243.78 370.877 243.956 cv
371.303 240.969 370.555 237.452 370.167 234.58 cv
370.143 234.399 369.892 234.469 369.874 234.62 cv
369.512 237.663 369.435 241.125 369.722 244.223 cv
365.789 245.036 361.376 244.958 357.577 245.102 cv
351.458 245.334 345.323 245.358 339.2 245.462 cv
326.355 245.678 313.499 246.517 300.662 245.564 cv
299.391 245.47 298.139 245.325 296.897 245.144 cv
296.982 243.79 296.921 242.381 296.668 241.061 cv
296.4 239.666 296.667 238.121 296.253 236.78 cv
298.13 236.455 300.007 236.124 301.88 235.744 cv
303.87 235.342 305.825 234.84 307.773 234.32 cv
307.792 234.338 307.805 234.359 307.834 234.37 cv
310.502 235.347 313.454 235.136 316.25 235.066 cv
319.241 234.992 322.413 235.047 325.363 234.536 cv
325.71 234.476 325.715 233.889 325.363 233.834 cv
322.722 233.422 319.927 233.79 317.267 233.91 cv
314.532 234.033 311.801 233.926 309.071 233.972 cv
312.268 233.108 315.461 232.234 318.766 231.686 cv
325.214 230.617 331.671 229.638 338.04 228.152 cv
341.234 227.406 344.201 226.762 347.498 226.636 cv
350.199 226.532 352.682 226.157 355.296 225.493 cv
359.724 224.367 364.201 223.544 368.58 222.266 cv
368.471 223.025 368.643 223.961 368.669 224.597 cv
368.726 225.998 368.502 227.786 369.038 229.062 cv
369.175 229.389 369.569 229.39 369.705 229.062 cv
370.215 227.833 369.948 226.14 369.834 224.815 cv
369.767 224.043 369.943 222.788 369.671 221.938 cv
370.178 221.78 370.686 221.622 371.19 221.448 cv
377.164 219.391 383.465 214.977 382.063 208.14 cv
381.951 205.365 381.298 202.544 379.629 200.347 cv
377.68 197.783 374.343 196.825 371.281 196.469 cv
370.839 196.417 370.396 196.373 369.952 196.334 cv
370.353 187.979 370.377 179.593 370.384 171.219 cv
373.883 172.265 377.421 173.116 379.843 176.284 cv
381.941 179.028 380.478 183.004 380.49 186.114 cv
380.503 189.484 381.902 194.729 379.253 197.38 cv
378.902 197.731 379.348 198.285 379.774 198.055 cv
382.225 196.726 381.833 192.795 381.804 190.452 cv
381.775 188.013 381.451 185.66 381.718 183.221 cv
381.936 181.224 382.117 179.413 381.602 177.453 cv
380.49 173.221 375.092 171.072 370.385 169.983 cv
370.386 169.627 370.386 169.27 370.387 168.914 cv
372.26 168.788 373.987 168.033 375.291 166.419 cv
377.9 163.185 379.339 157.983 380.434 153.875 cv
381.933 153.844 383.433 153.812 384.934 153.796 cv
385.704 153.787 385.705 152.592 384.934 152.599 cv
383.561 152.614 382.188 152.638 380.815 152.662 cv
382.162 149.722 382.883 146.598 380.872 143.706 cv
378.599 140.436 374.581 137.017 370.657 135.042 cv
370.69 132.608 370.726 130.175 370.754 127.74 cv
370.801 123.783 371.129 119.643 370.717 115.682 cv
370.967 115.279 371.107 114.791 371.272 114.347 cv
371.531 113.65 371.87 112.837 371.816 112.081 cv
371.799 111.846 371.533 111.721 371.354 111.889 cv
370.881 112.332 370.693 112.977 370.469 113.567 cv
370.413 113.716 370.345 113.87 370.275 114.026 cv
370.182 113.83 370.089 113.639 370.017 113.461 cv
369.753 112.806 369.553 112.042 369.069 111.514 cv
368.966 111.401 368.804 111.472 368.757 111.596 cv
368.494 112.285 368.769 113.075 368.998 113.741 cv
369.191 114.298 369.341 115.064 369.74 115.549 cv
369.719 115.697 369.709 115.846 369.724 115.991 cv
369.724 115.992 369.725 115.993 369.725 115.993 cv
369.392 119.475 369.608 123.078 369.572 126.554 cv
369.545 129.2 369.504 131.847 369.468 134.492 cv
368.986 134.286 368.508 134.097 368.039 133.943 cv
367.85 133.881 367.712 134.138 367.848 134.271 cv
368.344 134.755 368.888 135.172 369.454 135.56 cv
369.435 136.909 369.42 138.258 369.401 139.607 cv
369.338 144.048 369.296 148.488 369.262 152.93 cv
367.577 152.972 365.891 153.014 364.206 153.054 cv
364.203 153.054 364.199 153.054 364.196 153.054 cv
363.486 150.315 362.724 147.591 361.956 144.868 cv
360.015 137.992 358.421 130.908 356.195 124.112 cv
355.484 120.067 353.587 116.146 349.298 115.204 cv
346.518 114.594 343.465 114.9 340.635 114.713 cv
337.613 114.514 334.5 113.866 331.451 113.986 cv
328.956 113.502 326.36 114.427 323.6 115.451 cv
317.119 117.857 310.638 120.255 304.161 122.67 cv
301.435 123.686 298.673 124.605 295.943 125.597 cv
295.849 121.928 295.747 118.259 295.619 114.594 cv
296.127 114.15 296.27 113.398 296.466 112.764 cv
296.79 111.718 297.201 110.656 297.431 109.586 cv
297.533 109.114 296.919 108.847 296.654 109.259 cv
296.159 110.03 295.925 110.967 295.643 111.831 cv
295.486 112.311 295.223 112.859 295.069 113.405 cv
294.87 113.124 294.646 112.859 294.457 112.617 cv
293.889 111.891 293.349 111.305 292.534 110.865 cv
292.399 110.792 292.261 110.936 292.329 111.069 cv
292.722 111.835 293.192 112.509 293.676 113.22 cv
293.946 113.615 294.193 114.085 294.521 114.455 cv
294.405 118.325 294.471 122.211 294.604 126.095 cv
292.113 127.028 289.657 128.044 287.289 129.283 cv
286.322 129.79 285.12 130.346 283.991 131.012 cv
283.928 129.625 283.811 128.24 283.75 126.896 cv
283.592 123.41 283.747 119.841 283.274 116.383 cv
283.252 116.222 282.988 116.23 282.959 116.383 cv
282.376 119.443 282.651 122.631 282.759 125.727 cv
282.827 127.68 282.788 129.72 282.874 131.733 cv
281.1 133.007 279.846 134.659 280.642 136.993 cv
280.763 137.348 281.316 137.302 281.312 136.903 cv
281.294 135.052 281.914 134.015 282.96 133.146 cv
283.044 134.197 283.172 135.235 283.394 136.241 cv
283.428 136.396 283.676 136.398 283.709 136.241 cv
283.97 134.987 284.04 133.688 284.028 132.381 cv
284.359 132.169 284.711 131.955 285.087 131.728 cv
287.177 130.466 289.353 129.354 291.577 128.348 cv
292.581 127.894 293.606 127.478 294.639 127.078 cv
294.703 128.813 294.776 130.549 294.854 132.282 cv
292.462 132.425 290.046 132.597 287.771 133.323 cv
287.597 133.379 287.627 133.643 287.815 133.644 cv
290.169 133.657 292.537 133.418 294.895 133.225 cv
294.946 134.378 294.997 135.529 295.044 136.679 cv
295.228 141.127 295.342 145.581 295.518 150.031 cv
292.862 150.306 290.099 151.222 288.604 153.413 cv
288.468 153.61 288.723 153.8 288.903 153.713 cv
291.23 152.601 293.35 151.882 295.584 151.583 cv
295.682 153.844 295.797 156.102 295.952 158.359 cv
295.97 158.617 296.336 158.617 296.354 158.359 cv
296.511 156.066 296.568 153.773 296.574 151.479 cv
297.91 151.38 299.297 151.421 300.815 151.639 cv
304.985 152.241 308.442 152.248 312.417 150.715 cv
314.321 149.981 316.088 149.264 318.15 149.105 cv
318.694 149.063 319.223 149.102 319.741 149.196 cv
320.12 150.162 320.53 151.11 321.01 152.016 cv
321.146 152.272 321.505 152.088 321.454 151.83 cv
321.299 151.042 321.089 150.259 320.849 149.48 cv
322.289 149.962 323.636 150.809 324.923 151.565 cv
328.524 153.682 331.798 153.676 335.885 153.875 cv
336.457 153.902 336.597 152.959 336.022 152.865 cv
333.642 152.481 331.242 152.662 328.876 152.126 cv
326.512 151.591 324.353 149.713 322.178 148.686 cv
321.581 148.405 320.983 148.212 320.384 148.085 cv
319.827 146.509 319.183 144.952 318.605 143.421 cv
317.592 140.738 316.658 137.715 314.948 135.387 cv
314.882 135.297 314.748 135.349 314.769 135.462 cv
315.293 138.278 316.69 140.998 317.723 143.665 cv
318.264 145.058 318.741 146.503 319.26 147.928 cv
316.833 147.747 314.415 148.574 312.078 149.484 cv
307.079 151.43 302.701 149.98 297.602 149.932 cv
297.266 149.93 296.921 149.937 296.572 149.953 cv
296.542 145.922 296.368 141.889 296.257 137.859 cv
296.213 136.283 296.174 134.708 296.134 133.131 cv
296.348 133.116 296.563 133.099 296.777 133.087 cv
299.774 132.9 302.949 132.755 305.827 131.845 cv
306.169 131.737 306.126 131.155 305.739 131.193 cv
302.745 131.489 299.785 131.956 296.777 132.164 cv
296.555 132.18 296.332 132.192 296.109 132.206 cv
296.063 130.329 296.016 128.452 295.968 126.575 cv
299.505 125.273 303.146 124.165 306.644 122.847 cv
311.32 121.088 315.966 119.28 320.676 117.608 cv
325.45 115.913 329.861 113.252 334.514 116.603 cv
334.939 116.909 335.448 116.231 335.068 115.885 cv
334.876 115.709 334.684 115.554 334.491 115.403 cv
337.853 115.776 341.293 115.927 344.572 116.005 cv
347.78 116.082 351.043 115.962 353.069 118.867 cv
354.388 120.757 354.741 123.104 355.496 125.229 cv
356.025 128.487 356.866 131.72 357.789 134.925 cv
357.746 134.937 357.708 134.963 357.688 135.012 cv
357.395 135.704 356.909 137.016 357.46 137.68 cv
357.543 137.778 357.734 137.778 357.817 137.68 cv
358.087 137.355 358.033 136.94 358.037 136.535 cv
358.041 136.283 358.037 136.031 358.037 135.78 cv
358.741 138.19 359.48 140.585 360.153 142.961 cv
361.099 146.294 362.131 149.669 363.068 153.071 cv
359.977 153.13 356.885 153.151 353.794 153.169 cv
351.182 153.184 348.438 152.983 345.788 153.177 cv
345.505 152.265 345.219 151.359 344.985 150.46 cv
344.054 146.882 343.217 143.28 342.358 139.684 cv
342.072 138.488 341.781 137.294 341.487 136.1 cv
342.211 134.65 343.031 133.273 344.102 132.097 cv
346.334 129.648 350.696 131.622 353.484 131.257 cv
353.872 131.206 354.051 130.588 353.586 130.505 cv
350.605 129.97 346.708 129.184 343.988 130.887 cv
342.634 131.733 341.881 133.432 341.177 134.851 cv
340.68 132.869 340.168 130.89 339.626 128.919 cv
339.244 127.531 338.876 126.094 338.443 124.676 cv
341.104 123.851 343.854 123.019 346.412 121.941 cv
346.848 121.758 346.692 121.151 346.216 121.229 cv
343.743 121.638 341.364 122.676 338.998 123.488 cv
338.718 123.584 338.436 123.674 338.153 123.761 cv
337.669 122.294 337.095 120.865 336.328 119.561 cv
336.245 119.42 336.058 119.521 336.08 119.666 cv
336.309 121.142 336.702 122.603 337.142 124.056 cv
335.325 124.565 333.475 124.994 331.755 125.724 cv
331.641 125.773 331.714 125.925 331.811 125.933 cv
333.727 126.113 335.601 125.564 337.43 124.993 cv
337.869 126.39 338.331 127.78 338.716 129.169 cv
339.358 131.48 339.942 133.807 340.511 136.139 cv
339.291 138.484 338.08 140.975 337.538 143.545 cv
337.504 143.706 337.712 143.798 337.802 143.657 cv
339.005 141.767 339.871 139.584 340.836 137.471 cv
340.947 137.932 341.06 138.395 341.171 138.857 cv
342.336 143.685 343.554 148.481 344.837 153.267 cv
344.329 153.325 343.825 153.395 343.328 153.493 cv
343.135 153.531 343.135 153.843 343.328 153.881 cv
343.9 153.993 344.482 154.065 345.067 154.123 cv
345.463 155.587 345.862 157.051 346.271 158.514 cv
346.384 158.919 347.065 158.852 347.023 158.412 cv
346.889 157.001 346.519 155.596 346.101 154.201 cv
348.275 154.318 350.496 154.183 352.637 154.186 cv
356.107 154.19 359.578 154.164 363.049 154.177 cv
363.155 154.177 363.263 154.174 363.37 154.174 cv
364.384 157.954 365.255 161.764 365.732 165.582 cv
365.807 166.179 366.577 166.174 366.656 165.582 cv
367.078 162.438 365.673 159.051 364.941 156.02 cv
364.791 155.401 364.633 154.784 364.476 154.167 cv
366.07 154.163 367.663 154.151 369.256 154.124 cv
369.234 157.338 369.213 160.552 369.202 163.765 cv
369.197 165.206 369.185 166.647 369.169 168.09 cv
368.481 168.091 367.798 168.072 367.172 168.133 cv
366.937 168.156 366.861 168.497 367.114 168.564 cv
367.798 168.745 368.483 168.861 369.159 168.908 cv
369.156 169.178 369.151 169.447 369.148 169.717 cv
368.317 169.551 367.523 169.417 366.799 169.309 cv
366.397 168.695 365.943 168.166 365.448 167.705 cv
365.762 167.52 365.699 167.022 365.287 167.005 cv
365.123 166.997 364.946 167.058 364.827 167.18 cv
361.266 164.436 355.947 164.632 351.642 163.685 cv
348.168 162.922 344.92 161.534 341.37 161.075 cv
337.004 160.511 332.241 161.029 327.861 161.279 cv
319.531 161.755 311.272 162.907 302.922 163.12 cv
298.725 163.227 294.533 163.019 290.338 162.951 cv
290.026 162.946 289.714 162.959 289.403 162.966 cv
288.449 158.7 287.143 154.472 285.859 150.298 cv
284.822 146.928 283.876 142.645 281.555 139.903 cv
281.483 139.818 281.309 139.883 281.324 139.999 cv
281.791 143.567 283.727 147.142 284.817 150.585 cv
285.189 151.757 285.529 152.938 285.858 154.124 cv
282.963 153.848 279.979 154.039 277.077 154.041 cv
274.419 154.044 271.648 153.818 269.035 154.357 cv
268.892 154.387 268.892 154.616 269.035 154.645 cv
271.648 155.183 274.419 154.959 277.077 154.961 cv
280.046 154.964 283.103 155.165 286.061 154.859 cv
286.806 157.585 287.513 160.322 288.384 163.006 cv
285.125 163.207 281.893 164 278.799 164.991 cv
279.129 164.339 279.138 163.589 279.209 162.873 cv
279.297 161.981 279.867 161.071 279.817 160.205 cv
279.804 159.978 279.558 159.802 279.346 159.934 cv
278.611 160.396 278.474 161.458 278.373 162.262 cv
278.26 163.164 278.157 164.156 278.58 164.994 cv
278.592 165.017 278.613 165.033 278.636 165.043 cv
278.518 165.081 278.399 165.117 278.281 165.155 cv
275.017 166.228 271.829 167.502 268.655 168.816 cv
268.916 165.961 268.637 162.964 268.633 160.137 cv
268.63 156.807 269.092 153.088 268.26 149.847 cv
268.226 149.715 268.024 149.714 267.99 149.847 cv
267.158 153.086 267.621 156.809 267.634 160.137 cv
267.646 163.084 267.368 166.234 267.743 169.195 cv
266.617 169.664 265.491 170.133 264.364 170.601 cv
264.199 161.974 264.119 153.346 263.913 144.721 cv
263.851 142.115 263.805 139.51 263.76 136.905 cv
263.989 135.426 263.849 133.809 263.864 132.386 cv
263.899 129.025 263.949 125.661 263.912 122.301 cv
263.876 119.02 262.892 115.458 263.606 112.272 cv
264.317 109.103 271.108 108.43 273.596 108.044 cv
283.124 106.563 292.874 105.893 302.489 105.298 cv
308.535 104.924 314.592 104.737 320.649 104.636 cv
322.88 104.597 325.12 104.607 327.36 104.603 cv
333.51 104.937 339.833 104.336 345.937 104.412 cv
355.055 104.524 364.093 105.665 373.162 106.466 cv
377.607 106.858 382.063 107.362 386.384 108.51 cv
388.656 109.112 389.918 109.917 389.978 112.42 cv
390.005 113.609 389.992 114.8 389.986 115.99 cv
389.981 117.084 389.949 118.187 389.907 119.298 cv
389.888 119.733 389.869 120.169 389.854 120.605 cv
389.707 123.997 389.522 127.43 389.746 130.791 cv
389.764 134.432 389.802 138.067 389.743 141.658 cv
cp
295.6 240.951 mo
295.796 242.288 295.752 243.634 295.825 244.975 cv
292.378 244.419 289 243.62 285.543 242.861 cv
284.139 242.553 282.761 242.402 281.327 242.53 cv
279.61 242.682 278 242.331 276.373 241.87 cv
278.737 240.853 281.171 239.988 283.772 239.294 cv
287.675 238.252 291.63 237.578 295.589 236.895 cv
295.242 238.156 295.415 239.697 295.6 240.951 cv
cp
364.949 186.051 mo
368.687 181.871 369.887 175.135 367.282 170.152 cv
367.889 170.402 368.508 170.624 369.134 170.828 cv
369.019 179.312 368.847 187.815 369.229 196.278 cv
367.823 196.176 366.413 196.127 365 196.122 cv
365.454 192.913 365.454 189.232 364.949 186.051 cv
cp
358.387 189.925 mo
358.83 189.802 359.262 189.647 359.686 189.464 cv
361.404 188.954 362.918 188.029 364.192 186.826 cv
364.098 188.191 364.153 189.565 364.212 190.939 cv
364.285 192.673 364.038 194.398 363.98 196.126 cv
362.102 196.143 360.223 196.223 358.344 196.326 cv
358.403 195.392 358.377 194.449 358.46 193.514 cv
358.565 192.32 358.609 191.101 358.387 189.925 cv
cp
355.195 193.651 mo
355.252 192.589 355.353 191.46 355.222 190.384 cv
356.079 190.351 356.918 190.262 357.731 190.088 cv
357.547 191.172 357.569 192.277 357.472 193.382 cv
357.385 194.368 357.316 195.383 357.375 196.381 cv
356.631 196.425 355.887 196.471 355.144 196.516 cv
355.238 195.569 355.147 194.555 355.195 193.651 cv
cp
321.198 199.567 mo
319.566 198.005 320.057 194.642 319.938 192.351 cv
327.364 191.607 334.77 190.739 342.183 189.763 cv
345.916 189.271 350.307 190.383 354.382 190.396 cv
354.22 191.467 354.247 192.596 354.201 193.651 cv
354.161 194.574 354.009 195.612 354.087 196.581 cv
353.071 196.642 352.057 196.702 351.045 196.752 cv
343.579 197.122 336.139 197.629 328.723 198.595 cv
326.213 198.921 323.706 199.245 321.198 199.567 cv
cp
296.21 200.145 mo
296.224 199.178 296.358 198.054 296.171 197.072 cv
297.349 196.417 298.496 195.696 299.71 195.113 cv
302.534 193.755 305.943 193.598 309.014 193.351 cv
312.449 193.075 315.875 192.756 319.297 192.417 cv
318.758 194.761 318.663 197.758 320.005 199.722 cv
316.126 200.219 312.244 200.707 308.354 201.163 cv
304.264 201.642 300.238 202.463 296.218 203.324 cv
296.318 202.282 296.223 201.181 296.21 200.145 cv
cp
291.539 200.979 mo
291.504 200.268 291.463 199.652 291.31 199.029 cv
292.316 198.759 293.311 198.431 294.294 198.012 cv
294.599 197.881 294.898 197.737 295.194 197.589 cv
295.12 198.436 295.213 199.345 295.226 200.145 cv
295.211 201.252 295.105 202.43 295.242 203.533 cv
294.062 203.787 292.881 204.041 291.7 204.29 cv
291.689 203.187 291.591 202.076 291.539 200.979 cv
cp
270.511 208.912 mo
270.364 208.309 270.035 207.688 269.88 207.148 cv
269.647 206.336 269.601 205.291 269.345 204.406 cv
272.577 203.259 275.857 202.198 279.125 201.323 cv
282.913 200.308 286.792 200.129 290.556 199.224 cv
290.472 199.782 290.489 200.339 290.513 200.979 cv
290.557 202.151 290.557 203.339 290.645 204.512 cv
289.889 204.668 289.133 204.823 288.375 204.971 cv
282.378 206.14 276.452 207.511 270.511 208.912 cv
cp
268.313 204.777 mo
268.323 205.567 268.566 206.422 268.715 207.082 cv
268.838 207.63 269.015 208.522 269.368 209.18 cv
269.349 209.185 269.33 209.19 269.31 209.194 cv
268.04 209.495 266.747 209.771 265.448 210.049 cv
265.515 208.655 265.402 207.264 265.367 205.868 cv
266.342 205.499 267.325 205.135 268.313 204.777 cv
cp
333.517 255.547 mo
327.653 257.819 322.088 260.229 317.325 264.426 cv
312.234 268.909 304.834 270.322 298.431 271.789 cv
291.517 273.374 283.272 274.428 277.432 278.739 cv
277.296 278.84 277.372 279.064 277.55 279.02 cv
281.382 278.098 285.019 276.481 288.869 275.549 cv
292.185 274.746 295.58 274.242 298.929 273.594 cv
305.253 272.367 311.805 270.602 317.146 266.872 cv
319.796 265.021 322.01 262.801 324.867 261.2 cv
325.318 260.947 325.778 260.707 326.24 260.474 cv
324.427 263.386 323.567 267.605 322.501 270.392 cv
321.358 273.38 319.745 276.117 317.072 277.964 cv
314.504 279.737 311.287 279.843 308.504 281.133 cv
308.368 281.195 308.435 281.42 308.579 281.411 cv
309.489 281.357 310.373 281.278 311.233 281.17 cv
309.109 282.384 307.128 284.104 305.454 285.493 cv
303.378 287.216 301.269 289.203 299.627 291.464 cv
300.389 289.96 301.102 288.285 301.101 286.694 cv
301.101 286.563 300.934 286.529 300.866 286.631 cv
299.708 288.369 299.024 290.447 297.999 292.274 cv
297.448 293.256 296.696 294.181 296.023 295.135 cv
294.74 296.444 293.398 297.68 291.814 298.77 cv
290.85 299.435 289.838 300.029 288.8 300.574 cv
285.661 301.531 282.61 302.625 279.33 303.23 cv
277.056 303.65 274.759 303.895 272.457 304.078 cv
270.435 304.238 268.3 304.077 266.361 304.697 cv
266.118 304.775 266.115 305.116 266.361 305.192 cv
269.093 306.041 272.559 305.749 275.691 305.31 cv
271.691 306.371 267.643 307.273 263.67 308.406 cv
255.92 310.618 248.944 314.74 241.175 316.956 cv
237.344 318.049 233.645 319.454 229.88 320.746 cv
227.034 321.723 223.841 322.399 220.984 323.563 cv
221.299 323.169 221.608 322.773 221.902 322.37 cv
222.277 321.856 221.509 321.404 221.088 321.742 cv
216.461 325.464 212.56 330.339 208.184 334.387 cv
206.319 336.11 204.382 337.749 202.468 339.418 cv
202.271 339.447 202.098 339.577 202.044 339.785 cv
200.533 341.093 198.79 342.483 197.876 344.28 cv
185.043 338.504 176.38 326.61 168.171 315.509 cv
162.751 308.179 158.374 300.165 155.1 291.658 cv
153.644 287.874 152.496 283.957 151.455 280.041 cv
150.789 277.539 150.442 275.109 150.254 272.658 cv
150.319 272.673 150.391 272.663 150.451 272.615 cv
153.134 270.444 155.25 267.443 157.414 264.772 cv
159.673 261.983 161.871 259.144 164.05 256.292 cv
168.837 250.028 173.516 243.683 178.314 237.429 cv
183.274 230.962 188.426 224.643 193.783 218.502 cv
197.98 213.688 202.807 209.225 206.806 204.184 cv
206.491 204.915 206.175 205.643 205.855 206.366 cv
205.769 206.559 206.006 206.793 206.17 206.609 cv
207.984 204.576 208.948 202.035 210.181 199.638 cv
211.569 196.936 213.164 194.329 215.033 191.932 cv
218.637 187.313 223.584 184.473 228.945 182.346 cv
231.297 181.412 233.899 181.261 236.251 180.321 cv
237.893 179.998 239.567 179.818 241.226 179.583 cv
244.729 179.088 248.184 178.159 251.599 177.257 cv
258.833 175.345 265.731 172.536 272.648 169.72 cv
279.545 166.912 286.209 164.874 293.712 164.929 cv
301.432 164.984 309.173 164.538 316.845 163.696 cv
323.875 162.925 330.925 162.433 338 162.459 cv
341.97 162.473 345.392 163.632 349.104 164.867 cv
352.114 165.869 355.215 166.115 358.329 166.578 cv
364.413 167.483 367.658 171.995 366.766 178.003 cv
366.128 182.304 363.285 186.344 359.307 188.115 cv
356.454 189.12 353.008 188.587 350.129 188.334 cv
346.322 188 342.88 187.829 339.092 188.365 cv
328.041 189.926 316.92 190.605 305.843 191.866 cv
301.784 192.328 298.465 193.607 294.89 195.499 cv
289.803 198.189 284.072 198.053 278.659 199.634 cv
268.46 202.613 258.812 207.379 248.736 210.742 cv
248.295 210.889 248.479 211.5 248.925 211.427 cv
254.164 210.567 259.112 208.268 264.038 206.374 cv
264.069 206.361 264.1 206.35 264.131 206.338 cv
264.212 207.644 264.335 208.953 264.511 210.25 cv
262.227 210.74 259.932 211.256 257.704 211.932 cv
257.315 211.825 256.864 211.826 256.489 211.704 cv
255.921 211.519 255.349 211.144 254.824 210.867 cv
254.603 210.75 254.349 210.986 254.479 211.212 cv
254.831 211.825 255.309 212.204 255.928 212.516 cv
254.7 212.95 253.499 213.444 252.34 214.029 cv
251.971 214.216 252.229 214.821 252.621 214.694 cv
263.272 211.244 274.506 209.148 285.495 207.042 cv
291.323 205.925 297.144 204.664 302.995 203.681 cv
309.304 202.623 315.717 202.333 322.048 201.442 cv
335.105 199.606 348.188 198.703 361.361 198.222 cv
366.15 198.046 371.906 197.643 376.247 200.062 cv
380.012 202.16 379.911 207.165 380.283 210.867 cv
380.289 210.923 380.3 210.973 380.313 211.024 cv
379.754 213.576 378.315 215.606 375.656 217.29 cv
372.002 219.604 367.424 220.59 363.28 221.621 cv
357.749 222.998 352.128 224.417 346.428 224.634 cv
340.717 224.85 335.166 226.792 329.563 227.834 cv
323.985 228.871 318.336 229.555 312.781 230.713 cv
307.06 231.905 301.592 233.931 295.819 234.981 cv
290.652 235.92 285.572 237.164 280.578 238.793 cv
276.276 240.196 271.669 241.994 268.341 245.152 cv
268.033 245.443 268.428 245.94 268.788 245.731 cv
270.705 244.617 272.604 243.607 274.534 242.698 cv
274.609 242.912 274.774 243.097 275.055 243.18 cv
278.577 244.225 281.879 243.805 285.376 244.483 cv
283.359 244.95 281.354 245.655 279.458 246.222 cv
276.737 247.036 273.792 247.86 271.542 249.656 cv
271.422 249.751 271.552 249.931 271.682 249.897 cv
274.738 249.113 277.651 247.876 280.731 247.13 cv
283.394 246.485 286.307 246.254 288.857 245.215 cv
293.133 246.09 297.269 246.767 301.752 246.989 cv
316.097 247.697 330.441 246.997 344.792 246.841 cv
346.752 246.819 348.712 246.795 350.671 246.764 cv
348.123 247.839 345.754 249.646 343.427 251.049 cv
340.296 252.935 336.917 254.228 333.517 255.547 cv
cp
202.321 341.157 mo
202.431 341.458 202.546 341.756 202.618 342.045 cv
202.818 342.845 202.924 343.649 202.874 344.473 cv
202.838 345.041 202.642 345.755 202.032 345.915 cv
201.933 345.941 201.832 345.953 201.73 345.954 cv
201.668 345.835 201.563 345.731 201.4 345.677 cv
200.449 345.352 199.522 344.995 198.613 344.608 cv
199.937 343.588 201.1 342.319 202.321 341.157 cv
cp
207.719 343.865 mo
208.971 348.328 204.271 349.584 201 349.1 cv
196.739 348.472 193.463 346.071 189.713 344.36 cv
189.106 343.656 188.51 342.937 187.938 342.18 cv
186.475 340.24 185.036 338.271 183.598 336.297 cv
188.419 340.904 193.847 344.658 200.15 346.506 cv
201.4 347.279 203.221 347.188 203.851 345.673 cv
204.219 344.785 204.189 343.768 204.061 342.834 cv
203.957 342.082 203.801 340.981 203.392 340.188 cv
204.109 339.561 204.829 338.937 205.549 338.313 cv
206.162 340.209 207.178 341.935 207.719 343.865 cv
cp
203.384 351.763 mo
202.755 352.49 202.104 353.199 201.463 353.917 cv
201.028 354.406 200.492 354.831 200.096 355.352 cv
199.248 354.252 198.222 353.247 197.575 352.56 cv
195.797 350.673 193.981 348.921 192.225 347.101 cv
193.089 347.532 193.977 347.888 194.733 348.202 cv
197.588 349.39 200.581 350.459 203.714 350.286 cv
204.019 350.269 204.335 350.224 204.652 350.159 cv
204.188 350.739 203.764 351.324 203.384 351.763 cv
cp
197.024 361.36 mo
195.185 362.842 193.661 364.668 192.177 366.489 cv
192.123 366.555 192.071 366.625 192.016 366.691 cv
191.749 366.77 191.514 367.019 191.514 367.326 cv
188.664 370.937 186.138 374.793 183.172 378.315 cv
181.024 376.929 179.017 375.28 177.124 373.637 cv
176.414 373.02 175.734 372.375 175.069 371.714 cv
178.753 368.314 178.568 363.068 175.469 359.212 cv
172.464 355.472 167.148 355.362 164.248 359.092 cv
161.041 355.086 157.944 350.993 154.984 346.8 cv
146.641 334.98 139.725 322.239 134.381 308.796 cv
132.007 302.826 130.131 296.704 128.431 290.513 cv
127.823 288.302 127.054 285.713 126.643 283.104 cv
126.749 283.147 126.869 283.136 126.96 283.017 cv
130.004 279.09 133.646 275.944 136.877 272.2 cv
139.461 269.206 141.821 266.329 144.967 264.188 cv
144.471 265.862 144.72 267.987 144.843 269.454 cv
145.791 280.729 150.308 291.681 154.838 301.941 cv
159.92 313.452 167.385 323.81 175.277 333.54 cv
179.21 338.389 183.336 343.081 187.495 347.737 cv
191.132 351.808 194.437 356.717 199.14 359.64 cv
198.501 360.245 197.764 360.763 197.024 361.36 cv
cp
174.09 370.713 mo
172.027 368.549 170.132 366.225 168.205 363.93 cv
167.118 362.635 166.046 361.328 164.983 360.013 cv
166.372 358.642 167.7 357.528 169.792 357.51 cv
171.695 357.493 173.366 358.762 174.558 360.122 cv
177.38 363.342 177.122 367.903 174.09 370.713 cv
cp
195.87 384.059 mo
195.865 384.063 195.86 384.064 195.855 384.068 cv
188.184 390.923 177.34 380.608 172.043 375.308 cv
163.125 366.387 156.322 355.675 149.208 345.331 cv
145.159 339.444 141.817 333.1 138.483 326.793 cv
134.918 320.051 131.11 313.51 128.537 306.303 cv
126.347 300.17 124.71 293.734 123.45 287.348 cv
122.49 282.485 121.76 276.473 124.393 272.005 cv
124.775 271.782 125.168 271.58 125.576 271.414 cv
127.94 270.454 130.339 273.79 132.591 274.875 cv
131.94 275.505 131.286 276.133 130.631 276.769 cv
129.08 278.276 127.164 280.094 126.522 282.241 cv
126.191 279.572 126.296 276.924 127.418 274.678 cv
127.561 274.39 127.175 274.039 126.948 274.315 cv
124.038 277.872 125.665 283.847 126.589 287.858 cv
128.255 295.085 130.58 302.198 133.26 309.105 cv
139.161 324.312 147.322 338.471 156.929 351.625 cv
161.995 358.559 167.244 365.779 173.434 371.9 cv
173.503 372.022 173.61 372.129 173.738 372.203 cv
175.803 374.222 177.972 376.12 180.275 377.842 cv
183.159 379.998 186.647 382.376 190.359 382.6 cv
193.889 382.813 194.949 379.305 194.838 376.426 cv
194.811 375.721 193.812 375.736 193.755 376.426 cv
193.616 378.091 193.417 380.376 191.622 381.103 cv
190.101 381.72 188.139 380.89 186.755 380.28 cv
185.829 379.871 184.93 379.392 184.054 378.868 cv
186.837 375.547 189.297 371.972 192.045 368.631 cv
192.328 369.292 192.583 369.966 192.821 370.646 cv
193.11 371.476 193.346 372.424 193.923 373.104 cv
194.028 373.227 194.258 373.163 194.29 373.008 cv
194.474 372.131 194.192 371.179 193.946 370.336 cv
193.671 369.394 193.33 368.477 192.934 367.582 cv
193.599 366.806 194.276 366.041 194.989 365.305 cv
195.05 365.242 195.132 365.167 195.228 365.084 cv
199.435 371.121 200.147 377.935 195.87 384.059 cv
cp
154.099 267.146 mo
152.711 268.767 151.338 270.409 150.221 272.19 cv
150.088 270.25 150.045 268.294 150.031 266.27 cv
150.029 265.946 149.593 265.912 149.49 266.197 cv
148.223 269.702 148.895 273.769 149.562 277.344 cv
150.427 281.982 151.93 286.572 153.521 291.007 cv
156.742 299.986 161.422 308.481 167.092 316.139 cv
168.347 317.834 169.63 319.592 170.952 321.371 cv
172.682 324.099 174.763 326.637 176.728 329.177 cv
179.772 333.112 182.736 337.09 185.649 341.123 cv
188.028 344.416 190.539 347.572 193.515 350.348 cv
195.678 352.367 199.299 355.106 200.325 358.151 cv
200.197 358.382 200.053 358.594 199.901 358.795 cv
195.71 356.244 192.881 352.049 189.652 348.452 cv
186.198 344.604 182.781 340.726 179.441 336.779 cv
172.24 328.269 165.485 319.34 159.962 309.638 cv
154.385 299.845 150.032 288.766 147.255 277.847 cv
146.357 274.315 145.745 270.534 145.728 266.877 cv
145.723 265.966 145.846 265.073 146.1 264.198 cv
146.803 261.776 149.432 263.391 150.603 264.31 cv
151.786 265.24 152.813 266.364 154.099 267.146 cv
cp
253.562 167.596 mo
256.248 165.745 259.41 163.318 262.651 162.68 cv
262.698 165.534 262.751 168.388 262.815 171.241 cv
260.01 172.393 257.19 173.505 254.309 174.463 cv
250.44 175.749 246.503 176.797 242.527 177.696 cv
241.738 177.874 240.944 178.023 240.15 178.17 cv
241.824 177.035 243.409 175.739 244.964 174.504 cv
247.851 172.211 250.517 169.694 253.562 167.596 cv
cp
391.49 114.911 mo
391.49 112.877 391.914 109.851 390.196 108.404 cv
388.936 107.343 386.766 107.018 385.225 106.634 cv
382.961 106.068 380.63 105.716 378.318 105.417 cv
368.474 104.148 358.554 103.262 348.638 102.833 cv
344.529 102.655 340.418 102.75 336.308 102.854 cv
336.028 102.861 335.748 102.866 335.467 102.871 cv
330.185 102.694 324.749 103.087 319.52 103.216 cv
313.081 103.376 306.645 103.699 300.218 104.118 cv
290.586 104.746 280.702 105.384 271.189 107.13 cv
268.316 107.657 264.768 108.436 262.812 110.806 cv
260.871 113.16 261.955 117.244 262.116 119.998 cv
262.213 121.666 262.315 123.335 262.412 125.005 cv
262.431 127.028 262.511 129.055 262.486 131.039 cv
262.431 135.597 262.526 140.161 262.512 144.721 cv
262.494 150.245 262.545 155.77 262.629 161.295 cv
262.553 161.286 262.473 161.287 262.386 161.306 cv
259.509 161.949 257.234 163.847 254.755 165.342 cv
251.824 167.106 249.148 169.193 246.484 171.33 cv
243.348 173.846 240.214 176.35 236.759 178.418 cv
233.879 180.142 229.951 180.439 226.824 181.689 cv
222.071 183.59 217.894 186.409 214.528 190.27 cv
211.972 193.204 210.169 196.637 208.565 200.168 cv
202.971 205.571 198.412 212.081 192.854 217.572 cv
187.49 222.87 182.861 228.957 178.328 234.963 cv
173.584 241.248 169.045 247.684 164.36 254.014 cv
161.855 257.397 159.311 260.754 156.695 264.054 cv
156.085 264.822 155.443 265.579 154.795 266.335 cv
152.942 265.124 150.367 261.615 147.804 261.697 cv
147.739 261.664 147.668 261.642 147.583 261.652 cv
142.932 262.229 139.329 267.449 136.555 270.738 cv
135.547 271.933 134.469 273.038 133.365 274.122 cv
131.343 272.443 128.723 269.883 126.038 270.035 cv
124.49 270.122 123.148 271.441 122.068 272.396 cv
119.784 274.418 117.929 276.862 115.759 278.987 cv
115.643 279.101 115.795 279.304 115.935 279.215 cv
118.376 277.66 120.361 275.108 122.657 273.228 cv
121.094 276.596 121.411 281.008 121.824 284.458 cv
122.638 291.263 124.656 298.114 126.725 304.624 cv
129.07 312.007 132.781 318.599 136.378 325.417 cv
140.427 333.093 144.511 340.676 149.419 347.845 cv
156.829 358.671 164.088 369.569 173.65 378.643 cv
178.499 383.245 186.785 389.871 193.601 386.947 cv
190.492 390.683 187.101 394.014 183.121 396.905 cv
182.951 397.028 183.05 397.292 183.265 397.246 cv
186.254 396.615 188.659 394.112 190.761 392.05 cv
193.254 389.603 195.653 386.893 197.683 384.05 cv
202.093 377.871 200.283 370.045 196.171 364.317 cv
197.797 363.031 200.446 360.969 201.231 359.29 cv
201.374 359.237 201.493 359.132 201.522 358.963 cv
201.681 358.045 201.243 357.018 200.586 356.032 cv
201.893 355.479 203.022 353.917 203.889 352.961 cv
204.654 352.118 205.409 351.265 206.173 350.422 cv
206.695 349.846 207.317 349.378 207.621 348.67 cv
208.094 348.216 208.462 347.669 208.655 347.033 cv
209.664 343.714 207.755 340.827 206.573 337.819 cv
206.531 337.712 206.464 337.638 206.39 337.576 cv
207.277 336.804 208.163 336.029 209.032 335.235 cv
212.517 332.051 216.436 328.772 219.651 325.143 cv
223.218 324.651 226.857 323.179 230.262 322.137 cv
234.415 320.865 238.46 319.352 242.649 318.191 cv
250.609 315.985 257.777 311.816 265.751 309.633 cv
276.838 306.597 292.323 304.967 299.067 294.222 cv
300.951 291.949 302.889 289.74 305.08 287.736 cv
306.827 286.138 308.727 284.71 310.699 283.403 cv
312.259 282.371 314.073 281.714 315.555 280.587 cv
315.685 280.489 315.754 280.319 315.76 280.154 cv
318.526 279.162 320.865 277.438 322.64 274.412 cv
325.408 269.693 325.933 263.952 328.808 259.284 cv
330.8 258.427 332.842 257.672 334.854 256.894 cv
340.755 254.614 348.004 252.023 352.482 247.383 cv
352.538 247.325 352.578 247.261 352.607 247.193 cv
352.858 247.05 353.101 246.895 353.322 246.72 cv
353.322 246.719 li
356.508 246.653 359.692 246.551 362.874 246.363 cv
367.982 246.062 372.644 245.581 377.223 243.168 cv
381.151 241.097 385.781 239.933 388.259 235.954 cv
389.315 234.261 389.511 232.066 389.465 230.127 cv
389.426 228.478 389.462 226.83 389.482 225.182 cv
390.044 217.309 389.979 209.368 390.068 201.486 cv
390.179 191.752 390.304 182.019 390.618 172.289 cv
390.936 162.471 390.992 152.662 391.135 142.843 cv
391.195 138.731 391.354 134.549 391.443 130.358 cv
391.854 125.249 391.489 119.973 391.49 114.911 cv
cp
f
281.013 111.393 mo
279.574 111.012 277.837 111.355 276.371 111.519 cv
275.033 111.669 273.766 111.889 272.591 112.567 cv
272.437 112.656 272.491 112.948 272.688 112.924 cv
274.106 112.749 275.51 112.496 276.936 112.381 cv
278.301 112.27 279.803 112.41 281.076 111.872 cv
281.293 111.779 281.213 111.446 281.013 111.393 cv
cp
f
342.648 108.184 mo
336.08 108.031 329.438 107.8 322.879 108.192 cv
317.86 108.494 312.279 107.45 307.421 108.894 cv
307.328 108.922 307.311 109.084 307.421 109.101 cv
310.062 109.517 312.826 109.247 315.497 109.26 cv
317.959 109.27 320.418 109.331 322.879 109.229 cv
329.422 108.96 336.286 109.92 342.759 109.01 cv
343.244 108.941 343.104 108.194 342.648 108.184 cv
cp
f
383.166 111.48 mo
377.802 110.513 372.335 110.007 366.909 109.536 cv
361.312 109.05 355.138 108.188 349.566 109.13 cv
349.44 109.151 349.441 109.36 349.566 109.382 cv
354.827 110.308 360.419 110.027 365.751 110.443 cv
371.539 110.895 377.283 111.73 383.06 112.261 cv
383.504 112.301 383.605 111.559 383.166 111.48 cv
cp
f
267.743 125.191 mo
268.524 121.997 267.534 117.706 266.097 114.82 cv
266.007 114.639 265.756 114.772 265.791 114.949 cv
266.125 116.685 266.445 118.442 266.664 120.196 cv
266.87 121.843 266.782 123.589 267.203 125.191 cv
267.272 125.456 267.677 125.462 267.743 125.191 cv
cp
f
267.581 127.911 mo
267.559 127.804 267.386 127.804 267.365 127.911 cv
266.864 130.445 267.046 133.082 267.104 135.654 cv
267.162 138.217 266.963 140.905 267.51 143.417 cv
267.549 143.596 267.833 143.597 267.871 143.417 cv
268.404 140.899 268.104 138.216 268.059 135.654 cv
268.014 133.083 268.095 130.438 267.581 127.911 cv
cp
f
358.661 162.312 mo
359.285 159.97 359.045 157.208 358.666 154.839 cv
358.641 154.682 358.376 154.682 358.351 154.839 cv
357.972 157.208 357.732 159.97 358.356 162.312 cv
358.396 162.464 358.621 162.464 358.661 162.312 cv
cp
f
357.691 110.948 mo
357.286 113.395 357.401 115.932 357.342 118.409 cv
357.282 120.898 356.976 123.594 357.418 126.046 cv
357.458 126.266 357.817 126.264 357.859 126.046 cv
358.333 123.586 358.2 120.914 358.317 118.409 cv
358.433 115.94 358.605 113.366 358.024 110.948 cv
357.985 110.789 357.719 110.776 357.691 110.948 cv
cp
f
388.197 112.599 mo
387.588 112.902 387.446 113.821 387.236 114.407 cv
386.963 115.167 386.453 116.046 386.468 116.86 cv
386.472 117.055 386.716 117.244 386.897 117.106 cv
387.551 116.605 387.794 115.677 388.051 114.922 cv
388.272 114.276 388.745 113.316 388.407 112.655 cv
388.368 112.576 388.269 112.563 388.197 112.599 cv
cp
f
386.391 122.944 mo
386.195 136.156 385.672 149.38 385.413 162.596 cv
385.245 171.173 385.08 179.75 384.942 188.328 cv
384.865 193.114 384.32 198.204 384.994 202.964 cv
385.036 203.266 385.448 203.147 385.48 202.898 cv
386.089 198.119 385.801 193.137 385.881 188.328 cv
386.022 179.751 386.168 171.174 386.312 162.596 cv
386.531 149.381 386.844 136.159 386.681 122.944 cv
386.679 122.758 386.394 122.758 386.391 122.944 cv
cp
f
365.428 235.089 mo
362.16 233.568 358.217 233.477 354.669 233.504 cv
350.907 233.532 346.71 233.61 343.039 234.462 cv
342.884 234.498 342.88 234.744 343.039 234.777 cv
346.153 235.428 349.533 234.794 352.685 234.641 cv
357.014 234.432 360.988 235.275 365.234 235.803 cv
365.61 235.849 365.763 235.245 365.428 235.089 cv
cp
f
357.209 233.012 mo
357.604 232.316 357.226 231.436 357.17 230.709 cv
357.151 230.474 356.823 230.474 356.805 230.709 cv
356.749 231.436 356.37 232.316 356.766 233.012 cv
356.86 233.178 357.114 233.178 357.209 233.012 cv
cp
f
354.371 168.784 mo
356.109 168.593 357.935 169.232 359.48 169.956 cv
362.404 171.327 363.429 173.321 364.373 175.994 cv
364.203 177.702 364.023 179.007 362.712 180.548 cv
361.056 182.497 358.443 183.697 355.915 183.843 cv
349.826 184.191 349.974 176.39 350.918 171.367 cv
351.769 170.071 352.462 168.993 354.371 168.784 cv
cp
354.69 185.326 mo
357.696 185.839 360.794 184.326 363.033 182.453 cv
365.242 180.604 365.861 178.497 365.738 175.94 cv
366.708 170.434 355.538 164.643 351.508 168.627 cv
351.452 168.556 351.341 168.528 351.265 168.601 cv
348.671 171.097 349.115 176.234 349.538 179.45 cv
349.933 182.461 351.601 184.8 354.69 185.326 cv
cp
f
114.407 280.688 mo
114.479 280.517 114.299 280.303 114.124 280.316 cv
113.286 280.383 112.59 281.238 112 281.78 cv
111.191 282.523 110.548 283.366 109.915 284.257 cv
109.861 284.332 109.967 284.437 110.043 284.385 cv
110.851 283.81 111.64 283.233 112.383 282.575 cv
113.03 282.003 114.07 281.496 114.407 280.688 cv
cp
f
117.742 284.68 mo
116.834 284.993 116.193 285.892 115.54 286.56 cv
114.804 287.312 114.218 288.144 113.573 288.969 cv
113.443 289.136 113.638 289.33 113.805 289.199 cv
114.628 288.555 115.46 287.969 116.213 287.232 cv
116.88 286.58 117.78 285.938 118.092 285.031 cv
118.161 284.832 117.941 284.612 117.742 284.68 cv
cp
f
182.909 390.007 mo
181.688 390.181 180.671 391.671 179.842 392.491 cv
178.879 393.444 177.4 394.47 176.801 395.697 cv
176.762 395.777 176.807 395.903 176.914 395.893 cv
178.119 395.782 179.178 394.665 180.059 393.914 cv
180.708 393.36 181.316 392.754 181.94 392.172 cv
182.5 391.648 183.133 391.187 183.322 390.421 cv
183.389 390.149 183.158 389.971 182.909 390.007 cv
cp
f
225.819 201.795 mo
225.429 201.053 225.235 200.229 224.879 199.472 cv
224.8 199.305 224.583 199.382 224.529 199.518 cv
224.174 200.422 224.463 201.356 224.821 202.216 cv
225.168 203.049 225.692 204.114 226.581 204.451 cv
226.844 204.551 227.023 204.264 226.989 204.044 cv
226.867 203.248 226.192 202.504 225.819 201.795 cv
cp
f
240.149 227.823 mo
239.297 228.534 237.852 230.424 238.825 231.518 cv
238.942 231.649 239.162 231.637 239.281 231.518 cv
239.687 231.114 239.721 230.469 239.883 229.94 cv
240.075 229.317 240.388 228.711 240.641 228.109 cv
240.767 227.808 240.347 227.658 240.149 227.823 cv
cp
f
256.759 266.357 mo
256.468 265.829 256.319 265.282 256.264 264.685 cv
256.225 264.256 256.426 263.87 256.39 263.446 cv
256.38 263.33 256.288 263.256 256.171 263.279 cv
255.045 263.512 255.109 265.119 255.302 265.97 cv
255.571 267.155 256.564 268.961 257.867 269.197 cv
258.106 269.241 258.351 269.05 258.275 268.79 cv
258.011 267.887 257.21 267.179 256.759 266.357 cv
cp
f
238.947 234.024 mo
238.834 233.7 238.403 233.7 238.29 234.024 cv
238.163 234.387 238.069 234.79 238.148 235.177 cv
238.223 235.546 238.337 236.049 238.754 236.15 cv
238.856 236.175 238.982 236.154 239.054 236.071 cv
239.29 235.798 239.208 235.481 239.18 235.147 cv
239.148 234.758 239.076 234.391 238.947 234.024 cv
cp
f
184.692 235.375 mo
181.24 239.772 179.137 245.293 175.941 249.914 cv
175.861 250.029 176.037 250.159 176.131 250.061 cv
179.924 246.095 183.214 240.805 185.309 235.733 cv
185.447 235.398 184.916 235.091 184.692 235.375 cv
cp
f
173.873 252.496 mo
173.314 252.542 173.048 253.168 172.761 253.588 cv
172.38 254.143 172.089 254.733 171.793 255.334 cv
171.729 255.464 171.858 255.603 171.99 255.532 cv
172.575 255.219 172.953 254.795 173.365 254.281 cv
173.693 253.872 174.288 253.275 174.166 252.72 cv
174.138 252.596 174.001 252.486 173.873 252.496 cv
cp
f
158.962 270.599 mo
157.849 271.253 157.104 272.551 156.272 273.517 cv
155.379 274.555 154.406 275.513 153.548 276.581 cv
153.428 276.729 153.574 276.931 153.752 276.845 cv
155.03 276.219 155.993 275.231 156.939 274.185 cv
157.803 273.23 158.959 272.155 159.359 270.905 cv
159.433 270.675 159.161 270.482 158.962 270.599 cv
cp
f
201.378 334.39 mo
200.234 334.736 199.418 336.046 198.675 336.933 cv
197.723 338.072 196.893 339.238 196.078 340.475 cv
195.945 340.677 196.229 340.859 196.393 340.719 cv
197.498 339.775 198.465 338.774 199.442 337.701 cv
200.224 336.843 201.458 335.931 201.785 334.799 cv
201.855 334.559 201.619 334.317 201.378 334.39 cv
cp
f
205.9 330.91 mo
205.351 330.707 204.753 331.358 204.366 331.678 cv
204.138 331.865 203.927 332.094 203.751 332.329 cv
203.668 332.441 203.591 332.554 203.519 332.673 cv
203.449 332.788 203.464 332.931 203.409 333.055 cv
203.29 333.321 203.596 333.599 203.827 333.378 cv
203.978 333.231 204.236 333.118 204.409 332.988 cv
204.65 332.807 204.891 332.626 205.126 332.437 cv
205.499 332.138 206.187 331.786 206.147 331.234 cv
206.136 331.073 206.05 330.966 205.9 330.91 cv
cp
f
297.838 251.157 mo
297.713 251.047 297.5 251.15 297.549 251.325 cv
297.865 252.43 298.348 253.476 298.667 254.584 cv
298.983 255.685 299.084 256.931 299.647 257.938 cv
299.795 258.204 300.139 258.055 300.169 257.797 cv
300.299 256.655 299.897 255.421 299.59 254.329 cv
299.262 253.162 298.758 251.971 297.838 251.157 cv
cp
f
302.171 250.736 mo
302.057 250.608 301.893 250.748 301.914 250.886 cv
302.031 251.651 302.13 252.42 302.26 253.184 cv
302.393 253.962 302.394 254.913 302.881 255.562 cv
303.046 255.782 303.345 255.752 303.445 255.489 cv
303.749 254.687 303.448 253.711 303.275 252.904 cv
303.099 252.085 302.724 251.356 302.171 250.736 cv
cp
f
302.978 258.843 mo
302.975 258.833 302.973 258.823 302.97 258.813 cv
302.901 258.558 302.525 258.558 302.457 258.813 cv
302.454 258.823 302.452 258.833 302.449 258.843 cv
302.387 258.913 302.349 259.006 302.34 259.1 cv
302.334 259.142 302.332 259.183 302.335 259.225 cv
302.341 259.713 303.086 259.713 303.091 259.225 cv
303.094 259.183 303.093 259.142 303.087 259.1 cv
303.078 259.006 303.04 258.913 302.978 258.843 cv
cp
f
367.681 202.515 mo
370.343 201.842 374.054 200.98 375.786 203.806 cv
376.558 205.065 376.556 206.576 376.713 208.026 cv
376.164 212.839 372.789 217.846 367.325 217.017 cv
364.188 216.542 363.422 213.76 363.213 210.823 cv
363.214 210.05 363.175 209.274 363.13 208.498 cv
363.119 207.744 363.113 207.019 363.08 206.362 cv
363.245 203.797 365.525 203.06 367.681 202.515 cv
cp
367.847 218.519 mo
373.273 218.715 379.864 212.008 377.869 206.397 cv
377.665 204.888 377.191 203.382 376.377 202.461 cv
374.397 200.222 371.61 200.472 368.911 200.971 cv
366.579 201.401 364.074 201.895 362.578 203.884 cv
361.811 204.903 361.608 206.553 361.751 208.148 cv
361.18 212.604 363.129 218.349 367.847 218.519 cv
cp
f
346.274 210.597 mo
346.47 210.826 346.77 210.614 346.8 210.378 cv
346.914 209.483 346.515 208.561 346.254 207.716 cv
345.975 206.816 345.768 205.93 345.168 205.184 cv
345.046 205.033 344.84 205.175 344.825 205.327 cv
344.733 206.251 345.032 207.103 345.265 207.989 cv
345.5 208.884 345.661 209.879 346.274 210.597 cv
cp
f
346.514 211.599 mo
346.364 211.913 346.314 212.241 346.271 212.584 cv
346.224 212.96 346.185 213.455 346.425 213.771 cv
346.554 213.94 346.756 213.94 346.885 213.771 cv
347.107 213.48 347.065 213.083 347.059 212.735 cv
347.051 212.355 346.959 211.94 346.796 211.599 cv
346.745 211.492 346.566 211.492 346.514 211.599 cv
cp
f
344.543 212.502 mo
344.917 212.172 344.692 211.383 344.568 210.976 cv
344.51 210.785 344.239 210.785 344.18 210.976 cv
344.057 211.383 343.832 212.172 344.206 212.502 cv
344.308 212.592 344.44 212.592 344.543 212.502 cv
cp
f
287.083 183.968 mo
287.198 184.217 287.558 184.123 287.629 183.896 cv
288.014 182.666 287.669 181.275 287.58 180.009 cv
287.493 178.778 287.658 177.473 287.327 176.28 cv
287.292 176.155 287.11 176.125 287.046 176.244 cv
286.428 177.377 286.541 178.753 286.574 180.009 cv
286.608 181.31 286.527 182.77 287.083 183.968 cv
cp
f
290.831 179.16 mo
291.194 178.718 291.178 178.125 291.223 177.575 cv
291.267 177.036 291.409 176.368 291.115 175.885 cv
291.037 175.756 290.879 175.749 290.77 175.841 cv
290.334 176.208 290.269 176.9 290.172 177.432 cv
290.065 178.019 289.988 178.669 290.369 179.16 cv
290.471 179.291 290.728 179.285 290.831 179.16 cv
cp
f
290.718 182.892 mo
290.762 182.44 290.739 181.966 290.5 181.567 cv
290.399 181.397 290.15 181.397 290.048 181.567 cv
289.809 181.966 289.787 182.44 289.83 182.892 cv
289.885 183.464 290.663 183.464 290.718 182.892 cv
cp
f
335.229 178.524 mo
335.632 177.487 335.483 176.328 335.452 175.233 cv
335.412 173.802 335.434 172.366 335.254 170.944 cv
335.23 170.757 334.992 170.714 334.923 170.899 cv
334.465 172.136 334.446 173.386 334.45 174.692 cv
334.452 175.942 334.285 177.311 334.616 178.524 cv
334.705 178.849 335.12 178.802 335.229 178.524 cv
cp
f
339.709 173.221 mo
339.841 172.726 339.921 172.273 339.683 171.806 cv
339.605 171.651 339.37 171.664 339.288 171.806 cv
339.056 172.211 338.871 172.634 338.927 173.115 cv
338.975 173.538 339.584 173.684 339.709 173.221 cv
cp
f
297.445 224.155 mo
297.531 224.472 298.013 224.481 298.094 224.155 cv
298.542 222.344 298.167 220.373 297.972 218.538 cv
297.799 216.926 297.73 215.234 297.044 213.748 cv
297.005 213.667 296.876 213.691 296.856 213.772 cv
296.476 215.343 296.779 216.947 296.921 218.538 cv
297.087 220.389 296.961 222.36 297.445 224.155 cv
cp
f
300.68 216.074 mo
300.782 216.141 300.952 216.145 301.053 216.074 cv
301.546 215.727 301.473 215.108 301.424 214.563 cv
301.373 214.002 301.355 213.27 301.01 212.806 cv
300.844 212.584 300.561 212.576 300.397 212.806 cv
300.044 213.303 300.15 213.988 300.181 214.563 cv
300.21 215.092 300.202 215.756 300.68 216.074 cv
cp
f
215.723 195.403 mo
215.698 195.269 215.479 195.269 215.453 195.403 cv
215.164 196.942 214.719 199.34 215.805 200.656 cv
215.952 200.835 216.27 200.732 216.32 200.52 cv
216.516 199.685 216.22 198.779 216.113 197.939 cv
216.005 197.085 215.883 196.251 215.723 195.403 cv
cp
f
385.419 207.786 mo
385.357 207.638 385.126 207.644 385.125 207.825 cv
385.099 214.714 385.314 221.612 384.726 228.466 cv
384.698 228.785 385.212 228.933 385.343 228.633 cv
386.629 225.684 386.197 222.136 386.061 219.003 cv
385.902 215.369 386.835 211.212 385.419 207.786 cv
cp
f
357.068 238.371 mo
356.276 238.712 355.759 239.699 355.288 240.387 cv
354.848 241.03 354.422 241.714 353.935 242.317 cv
353.626 242.7 354.095 243.181 354.477 242.859 cv
355.119 242.314 355.65 241.732 356.177 241.073 cv
356.74 240.369 357.493 239.597 357.603 238.678 cv
357.638 238.378 357.282 238.279 357.068 238.371 cv
cp
f
272.079 160.461 mo
273.163 160.575 275.115 160.795 275.837 159.757 cv
275.965 159.571 275.825 159.343 275.641 159.276 cv
275.099 159.081 274.482 159.333 273.925 159.406 cv
273.315 159.487 272.69 159.527 272.079 159.592 cv
271.52 159.651 271.52 160.401 272.079 160.461 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.0.1
%%For: (Alex) ()
%%Title: (16_1209_whiskey_11.eps)
%%CreationDate: 12/17/2018 7:58 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB7'3hdd[/0>Z^n,\D%k%?GM84is%EO<riA5MQhWd\b"eUmI/9%!.hu-8aZQg-RTC_B$8ED:0fHPX&64P-lS(ceGLQTiFLL!
%B3@^oa9ptt98rf's&N3^N(^iAN#,;9=X(q-J<M6ld=Y"K#i!AD6DptFg)8'bkcIn0XI3*>k_]8f)P/ae$r8_+SR/@b5<R>^<iA?S
%84n8$)DsZl>'6t7OTGplnh6g/<=;tr#Pa_&jd/pe5ZteVL?V"]LqXch]/t"m$/g=bW%uE1#>%s!<?NA#JADJU@0KO%CcktfAY[ea
%['jC$Si3jO84oU$BD&,k+2CuE%h&DR^dCn&056t\Rnh)Sa+BB>9b2F+o;%i]BouGZLEVXc-MB[r)lrT2h1,>RrkFNfnIpB64M41W
%j('ob*.t!l'&sQlGg+hMfFJ',A:mPg)4]1Ac'm57aVp("'B$uY.\[oEEJZo3\d`)YW*o+"J7FCCE3^,73,#.-E^8[s-Lao`B6p]V
%ZD%;9kWaZj,@)hbQ7W.MX.;-IKV]G%#62*IQ^sR_>r@R!0U!_8PqLCN=k%4PI(ss4V@e)mcqaSo(cfhjlYR2MZdutC$$qim.-I/t
%WV07\;.],\dS7E;1U"ngrJJMq3K/hN,Y9bm*A;b=60U"r$tRPA[I*[GSR<8icH6(.JG>unUMMc=JdCZgMRHn7>"5bMf.uMdkT<,[
%5SA=-QUcL$3*)9nNur19J2-H"hWWD-E\F[Ra8TKKB3Ca+U/?l;F^1UUIZ;4qBY^4>R:Z80rsO)V?$)MnT`jk*DF+H#JK=da^N96F
%H-+PsnF4d[43^a"AH);;NC_I@l^h%MTmPuj%sbbNfcVunCB#ui.XXr*Ffhhd!h.NlSBtuYWj`A$iGNMrhs'o>0=4F],dcc,kMP2*
%p4AaSPI%Ut:^l6.3,Ud1<O'.-6X0,hqd2;L5nCfmq]/LHU@Gj%1RjDb.A!"M1Gu;.=ZrX)=6XpRU;<l']0o'#II!n/OS^B/L%I.1
%-kd14O'E-j[4>WboL?+9l^`LlcQ&pX0K2/7Zs(^&>?\@B'Kf6ne#IY5VHN6X52pj+,j-uS#[=m'i1K\T=Yj7ShCq\q#%Z@7eF`+R
%<a0dWWjql,7_1n]o8sA!@@.&AW3jg9B)h=[en[-X,^;:EULXac1S_r,I+0+U#1)3Uh*k'Q%8_jj2ZBU6fcM,Glr,,n@A>$991B$]
%#Z%m=[.XFT2![m.@6N;$f$qgel!e9%?&C:Cf:7$-n"4:@=GB#`?6=b*Bqkp>e,/J<_RJ:+drTJ(aQL'15]9#rISP,%nne5$Y;P73
%+#maJq+b-!7CEY]&^/UWE=*GU<j_K'_;IF;.8\C)L\ReG'?Pua)^_gk%Zc(fZ]g(T)WedN^MC6;h5!Gp+b&#[jG$^5\1jf]m-Q6!
%)+hM0C<_Y0_G2H(.(Z&YOetPUb:ou\af+Dm\^GXe8f)KUan]?ZgD(OSfQbjh`XO@]?'+St[Rh=6-(H7YdJGV3T!P:-)eQNqJ;'E8
%LDI_DOOoIA*5J/snoBqnC38b*6<j?C'i@`eWJPGA&LWd-f33LKdbd-4UYo_p%cL3A\9>p8:F=B8>Fh3%Fl,WX-93*&Z3pG=U1gTa
%,kX4u40rN`S+U<a8C(#)b;&&'Gs@R*6$IbjO_.P$2"8Ok/4gq+[^V7D(oIlL]KO3%(*Qhe@hnW'ROrJGOXl$\^0aD>efmtZMs^(n
%AjKmiaV3<`lQo>?&^&?t-mpQ4\RAAOU"giV>D.%sR8D1_#+WS-c:*V.&]r9a,Zh9.OI"V2Bs\Y\gajnf74bp(jVG,V>fUjrj[Ae!
%oieeu(!RiXUMM6(Y?8g[3HGi!ppk;SmC4D#HcJ4t^lS]@5AOS;28Eq6MfJ]>K:K5i't63NVaX\$eer,"ram9,9eYF$la0iMeqf?a
%DRTLU(ZJJ;UHXQbbk.2M]$]QW.4T@^gLKBRQWYfGo_'ZE@?1).Ra<sZ]A1@sJQBf@Ba$Y(ct[H=(5(i"'"8eU_g"eY5[JL,;&LI:
%%G9"!mV&D@$^L4jaM9%dl-?ee1QP*m(Qg-Zh5P*hb\XZ?>/LeL+.Gr`5/oa:M*IG@6iRdMr?cS(E'VbRs-q6-5@#u)cRHkoX?/1L
%4TlO+;=VuP^q\%4aI#GlIHiF*[/K<fOgV[`WGQ#*dcpRN-%R]r3bH)]i7^!^Du2Nc;rsB(%H,)S<6$9qS;Vqh1[JpYGrISLe"ab(
%3fKhTJ-L2*f>3HdX\MaPC6m8MeFg8>3p^*S`\1GWRCA'gY[0Mi*)2p80#'*#IuF-/Am<$5l(+.s*G;r`erc/;l0Z"<B]!koId&C!
%VgK7uCjbV$;p7(6;+oO@FA\0&*+\o4a^Ms55pfZK1\4aS(GpO.F%gDc`I$m9<\ujTe6j)4=pnLjn1)+i(2&*"ULl,lR%'PGS+ZQ.
%Oe&N(CKesihCRkWA^=a$Z;>$eYK";/o(l+"Q+;1fB;*!;*FJY)S0e+DgY501AUa@I5Q!._1cP1LT7V3n%(!Z&^@g7Z0$YoliS4;`
%r8BYa]0Gc(eXmX0rG1<XT@rn*(W/&l(DMfiUZ5>+DVr-pmRnA!KPL5,=aUTq+R_Xuk!fB`+_KjeAX>$l(pStLB]uk*?6_[riMNXF
%Tuj\*Mmt/mI@\*59r;`Di^TtOdgA/8r6(MZS4f'ps.(C\LQCf;a2r*h5.YaE]8/8F6tTc-]1><6NEWN$d%-))*qS>fs2.oW:/f3\
%h[TI!F_4jm\QXnohs,)c-Cr?W5$[/hk!k'8+m,ERos;*]C.:SB>TEHki3\#!7d,FCIFMs_Cr:)!aRs5#6Dr]9U_)l<b)&54Z<W3$
%gN6q@c'_Uk--NC%3>"m1VF?9:P<d!=PSK)\rjJF<)=*tk9u=oh!mX-3Rlc`\f!NNFC-T(t/k?!FeCH1;VM\hXM^6:G3I/=)at^3l
%VF?@Ma2b`?\q?Ug$79\c62YF/=`SdW]O]N,mZ,'6VAr`P%AW@6<c7r;)17'pg&0"P,g&d`BSGns'#b;7o9-hTj-(moQ=8?'`j\-g
%ioU`P3BW2iNINagYW.Ore!Y89lSC2kB?nht\8X%_j=H0=Tpkqd.,Vl`."%r!-uOiDS4-SN7JSmDc*ofn_YsecU:=)F1U#@GB2N9k
%UL'HZR2PtcC+X%GX+/a-.#%,3(<$_;o<R]^aXYOtSuH_;Q=%uWdp1)l^-'`l$*V<?bhqLro<T"CF;E>q_7."j0Tpa=P<32Zro":5
%4PDGI)8F-b5?#>$m+_L6neZ54=m38skV[(Jf3GOfU":'+D5#SD6E_[dJ1TK`n)^_:\>Te;[a8dhD6:6cf"REU[a8asXnJC<C<h^`
%b7s6rZc3Uo/GQh'fsrR40"00Z[un>U7P7fIfLCd91a"Ruit5Re7\iFZ\iPr:^n$cMp7M0ZXc2e*?H^j*T.a,fkAf'`fk;)mP0k-H
%>Eo:<TpiRDNk;m8_1=\MV/A0\At$hP/afI'rk1/Go.Ca.c'96+b>8t@U&;T*67;OGo7%F2V:Wts>Q/QrKJFREi*etmj'bCObBVt&
%&:B64L>[XGf=^-!]a3[L2nmM)C\5;he*gWLFJj1Df@:CkccmV^GNAZ<O7?!p4Sl85>\<sMH'^U)f(F+#X>eB>`8Tt+3'Hpnp";/:
%6**`8>\X9UahI&MHAlo"&8>lsV[FE_*<R4QJY-Duk(8>-F:Q[5cLs</dCIdVWa*e(g6K8+G%3i#coSa]q.JPBIa+h8Q&Y]1QS3dq
%,<:g=LbGpug`-N%]]lo(s"<TOZW[=!_Sq/6-Hk;Vrk%r2P"#=n;?-Sbik7eZG>\BGe:7Kamh%(c*#!AW8M4bl1R\<4nU/HQk.@Sf
%/o&+-p=e;Z<n?A4kQBI9o0lr0U.2-3C$@@Y!R=icc-H.3@Tq:[e8$r5a(,fu7_-qO"FgHU'm2h$E.b-8%5(V*a!s@`j]3i9d:Z_Y
%c+9aZ2o7L/9!0UHAB5N(Z:0LaOWjU;?HM3i@M]ofImMDknG3o7138c0ACR@bPq?9[KYU716XY_0Z5NMp0PbtrAEh'pBk`R3FmVWs
%C`<.TEKSPrr\Wo2p:-`M*8"A!b\9YBjFSAb#2`\JcQ'Gn:=I,j'!e.(C7OSBPW0+/:2M"7QXUKJkSr\+fL>@>VNVOmVI"f:`;4%`
%%SWjHmR$2Tb.j%Dr7GPW\!9,2`#h\ZCVN8F^W@\iZ:MVZ&hf0]b9HJ^8A$Jd0>BnDI&"W<SS"RP(HW!lnh5p>b7$n6Mo<e?&hh^4
%L>V0accdYrZ?F#>f,:B&HI9\*H'S(r8X;ffBUYB(ES1I)4jD.sgs@b@QVG!#W+"71RrG\DMp!HE7%!ibG-c*-J)O1K9Z^@SB/F+7
%^3sE0B3:kP\oD!1`&&FQEH)Z@$ld5?L0HHP+Pe!$\Zq-P)jn@k%8:,2f>[,MMqaSq-)U^1H]#*DX_@]9r(,(VHRn!mX](.enn5rg
%R/>Lg?2RN0EL[LZ39KhQoL-k3%5**HPp"?Fp6^-mAX5q?]oBY?dYf_Xo"=Ac1njHS(^']$ebu)U^oXZ^GQ"f57>/+*d,mGWqhMA;
%SPCr1B3$CD;:43jp?EerN?#bD3BrIsX4*.ghR&+/Z_@h:h"\W_FFW*Yi?f-3A!+g!M+Bm8j>#dFVO@<DL@PfE(iF"hj=t7)d[dj1
%^W9n9nee^A15e97,*0"MA'A$rUTM'f62'.#b_:QAkf]3n@E>m:G%"W^@j!g"]UVi?onr/;p9]WsF"'eX;bn4`g@)2CE[";;-mmm3
%-CDHsdZ^!rhU*8G2^-$Lrj6>h\4DY*c':[C9*8=rSXYA'f/@<SM+%$JT@ro5mV75kdEpmITc(@RL^CTd]p?+k7\uJ.DTk_==a/mJ
%'=;INni\XT>29!3hRT$A]h`N.]Z"/J_^_C-=46`(5@:rZkZ9'ZEZH[fWIa!OB2W\gqh^f4_A$?aEtp%G8ZMK"06o,^V3@b95EdM_
%X4`hZDeRJITeGPT*VseFcC>mNE^S!.+8KqE_Y67`orW<*/e553@4IlE^:F"s=KcY-NGhUMH2^8cI[^9#,*lHOEmn(lMeHu?c2Dj\
%3>Y/7&^AQE3K%QgQ:P+GF)r;F\[Z*W%\l$#<%W^4=U=/=mEqq&34B1V(?+$mS6LYfh`..<1!O1\dbH7PfoP75mhO$V,%jY[3C!BM
%U,dEcI.)=J]DZDoMdU1;+iEq>*LAG+ccOMKc2G<gMu,4FpI`Zg]b46hme\E9J*)?Akp4Jf&FRp&<=\/,>+ll*:lsA[$:ao*crKYC
%ec&]mP=`+NVBpF=Im/0rp5r!ok%,JX;=N^g(O`p^k$PaqB',;IDE#eV4.)aCCQ[pZA)Bqgc1g\g\c.ScCdE.(#Rk*:9@-p?AcK8P
%b\WAJ.<cI&%(DT>F[%@YDBc%45BlPq9K,!=*,[G^qHTPuC3?V@<m]Y0jWOCDJGi\_\GfXb\ZnfqIq\SG?Za0U0(tn1VbuomWl+H_
%VmWalMqaos)LQUomWRM`M^5$mVf4$0YB$8p#-k&'mL#66^N(Md$(T^=E%\i7KkIXZ%&Ttm^@[o-F5n:N#U[-9Ij(9UfOSah\M03&
%fd?]3RLT3g"SS<9S>(^9oF%4aKhq?%:F'`EiOO,h^0M*G],a`IP2!3[JelJr^Uc6S$t"-^:#*8rLbp^RE^RaSX+pmmi+Lc=Y)^C;
%TRi[$F`=+$X&E!1RUriVFktTurc;Woh'[;Wh`?4q6c_-[S^ED$+lpL"cEKX)FlV]*Yfs[uFL)I`DB.K6_nnCY6\$os#1C1N=kLai
%[uL!H6!jKAi2et&^IEFkc[,N;=j3^1I'91#rmj"@IEUMoqp+rZ:;#h'*fgOW/gd#a:!S&%qk$`XHB?6a7R"E2+'lg1fO$FQ\dkEV
%l]Y7Po;F2))Kb0%I[tc4''+2,Zd/oHD)Ljs*5:lf`Q,03,ArrsB^Y?1n:-3d1Aiaen!Up:j4@k1VF"&S?[<f;R_+'00:DTYBC#PS
%]Zia%j9s9*bc:jt-/\jdIb=nFhkEq&#AZ-eU;je?Xm3IhVk"4WibcPXgI62P:k(EXI9Y.%Uga4rABm:QKfP3PnjQd+fCWjfq8WO&
%Brs:]`:llD,s.+'j]ngJJF$],$Se+m0ftn$0k2$BCn@FR3n;+k,fIN#Jod7/BU.BNP/7XMr3o=II/-3`REp2,c1.;35FO4QF?SkW
%l=8?/O<\\+>&=l1r)J#J*3oE!7kB/;%)2K]8?7jebIf)=`SQY!&X\BIQZKKqJR6D<6[fsqe]UG"q;f$bSN"YHKg*]03q,(&I_H(7
%'IfJrh%R1WXbu:8CM7;8nt`B3b]2&u%t,AFC,Mb[m@TB,1X4V`r9Y1J,9H;iH33enJ;D&+quY<dbRZ->2oAAe*#'cF=GA"!i]eDG
%r:J<2?_u'm<]c3UK"#,LSi"Y5%Isu&jMh:XK*GNH#pe[RUkER;XANoeoH"Y*8`QH2OY-Lo<^XqSr!CGr.W[jS5a#,J(!$Ua@.6Hn
%=@&2=L:7b2dQR,Cq\-^b_l#GDr;]lCc9)V5N2QFi4M8Vg!2C6:1?:\[8uts5<Fgi:XNCC^BJmKZegVc1r)[LEnSedt[+Z9e&d,%n
%N8$RZH\2iXqd63SMGkHQj<?;TZ$VLFUk#N]Wdh/8jW<GBKR]bDN86cHg1OEH+^^G,;kS>"DEb3.7JVic$VH7<bl4^,bo1cus.%5H
%#Wci+HdZo?d&BBC'A(sROO]\g/c`j/^CHW;!''?9Lr\PX*$G"BgqVCa5;^MBF0tf7WB7B]ZE_to^&5$9XjBIC!g)rg`&pD*2Qag!
%F3gl!dD0,\Rs_d^E.Oig]mWY#idtH2o^/%h[UD'@]9e%L1CI32iZ1j+-=,,N;CMN.,<keQ<aXXa[=L=i=$+=El:uct^TJ9&^UmPT
%LcZPBNcZ$tXgVB)!VQ1[75WZFclGLn$Auj:V#D>1-9M$rf"XA?n$SEbV&qK9hfGI4>;`2FIFPb4Om1/fY15_0f\NaaP"@W^cZVKc
%F7n"jA.JP[\",]oI[4R+!%1@\6ina-RjQVZ3?s2sZ5QOb=dhn4`&$e&&i2iiBUu)9IR[,iCkIL_WgDFRb:$03aHFYmCc!rn"OWAh
%#u,m-r#\k)h^))]c6Nm`VH)4phgkd[-)7>eMEN@):@st,!6g8>!sH%iX/reHX2<Xe.i!7sk/TsK.@2aAGiA>gOZI;3G>dBfT,">m
%TGF#_=gms'bP9n!Nar->->8pNqTWX,W#L5t9TV6<B7iB[inf.QBJlRPc4T="c3/-N"]V\gojTBdb?-)@>urk3BJU=/DCd0Ws4itd
%0J%)>ZelE9,hRr;'=:M@f7nSE2&Z]=b`!W%dEVH1djKb`HR>V#.o]F"S#M7P8j?os*d,/u't*bF(\59q)>.oDB";Rkp0;H,#PN[O
%Lnn!G)\54m2%-VMnWYW#k\5TNmA:@QJQ!Q0Rao]QRT9!A+(Fe[cp7WHifAo5l6_['=\j6:*i!;t['oDEf5snIqM;8"RT`Y!?tT(,
%XoIP3lAHpF]Jt@hm(iNG&sMc?G[e]och!OVD'*n0YDsKZ@90dE(91uE%@!9Ok-/nqE&6GJl.5=7-`@!lp*>Mb>K[rqDh=7!L%!9\
%>9T#@NSh-E[_MN!^H5WJocclWf+&*,AZU4.B6^e9^Un!<o?37s95h:7oUj#A,7DqjFq^gbe66_FZIP$!;?r?J37bVnjFkBV<>uWP
%Vs-e(d,[#K5R?UkO/"Zo0\DfMW_==gl#GkG5c7e\gsO9U-Y#&]bTGop,prV]N#I)61Rl[F@e\hic-0t29>0#X[JFt?^gt1BAJUb)
%^r@"'&.$[=SH`D2f@9B)Cf41^(5ELf>,s[mCGj@[?\q0KSk,brp@pS8^aR=DHn$R42F"7oNjL]`)MlbB<4kX@O7j*1\>Nq)X5PfE
%?op)`.!dlF#OTHM03Os,?6!Gj7r:6-;sMJhen?!Di1njAJ]Ke^@9;$=L@/cn[d33m<X:A[kIV&N81N;le[g?TX]r<lnC2%4XgVeA
%Hg[*U:aYlg^el^to\_a[J(JIA;,_cKQ%;5j3\8GBqB79b(F$2B5MCMfnHgs#JcT,SnrZ)g::#e>VhZ5mnt^ceXeoZg7!=aFm-6..
%gS"4Z5<9`c6jin-_otAe_VW\][8W^gYY[-ETPCaApBPBn1,-F"<_0t8E6snFh@M!o_)&#ngN-j]MWTuN7j\Wh?8[[+5#O+oFf#nD
%qf:o*0rXIE]=D\@Sl?_Q=LODHR5I*Y3-)Z2UJU8ABQAHckmFbJm@6qFNB,X^;u7%6*]'9M4]/=X7H;oHNoN:SpJ8"n<r3n-91"Ti
%-^23YiQ6Z"jAEL@WF'D[GE)0[=p\INMYU.+[bFLN;D\-P2&$!n1[0O=kb]*h6,C-H`=0;oP?P@V%bDue!e7:j%IjQ7o])kFa=pm[
%EB&73)KK?KEahE0KBdO*DR;6]CGWcO0=+(AWt!#Y$TN<],C'jh1napS$iMDL]`M*ibVi:&Jmf$X5G0$nlAfmtV`baDOKiVFZiV2b
%ZrJBq\aGjT+AW2GA=Ha'm-0W=rfc#KCUK:(%ZQ)*oh9/`*9BI&kia1LFDJqB.T(,mJ&_+abnZ]Xbu8Qf\e_3@O445`9lfbC/05ln
%MrUGTM]?m].,_UC0"=ktOHJ8$4:E?ndgiH)b;.+q+,B*M/Pg2)9\Vr%gXo'_UU_=%T>S@kQ5Qf+AKSb:iQ2)#[.Xal3/fmdHk4O@
%ja=@.BLM%*R@^\\,DI6T+@PS3[PngYP6KDblGX?_p["E>mD7rqB:\]@1>0A`fq"T`%\qC\AETD-K[Bg]E7/u:.GX/8.!M,^5QUR,
%3SQP0WDF+I?!"@<l1n64BN1A652ZfuemG-MZQ#$DZn;laSl?m\Z)T)F\Ua9Vm>'iLD#0MRlM[r"F@TBZ!qOHQ^WC_(UL?3>U2e'U
%XKEZ%)HQ5I0ftB3,TOLKnQkYuIfIe([-V1Rr%>P5%G3T\cLdjYWB4ShV_S+&4rOO6KMeM3c!k;u7_tUJdF(8>@$C/"!qu\qV723k
%q>ToV@GH_Erjk:e`u8/)8q)$F%8eerK(Tcl6YMcCS8_oU0rX1EW+-BIRt>s"46#[*@c'\O1%YTJct&c0MKo5c()TSFN`IBI,)2,j
%jiA/cf;jJ6AlW&IW>)"\>!D3Gc--F`7_>f\5I,C\4L"QBVJ*4.:.kho:GOhgjW?:V?E8W;NSZCc!DKV4Ztl<$)hL#YM8u>nNgGbi
%Rr#nj"u(O'e!biF>K#DHND?FEK[`=iAJ.lS%(jn8IAR>W?GYpk.OMrfA(RQUQS9fJ4HVSN7KKoIfW:IkT:_h-XPO.qRdEniJhYP$
%J''m2@t7qF>W?o62F:qphc+OQ-6dWR*i4o/MnI73\aCkrGmKK5aJZs#<lMFaaddnU@i0,0TBcSna)OJ,nrnhd!-*md(4R<5;/[?6
%L,Lfd5)_S>k4QaE>#YNN@YK0=H2IBk"OT_X2Qp8I(W7cqT;Wt!_`7GO6M4N7I%R2LgV)G.U@4OWqHSjCSb8u])B=72bE;AHbGs^H
%gQgg$7&eQD'PioNF)ZMBJsbP4\Srj!m@'$cC_f7',2s@%bF"nHij^mU=&l2.JEKC"1aGrY'O'7ip!*G+kF1V46DO5<Oq=F$Xmkoq
%,[?4--i[mNFLdi@am;Mer+IIRk,8HBjAlZ$#n2pNbAptZa#H6l]r\X=B@(rXd<]^&r6D]IeBOO?1CnhRSGs&`TVdpoc&ksH00VeB
%FfR6YJGrMuBS4DI2iG0nC6"lMQR.eEGG.QRVus^1%+2?7'nHgmA#D"g5!DK54V)d])mE<">806rT:WOrCM8]1,&BJgg;#=-"(scZ
%/tU*\M>Jg>31:EnL45Fu]_1Pje\SDT-^c[sG(nJp9rhV+)'q%og8Z&c:nN`ne7[YoenPl]M=.$XNfuNjda]8Xl=2WB!oMGJBV#t8
%q(e9%kBZD-GKq2t:=SJ[80f-IV%bWoMc(hp,HQ4)hF'lY*(OAKGPh8bHma?<L6C8j[27)RcB_9%d(.bDh([\CiTN$:9S_B&OZ\!g
%;b>kh.`o*9e)m9Pros)n^;dkCXn=!DGN3oS\lH\t7/G7/s'QZs(Ubqo/::R)n7sX#5F$$R@J'^$/1HA%Y^T,UZrTHq0mrrl^'Pn4
%f?)X_CE[hZ?UNmiPZL0Vpbbd.F8(A2IP$Yb&`nU__M=*sm!LadADTrJBlag"k$XRoog!%,^2+tDdcKG&opge5gZR3O&MmV$*W/O,
%.`MRWrYBnNZfGgUVH`Naoa8J1'<h<%)u)^O5H5R^.X?r"V:;Ft2bC+F&X'EIe)$_F^!s,/ni:;2\Jt!*!rV<!(*DB&B-On\enQrP
%h;WtB)c)=g9(4!1>!H2MT60j@_DT2+*kE^Li/9.5.pP3UT5jCdLEQ27c!LDFk?;rG$;8gP;3l8%]6c0hoga3UomL1k9qXNGLFb87
%iDn!+_QE)d"Zi6X=MUKh-02K&K`JA<^lO&rooj$==,ej';@o0Cr;obmQi.666ti;2f`QqX4:eZOdC];!aCXmL/Xk<p(<DFm!p0/h
%?[TW"QWQ%^[go0odVH3./8g7#mu424UAE]C;;SNi#7HE)eb;Vj/9d8ha])H,:(#T-A+(i09:VQYiV.tVlq<iqcR"%:;u#t1Sa,a%
%f=0YGA=H5Oj'X.E*H&fSEY7biOR%u)J[jPtO;%AbA2G8gJ#i"-P^J'fIpfI7k&V;1[>r[l4L<k#SD5]_?p3Cp;87GI&5O$>ld/qE
%(9[2TR^efQjdfG/O'%)Ml`7$]\5APENa_9Q1Qq-M/&#\K.ih)]bO5hZf(0Km+'=Der/Z4fH?Q_]]Wh*er^he=:[dj$lh<%#'^FPO
%imF7I)nutMGcd@bHZ7c[R4d/#[^l(<jP;r5IJ7U_eL`!3FEIW'hRsk(ph`%%@4KKndZ)$($b&%;$9n$UOF,Tl95@<hn+(Z"gq1H!
%o%m@aG4F9m>/X^N*b5bo)[EbUmq*bZHFHX9!O(s$.I,a'I_POP*trSL5i09?h'j:i?Da=)n?OWKp[ZMp'eeITP.]f.m]fjI?@MUj
%m#0t*_IpM_9aXDIi0F&i)_-r=A\<A*2mRXWs#BC/\DA`__[Y2[N<ZlOhUoa:M`7nQXa$%tpTXC*[JB#\V45Zb'7VCh4k3S?]]TO6
%9lFW<8pN)\&]:)4SI+.'k4ZrEh0E5qhO<1*n,:F9"c%B9]op(T(UZd%CJN[Yk-$GEhVrBn`EOh[T6`#bf(N.rQm6N4Gk^V`dt'mT
%Hf=,CgYV(QQFnZKZaAMHSh7'5Qe.N].^rJP^=WImjDV07/hq!BBSgBJl7gGFp_Gtu;U3lQQ9rF-j3mq<[_!6^mbX:>Q-8Mlo(b[U
%8j0"c9;dh@l(rLl9N\m->r7kMg=Nm33sI`lN7=/Z?F&FSV0j;</qm3YP&UXGe<cY#9?iEY_I;0a=46Y;ell3_'+QM8Rn!Bhfq4Oi
%Q<F2^=VfV6hm-/3>0FO]U!duVo'LldIX[en50>Y&jjT^ahK%cK6<MOHmJ3+;Q8dE^T@E#OZBin>A\FV90>DKSD_TCUj"aY<DQQ@M
%.nf,Zd`VE0XM!P>5-1h>Tp)r#d<el#;'00%=8#FYhN_35?!fVO,Q<rahi5-d\_YtD\HrBL<uuRg1FlXJq-g+AG#DJB^:$'Qc1YRR
%eJmf?_(_p*\*'Zi^<ZT8.XS<U<i'uX\%6q#[_E_l9%hb4b!fn7lst$U2(JpKX*75(gXYIjomO7CAk8t@0<^eoAuSU6o+j2lD7s,c
%=:;4\RqmVg'NtlVfS?l=&_V\CedePBPI7aOC1Aj)[_9.nIrUi_dhkGS/*l34=sJJ0=R5`@Dq<ND2u[s7^2pn=>X&DC6PlH:p#q5]
%XJaM"id0a,s'YfFfP%EPG:I7k-0`^a?9_/tXLG7h"4W(kqg71Z5Y8ZFOAm[=Z1k-&2\O6ZmD^%-aGjFL]=.8)W"h4Ja3E(m>*P.-
%g<l+\c1S#Af\D>Z17Rk!l2Kh]F"=J?p`=?jAcgNBk3[0TB(ORFSno>B3?2Z&]r$TiX7:Dk<ab<'GtWI@^Mb,4$.Z.&IRW/*=>R@e
%4&^Xc![m5PX(ja[CphNS#N+ZUq8pZ+k)1m7[$:=(?^[)GHok[+h43;)5&I:,l?bTk!l"BVV$t7XDnIVk\%-&7I!aI`5&;TM8Rjhf
%BJ"/[4_=EU_CM82Y32iErhW)elM%LMqttK]+7VkHhf&E?[?Bdh(*@i%lf66X^DaV`pcISa-K'eGS->^rHn>o41i\nuan<YJi;.P>
%-(pf6*<g2uNS;\+0u(?\^V%eZ.)fb;-e:;(hFRt,r6G8knad6HUU]oeH-S2b)j+E\^KRcq#GRMpNn]t5k.2PI@Ib5Ia>@:4Fu?[I
%$H'+7q;r1!QeeaI.?->tY=t?oo5)W])b6<3DY;hAE89<]O4uT,2=;a`I)k&\"V/);Ss?k\e)b_$1S/IQP-Fc)a2HR[4sNRYq'U;2
%beK^7'k->Rc+l$M:-7SOp3,OTiV:^-,i!:>Zj$DGV'WMDQ'UX7DRDq+7U?]<A$K&(C+$\D(Aq`5I,EeDV6-l`JY]NR7oD+RPEg0T
%fbZ)EgSd^4lJ7oAodEA:\lh_$KfaZG\WsAm\Z/oAbUpA*6t:;(^/9'7Nge*^/1N(Bqk8)M3!m@!bNU^YEr&?sNNQPGeVch,=+/V#
%@-9&PgVGK%mNNKA/pTa2*?5:PoL^oQjS%Re9PEO`Aqkuk@58OXYI?j/psWrUG]UM=C2;&<0!hf6mY54i`bqYO8F:07j6#cVl2GhO
%IrH4YgYXJum[\-Y_VWK/b/mu]=QK4c%o9;*]m0Njs86CX[Jt8sL*EkZ1n&1bIXeGFY^^OR*Mf1&R0,%O*C$csRMt$S+7=e,1;=mU
%DQJ0%`Hnp0nNK0;,J<_X6k[JNEoa*F;i85iCR+,[DY5T]??GJ[P9sd.T;.1bdABq5_(`.0q%b'1E2WT<CqG*8/*.;Fj"%U0@U)[#
%\)PHm5Tp&J;i/G^Y@lP,cJ$!pLalVuM5s-b,[kN>muluqDlmP`VkPNap$,O4T5M+J]tqt,6d`)"+/UsBEL=YAe\^"u]5Q.Z@apUo
%;*8>gO)?J)rM03iXdn+jSa<6uS"">qX+s"moqid6a."+;r-2RUp)RdeQ)EZb[D%-rOa^u7m+jm5T0T?RK(:bPV]1M9GImOciFQ2j
%g%EG;C$#3Mm;/!Z?D$U(dF_Uib2CS%U*9!9:G,_o,?!O[r'jpT5HjN>`m]LFA1/IJB"7KN;J/)iSuAf)\;I_b8KBp:1,&%Xp4`7?
%e@AD=k0c\%h,oA>/kS<Ao5\=g_d"8PDt<"tZ?'tf5JK8)mc\Fffu'B(I.fS6g!"`.*dp$pGHdR["?4c>Ek@RNg+$>\?UZ&3Jlh^"
%nAUZX$WXCLk<8P8XKm>!?!9n6h/#Qe!Xs,`.@72TmZl>!)lp?<\<W)GhJUfVNR2OQH<.QI]roG#nY`Gch9uJ(gj:oRF<@TS*o,qe
%KB@SFZ$H2]Q<IK'-[bacU%k/8J)&g0GTUFr`r4q-^:F:)I1!'l0MeD6@/fEU,('/sk%aInTLm>QC%$K7foW\G?3420M3l]r/&)d9
%/&'V0+k:jt2;%3[o0^-_XebNKg-PN17_91DZ<AW@\]BOY1R\/`nN)lC[doagjh-!N_\BC.p7YlcUpQl'?%+;1'H!lQ^OFhbKk!U%
%1OJjn]bUu]QM@6L67I>(gF6,q@D9s,I&`^^Y.^(#/^mq_0,gNVAuC)`WDtOn&0<bt`l1sI_.]@2U1=$HAI>EGm%^c`eh!`mWp3ci
%=M9_bjD+"_WRZ/*(J=(t_s6okg\Q@^]UQ%TT=O$&@sp^MD^<oea$sKmfe^,!5heCbic!%5IXeiK1$Re3-N!Af1k"4j)!5+Lh&"se
%;VI;qjTE(/%Qn$$03e!UCNHnZrni/h"<J0.`lX,W"(Cl%enTET-1p&VFVI>;8!0&!'T^oKU.8u5kn3b&B>dB`Ej4)fV%p8d6!DZW
%k+B,WLDF,O)k8*hk$j@#jW(nmr%jr<`e2U"_$]@Yg3K#(T:O&9SaU\Xbl3H+O3o)JF6u&6LQQ;sjFg+K5/V_-E/&T+/I5n9-cjU)
%,GaAGNfOUS#(%E1RucU-m6fX]JOA29=M3ES"ac@#aaFVkjZXHtHRQdEBdPJ_SYjS1jVZ$e2#bj;);Qe,Y1%k>&#ia76gD@h&<?';
%>pkFu-2Wd[9K`,;N_;h<"f>-g[k@+<iUnr(Eep3kZt<8:X;h8.!b-?=m[p>&]//ZaHK0U_S7U3r0K&n+*6;s&D,;5No3%:?&9[,i
%5N>nj53i3kW@M8b$4)P[ZZK!TU3l7N];O1B[eHPk2`r[<:/bqQE:GkY]<2DNKs%iQ+h`[I`p(/J'd0FAg16!TD)]i3:UB(q_Hur'
%%1`_)4sACJSX).[3C\Y0o/PfKgB.QP3bSKu4Db`n.d.q+BI_8*dqH@cpc91l4uo$gmhE2!10b:7LW2p5[GMiBfcCY@hLSh!V>c.,
%QD`31if1?s0`p6<60Pje)9k`C+pJhQE^HJ&M[Z'&.7g))-:)G(kkT!]s5A8B\PLC<?.9;8Vc<]#`+LhqGDYj(B"lm!ICd_/ed3fA
%0s+%)P;DhA7Ui;D[kFJ74pBK-b*gp:$PgjdlZ$$GHKj3TVr<hF9])Cna06(j`s9"[`WSm2l(U>^&.hTIekMXJrp7u*`#*KsFjsOe
%`PFbZC0DI"nB8qEr]&t8Ca<rmC5JH/IF8s^^+9NU(jqlo'`+_GHEj*F?ac.'-'gA,m7ZN6$g-ET7e1H@0GE:q)cc-FlJ^]'JNi67
%=kOsqI7DF/nTBpMk1HC)G<Q13A&nFYlPtP</7/(p3]WmtK[sP,I[F0d@:1*>qXCTB]KF>V@l22]jo6IO?^l.EMiKtd3G-0hN_3PO
%q*X2G:"a61^2O@eB5;fH3)]MBr:;]D!!=3ME\VO@b,6SBSdn"iQlEQWAtjF)'J)&D[843&qBSkcjU6s<l#E1Z4M',_f&`MsjH+>.
%&BW6f[4Ml6$0K.0T,Rm4!+<f8E^DEZ"9W8#N)*+9Y24qV1[G?nq3PW;^`f;J<_$r):E:rXC!L][K8V,\Hsn5+\Oji+HM\YLWO;D(
%V,P]!1o'g5cQqg;L8$EC<JP(K)s>n=0?K*P2@ddIV32Z>Bi%<Q4<&f<PtnCsE4S%h+WR<0*dkRYHg;jBG5IY69DbJml`a\%Q5e]@
%Uj%/q4_AAYer"QlP`V2`iN'lp1Z9I$qRCti[Q4RPRGcAT<E9Zs)5\-uMjLo@Q#PqIYSH$NDRREa'5e&0$&;9h<Yt)3*A&@=S;)4k
%4W?3Np'^CU@(lJHXOH/L$n0/[X$QR\YT84?M@0+Wm7?%qD+.@UG/^pD/U*@t@HAj4<a3=i@H&Tq3'X^X'j3-1f,"sYO^'GV4ap?X
%?LTDV>>7;8K<7Dp(Z/Qd,W?3k,oDC+/,9N&+"oe5aB/\^%@3`RG,unFZND1m?&KNOe+`A"_>4W.#U\Ab4dVd8ppBaT[<-?:YIpu*
%ZMrqiS]%X2m(b=?gP2nn.#8ZYZ&8#`g5W3)CVK$.p+$p+YECWRZaG:2]NbaX$<e0/)88N'ZpKO[R2o#1N0W"fnU+T#elE=4rKcoW
%'04=?]d!QIiQuQJ%pql$l_e]t;-:%!p<GudErC"((b"SQfj:#!pi5U<3%(oqndWnZK19ZIK10Cup,;j'HF,#3lBI%8e(&Cg[C^gM
%fN(GB_oG[dddk*l1S9*-f>WLfQX>1crU)UFJY[^.CDiK#6+W12)T\rWBQ[8EgB)\,4D!0Cjg4`B[_%jtqX,pT7`#DVU_eUa__Cn_
%PX)tXp63,^Vqmi\$,qsB-XLM*g`;^_$,0tuqtl4e/q-XRZTGbOgC4nTcC`3np1=a3V5%LD(r2"MpSRH0T)uX0GDTG55[^<F)Lips
%`cDrJF>(<B,.[K<04*?mGu&,-qFX`0?X9Uue_@,q3YouY93L:<r;IB]__=sH0)%[MH7p$%'/-HU3\&oSd`M:=btH9*PBK9hqJ&#.
%.rDQ,_u3Y>^+>`O!L<"ur?ROih)\-I2iB&J4'c1A/V#%lD?__@#M7Zk-#$^aZu@GF?Adg(gRXDD%5HJNM=+j.>2F-u=kH%)(`mKa
%g_X&8h!=AoS4Po!Gp3L*YIhn9aN2r@05@N5_s92$>j(*i(P@Uk6)E*THpVS<X?&O.N4^.:6uI0rc-U6HUN@-)0Y=lBDKFobQd0-'
%,?!]&eWUqfc-9?Z\u[6+Vh&Ac?==r2R7,_='1EVb0^Pt=)A'Bj)(Sc$/NHe?\r=`)gs,=LA<(EV"._(c-N)VDFk!^q<W+0I_aJNX
%73<qII5N'/]rR0^00sa=*T"mafK9J#i=:RJO5eX6,W@Ne:bjZ[F2%Uj=8[c<5&!8`Tp/6h76)jne(7"^"PBL8D),jRkI%i8I;9Yb
%d9>SaN8uIt/'u=nYLc&rZ#-(RaYgj2&@j>letLdG>#b'`<c$<sM9!CWR'0Yd.PYpkHdpU00Z(q1N_bDQHafsB?fQF*EYGue/[P`P
%efpHkLRRd7oC!=Zf!c#H9HV)5Ap0s"NM_in4_-JkWrE!<967BBCl:Z'ZV8)sf[tPcl!'aQV^Tn2D7L&ge?^5.PZM3?eLH.L/hDoX
%[SqO/A7(C-p/<j>)W!W7"T[ZW)YCl1>*Q_h]L9&rSBuaXOAVnVU`QrO_)8f7cAfDV[sO3s2<;qYH%X@+?Ua`Imn*XM42r>]:;cj@
%T/f)GpD?%84CGWW@L#'KI_Q$pdmk]lr#/#;(aCWS="/L=?/X0pg:TL6$t3#e>@c?XPXU*"P'a`X-4jaT+QHNST(aQK7BH*07s#Rf
%E3PCBDu0@E(*S9]e&d\3oa$S>RGbmcUm0;ddulLWB/tX!88nH880>`Sl:uYM<:[HK?a`$iY;p;263KWr6(aVLT1k>%Z;D*;oU(^d
%/F<nQ41'A`!e[O2@X\9n@LTA,G8T$>q:4r(&40JVaH8VP=8sf8XZ,n2Le37i;mS]6=m2['Vd>^3eA8=f2UE"o'9BE(J]O`P])(tQ
%P$d8N$M6i;m87oG%dJ(FY>7#"Vap9"BZp*o\7[U7Lf2*Ui*[W3K@>\ML8L\.1b(fZmlhHLrfR^Am=&De#sL*h11JF[H;i&[e-Hdh
%nt<#e8AAMEpZFk1\5!l4HL=DZ-uDM2lg<*'#pW`AhHmKf-^j(mUp->&nqet"&jiIVJ*mPi_Q?AsqP95^YNn3)"%o*4I]/A5=O6PP
%o(D?%R.P8"d&\C)9%O17YCJhNYD-t]YKAT[q'DOZ<8Z<+D0,Ih@QQA0gi<07^)I^Q@'hg/nW9`ibPo`gl4[c-Ru_um2\;$)bMhd[
%%5h2N>i*Ls:>Va@P+jUUjK]@nLU5<-r\nkH\BYQoj!16dn=6Jkm.t(Qk4$ijV9K5N<3MdJ_KKfE.W'6U7qg"6oB!KrPrS'@>f;1S
%m\kQjf\Y;VP'06;:<s"$<t'W0>1+s!\*ZNf[fSDXRlb8LNtIm!3`+bXMt_]KG]=>+&-qK="tqSQQ``F&'3%1/7g&(.#l2$bO'n2U
%^cJdQiG,c8]1ocT;<$R.=k3!+gBAWDhX3j<8!!2(W3d$ZD!%K/iJ4Q!`TgBk\B:a-j:SJ6L+5UfpSF'=4S:%:IEl9ZJ]tHe+OW64
%YA:&H8G_TS`#c?9Q-oS)`l/p^V>HF_e_:=ad@+$`+L(qUdglsQ:/t*1&$)`lm'DUU9Rdc7drtVm\Wg/q?V!-um.YTq%(!Q`/"=FI
%[MJR&oC=tI\3*<'i@D*HLU4NC*V`VL-6ri+qs&4'o&pP"N*fo&,4H9HJchqTU=D%A"=fh&d+]s7N#S@`<Gp.;J'aC)-<RA$(gO*$
%JOit%-?g,aJR1!Mo(d!83LOQ&E-lW+C0dP([Crm;TZDi9j6/oY%+aIAIVqrhF13'u36to@8D\c6o>]O$2V/eVg<!updq57rfLkJ\
%d*UV93AgRs4Z!SrPK[RiZ78pBnEf:fN"BG.6E_4+`gDo-90#%/2krl?TbD"imAlOs?l^;[,AQG\hg:Fuh?-6#7VdkJYdJS#Phb!J
%(-m#u5QJ/sCk0(-9I=+)]bR?.&+AYQ)r[7ohcd8Db8OateMe]?%UK#VeT'Z2+'VsQ[\S>9)fK2XU@rd$5]?)!0dfE@Le/jPRn5]0
%n)l,aho:\Ei&6='d4E7qQ6DC_KE'nn3DR6-L:VJh%<1rdi<<`Jh8VQ:2((85&nD_17KgiX]1b;,ElSs[>4.rO(ZWKG]%n+;N?nkn
%&"%V.BUKbd^ZjPbd"DGE[b^;,62bq#[omj<fnn8]QRm6ID%L%WL7r+K?R\d-Qflm(R"!^-IZH[2oLrA`-[hY?V3P%gL71FJ<)2Lu
%mYsNYL?S(2'&qXmr3VCmP^IQ'bRW?JMCS)c#sIgKcG+nM&jkDQg.W3.b[X&n:bP'KhC-l<YfGpn_n-.TC[kB[G_h7/[t2W><i-kI
%bkWs^3*\UoP+u$cBK7(MC1-aYii.^^/bD:\#n#n]h<_*)/%N'QD";._m4M]HQ:5T3b'*]-@rm:44FJeHgl(`<'dQ.P$C+YtPnBbu
%?repb$/_%JEnWT[YNALM3IJNgDYJlLKk2l`V=nWo&d;I_"oJJKf"FcBiGdE:UM"U=?MEfg<!jQ0(MD[lD+BcZ];)K*`!tX]GWn7^
%A3N,)L3:0UT,0iY+dA)f]NHP+\);NlA0eV.HPY,,a@<IEo'*C8hHEF^\"9o$+A9m0YUsK&lJ<LO[th6[f_*(BJCq7?bPM8lp%p&:
%FSO\N2VMFk!T<GVrbaKjT8Zm-!,U-u8_QhO+77'`VdeOL[MSL[fc)SU?d4tCZm(*L$gC2l5@oif,dK<VHYKh5<6n/uCa:#pS:j8W
%VUI-+kI.u7[eskF20:f%58DN)-1uC.ENck'L01Ii=mJ*;"eP0,AgP-E9H+\6Seji055(lbdlL#[6tLjDi^ZRs>)aeJ&Qudmro?_b
%FO<E"9so^=hkT:D/Flb8`kpi\UQmu#'iB1TOjPS>XgdeB/u9k<j))hY5VFcDKnD=13NP'>(Quo\0au!J>@bE4Q802aZr6pBYa=1`
%g0*7@0-;7/]m7@'h=Xg,#HaD-@>b'dAE7SZHsOm;*1cOka.7J5ZKN[>ANDqtplgo-P)Yi7]'8V:pBV(FUNNer"&#k)gSsD_Y?c>;
%Js.ELkt_0?\^cRUkECbYc'?g0ON>'.BKa$^IMA6/,qru^Hf@;EfF:Z'_CG>"\XdsoB0eZ$Pj4:2Qtedt*j-j'-Xgfd\K*>k<a^U9
%WaJ??RogZA9u]d1I"*)Xiu@V-A5(lYf.4CPqdqOP=KTLPpK)M,4&h&KD@>(jX^8c9j@6.oK)t0\C5^iV^AEk?7*!o?&US(5IVWFl
%&ZsCh3(o$FOYe$=+W<SDL3NB]bK`i8oo@s/EQ>mdVR:h*m9^0VM!.(65aB0G(kuF\WBM]?gdiZtPWWe.$=X*lp'3KGn7t02B?uaF
%%X4=s)(BE])$[U#U5\DJ".Uj<*'Ei_?s@\f?<:?S5l0lU)7KWmH$cCtgH!lA0\etb!^u@>8JLSD0ciMn^3>^K9m$"Q.SY\Bi>O.0
%G$PU8hXUQLK0`n"St\)&]L!eO]-&S3AO>8=T^'#qqFeG$O&fnrip:?BM:QFdf:b1]+__EbSknF8h0#WFDg*YX#EbIP@ngGNM`jbp
%dQDBe\'sfbXoh\koVOcZDoaVJM8GGJ"He_r8g]eGUL=\orTNg:K[ZVmI;KFfq_tMC,)u(!c9Qk,!bB,eQqn]]cqVBD?M=I2TDbD@
%m@V4D4B[6/PCZRu__AdODo0,ojJLBl+7:^BIKSS9IZL$Ie5p*eI/C$m[BCuUFWsh4)]+uf(r;a2(sBa$gXkh%-!tCK&h$GQ(7&m^
%M263)C1AFCTA2F"?cUg"H7PcrfBPWojed+_rV&?m08YEI.-Q;`ZP-4,c*G5R&G:C"TcJ[tBJQ8Z8%43fZ+1V,EO=r[R#0m3QK+N9
%Zf$dTPK@b]KK\)3'dnpE6m?-X$&fMB5_a/9E)Ll*\hE_p2$SdY17BV5Q<rb_p>@Dm6UD"NWM)h9C9]0m?Th[Fnj2Uj<d?)G@0j:U
%hS%j>j!Q4d9>.q.E&7.8P1j(`*.#0tO&Wj_1#2JL!L3S3(!LWr)7ci*2ZkO4]+)5-DjTH2a#lomEjRi!]64\cAFAR79;d>T]BjQS
%04#EjV;:OaUET$>D^?N"g3QQ_-4@7Yp2j;19m,!MXj^Hsb`Q'"m=jYu3&uot1O4l"fqQ$8Y'P0Ng#(,3#)gGe0$%a2R:sjkjpl=u
%D]>o=m:\`a7o@R(o:=t.;l;s"6Qj4/^Tj=CaC7+FS8%!e)YTF$48p1$rMtoK,@>?]o\;]ucWm#C7E;ruJUXf=YC5g=&+<Ob`EdT^
%:Mi\8M<(i#>b?FZ2>hV)`7Jo3d[\DCf,Lqs9r8Y6G0cY<6n7.sFF?(ah_K?^]A%NWd>5*!_Z&*pUk\6iSt@j"qqVF]?,$O;=OBG\
%I<(!`fCBr&JfC*+`=gf1r?7umR/!t8HmeHmRS9ZWOa+UB>_2>5hi5F$Q*/OGDmlr39g4U)4Ls,TR>HO&.7VWA2\!<[]'ti4I5m47
%!PZ?PEZLs%jZ_Y<;p%trLA*bt^j+]g7rn.NQLoX#*UH&p]`HO4/iu%#YEpiBhh:R:l<aD1\6F-4>H]7ardtZ[O6_G5LfM;\Ilp_h
%h$ggp%!V6OSD6)\._%C)qeafuJq4?AeC,!6`i*>jT1aug2*!A_4ZX6H7?Zp'-<'>4P("R:1sZj@o/"49pA23<BcM@Rak)M"%QD@:
%r7G4_q@i4=rph%$V2m7*i9aMcW6pg;mg&u-l]#BY'?',7D8HR>c9/iU>^g^9C.VB3I#0YO$G4Wn%=9PU8egu[TW>-$k)+JMGZ[hd
%2],-(gl=(d+*`h,.YTe+Eq'%P@l*RFPF#EU6a(CUQcb&4KI#=!RR="Ln;-ebCQ;,kdC\scdT^@Z%hoqAC9?"rZjKjUHN3((V2\Pq
%r2=<'G,A66l8^_*D<Jl3Z97pYTp'lEl2-J>lV@*A+^V6b;S:tT/tH8V^'`K(T3M1u5O6hQ7^Js^L9?\[^259IqY"5+':7XSK!,Or
%1rj%Rcj8K;:^G89P%YPV57s_(]tFaqZ;q)qI#7-"UHqXLs7S\.6iUTQ+8dXi*gT_eS1)5j&YZ,uhu:)NYjqHF:)d`7J[A:h@!e/r
%_n&e5(Vlok_n6!G<UXd4G3"A?FG.uC4Wcr%2Hk>Ira5h=_96cs@ltA$F8H(>VXY1,dtdtYC'\6bf^2K4Fpt#"!;==J17g;J_\;&Z
%rWWldJ,>knrK2'>c_/m>q]@`uI-Li-%]DJj3m^<0/;&]Y)k%?IJe5;s7X<qD5S9$k)j%189g'=UdMg)nDE.jn6W^tq0a>2t#%OO\
%d&fsCBQRFo+>^Ya_q6iQ;#Oh05$Vn!Bs6?brn'b!IKq#L%M@]6GDWeu_?50]i%+3YG_<-Rc&MUYF*$6a3OccSWr#.1+u>7VJ_u(C
%^<\WhPA1qZe+Q4#_^k[Lgo!,b*MF,?Q[$FG,q?O/A47-q[McE#3ke=/qk[;)rurcFG,iLMFT6eJVn7fOFQ9kM2=t;rB/E8^\&LNO
%e:=+Xs-Wl)n;P50n:R`s14J.M"]RTt^OW>)/:jc-_lJTiMOZ.m,q6rlbK(a>/91bW&pRB'#\=a:8#R84-'e3ILuULI-jLGhTFb-(
%JA_RY=VX%&]-VV1:ba*aK'JID25%7T![)`dJ4:e,OnLG$!JY)0dMALg+@uimk9:G38kMA173#=d""_W8"Jd^q6DT,WZ?B.m+KHtb
%Tdm*6":r6)(lAaOLaiSMWXTS[J8SS_a8%0!5[Y:[b`?=H"K?2;SoGGiauHO2EWEu0SMI6$*(%UEn51<\Lk:.U<oj=VaHQs*+V6NH
%8;c&:$;1M3^p3q`1/#Uu'V7[R'&Z`CV,N[*(fk(UJ>0hUp66Fpj:M_gL$9f@#J\-\!J+l4'au^V_SK-KSBr:B@sEU'^k.Jf;bk2t
%n/r\P9:7.?C)*<N#QcQP4Y/7EfHUpMVV4bdOsrLEM^T^U1+WFR+KtlA"sG6DV1?Wq6U:jl"<;t%YQBG&#d>)G.XHUM!D-\'1BAi%
%8sE*oJ\9&I<!55AE+qU;<In!Z"Cltp!Jh$f178Du,bC]&Mk^Ru%K]?m(:Ya^.PR)`"s=[NPB\5N@]NC_+t.QQ4E-Dp8;DQmfEoD#
%+C6Cr'*[G6%*RW#OG+6s6BS+f_]eb")_.h=64eE.(+9HU`=`a*;o1e3'pc!5XHc%2.Uq:k#?,8SZRE'*(g(=0`5;N3#[P58%b?:i
%AYDKh`>o#F@GZM_"_<q>hBWTl;o5uY:R3[75ThV""0o)D(`&M^JMcBTYY$INRqs39&c`O;^'%mo0`is[/1;aa<%Jkk>`h;5!7-MK
%(-jPg!WmiB3+muI,=#cT\?&S'0u/,:,u<Z3=!OJJ1VhR3-Hfj`i_Tq8./=4q9pTdH\j-6A>>tW7+gW:B&d.Hpi-Z:;!+SS/"7m\[
%<&ieAh*%Ki]3E)M'EMEo*YGi\Lh[Db3%A`h]TlUWaf(k1A4cI4YUKY,/l7+)7R3L5!Q<,UOPQ42#mX9sWA9JW!/h#F$;a:/0:m\r
%?DJ-`PDN+lTU8gfGlf'uJ;GsQ?6OY7Zk:@_%#RF\+q=su^abP&a;^4D"@<o`/:0c&,SBoOJN4@AAJ%nG9#MV^)/^7U[M2!u.KVqj
%J=lsN72aYWoE^%6X?d*m";8g+Ub-72fR'DG#R>#j=;qucLr#FS@5e=Fk#GOq=96X)8?E(^JmgZn;@5GboT"l,O@Ts7M$TSF,Rd-R
%a<Jt2HX)Y/]MoXL#WE!s"g,W3BR<^?E>FWuU&^[B6'[$E)3kHjjoF(j.dRVk2A0.3"H!9DJ.`Dq!uhA1&.%\?)ktK^.1!#JfH!SW
%bQ3h.p*b*&.O[u`"3;8a&hGkQ.PbF/-t!pT1(K_'%#)s/YQU(5$NLh@p.3gP-f`,oRt.]D-kS:i(`<p[$^kQt?_I*m(dWfq#A/af
%+L4G?.;U\?@pB?^D)FjDBG]</W9Y#5KBiL[d&17Q&]CDt-9F]t+Tcdu6]&1$A:Q5+4[p"L0V3eSO?*Mq:SCZB.tCU!4Xf!A#a38,
%J<=8NSjIZ.G7K4L=BX@BfN)5a?GuX_+rFa[#R(`5)!G$tdA!S84"qb\B1Q69do";?`<[l"Ad%`FaJMmESTrp=!cBBI;ZmEZ<5=bF
%:jbs04NK'?"JS[',4n-nCFKP=TM1itk`=Z%JTXn"Z[6X8,"2WeK%^nd_Jqt;cqL+$+;4t6JkH)?i$4<jSe&^M/0KX:#/aIHM*b6p
%U'IGHdY=uL11:LSHJGb.KJ&!O[D,<WBK/uDOG[o,&I9$t/O<o,8LA[;_q6)NQ_6,CAa/mi2:#Y`fN(J>:#ma&#,_V9_>F=*#Qbfp
%"5seVE@[8n`3l=/#GE>3841u>fS'n+.9R"?A.G*'6RP]d.T.o(JKQHC"9eqO+;6S$-"7<+)0_GJ"pE^EJq]pBg.``t&BUpRPX,b2
%D&!Z])ATV#K2rU4+u:4e0;G#9g(QrbN)56cZA_&)<EO@9<TGA##m;Le'al.@(WA#%3&"YEKa!a_+R"`GF[W9_>63Kq,*KA_3.fd%
%QR+m#m12kZ(fY,N"TF5:jKX=-YBF&";sct2JkFD*#ui?A'G[$d7"q]cg)$WuZ=nbJ].*[$dcD'sg/3E'M>"rFBODAqo!Y+i2N"Gu
%!"'-7aNB+W<f')8XlYZ3kY;JplW=@.Oj)5//tp#`ee,a6(*$CDcc3s-OGnN%S2H*m'EUXC5_B=C1p*L8=efP-E/mo0i/0%`dpY!O
%ro*p/^e?cX+A#MY\?&"2#Zs,*[O*,+;mN<3oJBF0_7`mK<"T^Bkcg`D=gbjf_:jJ8JW?$!6*W@26t%,;-8/!0VLYrpmQ.dFN@]rT
%Ks57"@*1`sLcV')2ZX!\*cs'&ItamlRAJ-eJXN%Lf]E2]+9<Z'%S7h0!2^*P&qIcN.'d^#(mH]%(3M`:;D;+t82(;]-BT3p%c&Xg
%cmT()3\(c`i"^>f5YD*=6)@=H!9H[4)8lXMMGo-MPW3$KCH.FdWaJ(@;CE'fdXrZFiM_rpO-!=[I<Z*-d*<4]_.Q@%W5f.+W=jZc
%e<`UX!$6n\h%4C[4387.[$J4FUa;'3'\G=*IH'n:*`\%/!:KtgM*V#0(%!/ZEe(1R%TBQ/'!X#<H<$VTAKI*u3ZK^@Pnb9s:7+Hp
%+B#Z`r*pEgcrNPa5QFNk@2(DeQ)IamMb4r*;XuSqrZ28iW:A7@9>nA.V$3_35Tn6,O@,jug(UC-j3AlkJOci:Kd7d@O_cBaI;oB]
%2@asPPYa'9,"nX8RJ7maKS5Jj4Y"MV#W7\?SPB<?H%e-[T[\[h5>NE?N?]QB/eeHIL(-J56(5Z:8[r[m:uK_='#8eq5:%4Ca?6Of
%pgIi5m'q[JD>jT9;M]OXd>.qN/V7Nu:kRG!Tdp1Bkd[!Z_@^TA+[BR,TaXNp-jCqkU@A`>J9r_A7ujEC&]g[%QG]@sTMPYH$\B)$
%Mo[CgD6'Uu%H:4WOgaI*Z?AJ[@^6%.$E+t7YerAbF9_g_6ed37ZF4Cr:gO__<5HqMJ7KR2!=6PZ$;tFS9C=EpJ;u$\,LiQAJqsd!
%7hQ,lGQg>Vato#T;.J6:"OrcoR3.6E;10UZK]HT\W5m7l"^_h,?6sSUb_3Cu/5QI5S"1W$m0$&bb[jA-c_GMN71$$8Z_F",i$@(T
%oW3[s_U#8r=A`K=7.>L;o^r>)4\QJSEaYd_RHrROcqbq/_.0:d;hH\9al(MoK@j"-M!SUe<L#^Ye-?'./ta^0<!^G",5Di#o#*Zk
%]u2Bg(L]9Tfg;O._p+CP%#YT9Ca%/[4GhN(_KLI.B^3qT`k2iW!k+#F.1H\l0h2?i"+&NBWYkl$E)XYB<6U7SFqREUZQ'5S=$iWX
%TL0lYOt<mQ"E'f'5d9ir/D^l)kS-RC%&X%I<.TmXp6TJS%./kl@M^T?RZXh86m+TaSm^a0,[d2LH4ef/;@nUn+\635Kn:/(\j@SF
%8dm)oC`PpW&AG@c1U(C$fT-Ym&m8TF,I96$Vq>=YLtOB,*XK`%#bIB=7[bR$8R*YJVp&RE7j0+-5*dH4pnNZkdBJQN%i@nLL0tu-
%3+S6k#'QkW.n:K-+?1T&;T"9K%0^kY&JFA%bXE'ScRJtsW@Z.lb,@sH>"1mfNp0\sU@)&r3%,=iMCDDAG%f)*c3UktFJ6V[h;FH]
%8Uce43(a#TX2f?KTY`)_p939fg`8GYJ-H"1Pq[/&d4gF_&Kahq,_1&icm#G][qQZ$;br7%#[]i:&Z\/^p68_P6DRpl;Xoo9-&@^I
%57u^ZRQFP(>LB&ukRu27AdE7JC?M-B8Upeq+TT_#Z'5NSGdK6i,m?)WUa=W(]`<4DO[[,anCnP;BM$FWT]S^P!"dUTF^SF9X<]@1
%MR+L_,0<tTkUc80l>-jF7H.O`/cNsO6=J&1":_^,!!)gp<5L]'c\.c=VTr1'>63-.8GIjA"Tj0=<%s_u1WF57RL'StR[bKt&BiG-
%)=/SMGqp2gL(Yt?OlfSZ&BW@0)Fbu5+$ltkXGf=di<fQ&eANPI#3oKH,mdsm"E#0W*je-;iH^]k%]6@=`J/sM@KHpb,2u).h?@pZ
%OX.\,WW``]BNa]`#XsnR8%0>cO+cq`U=^S^;IW*p,/t3<.]+:Y-C-VH*:8giS*H,\9KFR[#jeVMOjJtp^48le/.KiWJhV^iiG?pZ
%P!&00PE5eV2S`!SbR"r"ac`UTXsp"t+q+pHLad*g+:C(-1`J#884491iXhr#B@p4HZ4jQ?i.GE;"BlC8d0rPO!aU>V$3UU_0[t\F
%e-dOBLFFbk+1m^>FLFKmj"=8Dj[DW$"aggh_rP]>"p.UNga`.%fG7R\5aVh3/NBK_;]taH//;S]!\@eph$BkXCgopN&t"<^BDaD3
%)hJ!M-so7g+Au'.fgnFGOq_lNS;C>U!95IU`4TJX";CG.!oFVr#L"]m)b>4.)im7(jV9$[+OgQ]3Pe[QUFA^=06V%1=?rr03X%Vo
%;c82Y3F[bhif2@R"9si&Q7c95du_#*-RWV8*]"NDWBp$TC-*sZVH?]'(m5)$87%.MA?iKAQC+TLNeFef:_Uo[!ogF$J@YPp8P;?D
%c7u[XBEhQ?O[;?#?sEob+s_U]g-W_OYSpmPi[>A"S\?=W4IHY0Jpe?\O!-[kl5iXAi\ob3W^+4C8QctD,6npGcpS*N[>9E\:IXB&
%M("PH7Al%[C!7pPiX'V&ACQ>Rd7^.[A_WagLcI_(8Z`#A,)3SWS4pUY=Ds98(n7HaM6II?A<K@OUTfqQF[3qP<3e)'oZ5+LKI<N1
%(0-gM[7rVJK77W0S:>:.";4dl`&81'+^n3(;jNph%"g!kjJ'^ZOt\Sb2*K/t$cF,W!sTG$#tG0am"hU7GWQcqne)+G/5I!:AtaIc
%[WE(Tda\@W?`&W%N*op*9O?GD@6'#U-*ZH&N%'_.?s&&M<$Fn%1k$Q/+t868PUrmpWHO]1>?\j/JY0;G_pJ>g]o`R@>Ug9p>+*?@
%\#YUX%j6db9OS&<@l.^AV1\[kiO+?Q2:'Hh>Kgpr`JcDWA+teI5qK/F.T$0_Nj(o)Ms./32Me\TY*c4j]>\:4\3)5*OgGZ;QB=/^
%H-hl?Cb3,$1ID'Pk8p<.:gk4S>nWl*EQN/HW/>h"mEUA0;%Q'FE^C#.hB^316%jNN59mSIO35^JO]Z9e)hSK%7]V=_57(V?U+g"7
%"%e/<E84<_69k^W!7@/r3l`Kb!]pd9V](aD&WNol7#"[Q8:?T>7m-;`<(m:UW!r&7[8&,NTNG1)lWG^_TTWiKQ3"D1W5O)a[7=4!
%k)O^jYs>a;,gh1t%d4MHE=:/HJMQGjMSp,V2@(lc&T8Nh&KCgM>"Bp]Z6ZJoa@Q4]9Io\0HOLkt>ApM)o8@e^'P(;iV*:KI"jh-M
%'qGG]W$DtW^+=D\<2'+,1+_'>/<`]e?i\c)<=)YfefSRIfGtcp*(qBZ*TVfjKr%lhK53fAKKPJiDtNgT,,2>NWI/4BW02b,M#N,W
%OM)eFUt>oGA5TMMeRGdma/]n(?r2pG=W&^j"=.G+%mbB5$S@KST:qpoA%1s-P'rB/,dK\&Y#%\I<BuO/ZSa55G0?k:Sa)=kP*_$F
%OB!J=W/*.X19N*aZ:0)XW[MJ2YU[d/[tRdM"m+>M7IB+@o\bHt.\J7;+(Ic>8I,B9?`"rH[ZrG565#TZm_g];APlJNkm#crT_2ko
%(:?(3QDK+M]t,Wb&27!_0G;6MTgBCA%#^/9prY"GSh@"$_HMIc:Wf=MXjJg>m"l^%^,['DVkRmlW@ocbb`]itPu0ZW!YH'4)ca1:
%UYsjd/WHbi/k;V.=0W7hNR_%gbS.mQ)+0O_+AQKp!J<_?0LAd%[,p[b%p23\G_mA@<lGW'VYDm7LN&iPH9if:DucjSZ(VmJ,[00G
%-++-4@/X6"+qfTgOe7F^Nt"uU<'UCn8X;d".]Op!`Ifoo\<mD!86$+?Y]r&u7*VC/h)r57N>cC=Ge5:1/d09`J<El'i<Ig8QCkbq
%&^7dY*6k@EP,q&dLj1<N;k>1cX0$P\UZgQoY,`b2+gIk9:>dNWeO*+Y+\3a_8s0r;/&mctJgHgJbaqIt6@4sdL_bRZP#97tX,&6K
%>[\?Tl=@`IG9s/QYY6Ke(sla*<5nGN,>+JLZE%=?'ep"d$Dt+:K0YdP[QH,c+UFmM>N8\=Sc\#.gQP[A<0Ccj7EdXDFYns+LX@Sk
%ZJ*Rj_.Yr"j=j;h[3_64<<0i<ZQbLb&kPN#rDaHr'"!Ig'RGX=BE@M9Ot%)7d[#Qa.TXI&`FN+T>A)@`j*F:(R8cpaU(q?RR8lh&
%W3J'QN(IoP7/qL"JlSd:a4.]COI_;p.]bL8#m\diOi&*UapU=DOf5#6E-K]<0gA*CRXuoh0I`&S/?8N^oSQb1(O-W9].bGNZI!H&
%f0$8GJU(;?Y*)aG4`i(#3WMbO@1@ctl1#46A3iaPVI)[j`QAjB.HBq@67T.>@\;K8-'mk[W[PfK@\Sf,Uj:)5$s5q@%dbpK+u$qA
%6,/F*??o3H;%T^"bJ1!5+:<eD(p;#O5goWO-3FP[!_n+J.fg&=ZDbQ^i:-ptm!CQO!d0!#Cl&i2"P`$)mAojd!TXq*\s&eNA5\gA
%*$sPq1(')'ftjS>eH.h#%k<0cM]a,D=tp%VOIU&UT=fuVeM2aXE[h]K`+W=Bfu*Y;nLcdPW+&137%,DL-ZRIQ4P-WA'+WL&Rn-3D
%&kDL$&4N7O(fpmV,T>nY9qagOR=r[:f$<\nZ4XG?,5#85HJb#:'a"WV!j),_Ce2mL:eAZ*_u_s6!qqlZ:m^q%\M+H6J)OfRoZSJI
%lGcpC%H9C$d7"$t_o%VcKU@,&]g*)(&3YcYI2N\C,(n:7g<K#kZ>G"D945fs!\o\%b``c'P:pFG@U(6e%$5NdjOc&]^bPHt8A:8^
%F-n1_nSA:j?]0aGff#1!M=!2):C%Cb\jRh5VW[LQRbB+o3&0/`S2+QKnPl>WdfO3V62uN/A8)Z``;"7U&g'#sSZuhtTI0m3+@mpV
%R%"mH'8,OqG])^,<P*pC/d47_73Y6p<$b+`Q=XkD3;YOLChJpq_-!.a5U`nC#ZXtgRB2Pb@K`Ke9)j,,iJ_:`'OZ<W3%#&n*hC<Q
%:G_"3bmtBs5M2e7N[ES=Z`@Ol.-"H:6ETbWg&#ubac\8Z'@R3Ms%jnp6Gr7.3Cc1]_9io5l'09hcZm[X,HJP[6_t+_S7/1WKNH)2
%Hi*O(^6U?TAtQ&?%MrdPh0+pc'W!:HbX@^(\?dUZh\7f"W.1H2b*Y^h'TrQtl8IM>TK)4U@QGI8'QTO94F'&/X#d]mZ4L5j_*JZR
%&cA(DcC@kJb$%^<UuKGXB`"&:$;+s<1hTi7lQ5oXGl-N&8uA<B.`m;7Z.I3D!D%a75H!$(9sCOY]U/T>5G*H$B-Hqrb<:dSmfK'n
%I?PQ*/=siCWcO^d<hnfYmuf%(L*`VjKK2B'5E@#Wp#f0MjHc;s:%'UO^u>Jb=*&J%QPW\-@\RXHl#3'dQ!7-M>Wg<mQG'<hFN(V?
%EVlK[m0j;'T6F@:0quj,UfE8bYcZ*bnQ?8_m^fbS>\+%23R_Wi'!5FfgO5IC1b5*7ohp`H7:"7FCf7]_en;&CKL7SFJMmAk-><%8
%8Y)l7iV^:unk+ug&<Mn8GiWqi:;6iaDA=XPl\f(B^&$SqOE)EXL#>Icir`\k!/N`q@?7$S'oE4a$:IQRY7:RtYMOpcG@#!nV`_<L
%<D[p-H%se(#nW"i4T5dj7Da>0jHB<*A>\j5HlNl?'ID_1jcN.!E2c))5)5\@PO1@qGS>V"$/NJu*Q`#/5X(d3-$;`kRYO'mVnYkj
%a[9jB6)1YqUi,"FbEpQbV<+Ln7/fO"fcYr-&=;t^)jH`Sdop/65<rQd:KsIYIaaeW$)4S;%%m2K^sI<P1seH'oQe75TS'J&c[O/p
%/l_3[k]21P(L?IDk]6\lQi!D6/uPlcrQZONNUrRASg.DRE476;`h;n%'d>Ap_L*@E3hHYNY$MK[>JPQ+oIG$F\t=$^#)*,,;RCp$
%Q=is=;t^G2B7He+YSAfCFU0cd)-eK^ia&G86=^QYG>Ad]_S<V9[S@sGc^E];%,J\U!&U;NRobA):n%fNnKs?J"$hqdoo0[)a;aGN
%+^D&T:]=CS85e:,<[SnA@_I8_FFWpo_<d+d>r_`"T#,9MjIfTeqWVRAR00X\-UZis2%g2>HZnjRV<GYe1l)Vqo9h]-&l_7$'CB.R
%#69[r9+RCr0-Y4pPI?pCWpel0[&i_?4XZ^*d#TIEB.$U<rr7PK]nED395cin[O3)'Bnj7UFTd)(UpOJsmF_X.*,m2E!`0MPGp(>\
%4oUkJrI=_M].k6M%]s79.>0YpM)kf3m/_-)Z(gj36+-.P`7@VZUVqN:P(T=^XI!KOW)cR$KR<SUjm*VCThh@$>n(r,e["ch'I(ib
%#/qd(&&7Wp1#,_'fm`Tod'Z9llM!BO^.gLXIBQRb(SX_sg6Y.diHL\6c6p>PiU-'9!<N)HI*'[83Wu]1kmI+SEqXlJad6BQ-suQ/
%-U:\(BD''oijt)4qU0"^Xr!W]iPgbAUZds:dO7\`6892?I?)`coV9_H5H%%t[fA@_s++FS\MC(sbGerSb3GXm,sTT(T>E_lcZ(Kg
%JESYIqY)l;CS;bXQ(gNd.p-PA1=b:G)uC;^I?k&7CBni5ItR$Oedq<ABE$-4d)04NGq4gU4X+Be0_D6n?8keZ(eT./A5X04D\rZ)
%KF[O/oL7#@:pOtB/VDK1&WTVaoOW1H9q6m=5[E!(VRX09nRe3bbnZZcUX^c-".msXb?!/qWLd]sdA?;+<7!rtiJ0KOLN7UAXmiVM
%e5ZJ,O,3m0V/YlDP!afCp;7d.<G@l9f\?Z<*p6R.,oV/t14t*=O];gl_Kl!rTqS^G69oG2;;-+&Zq.3ih%3lhXJnuDmf[p8qOg+a
%GrMN`>"5??!b^S8@'t[Jj]d'0C]OUa?n[Ug^s?/p3]<<cR``(PL0M9Rn52#Uq12<k8;1oJe"qoU<UZ;e@J]-`B_a9F$"[,`jVF3l
%EPh3o6;;nNOX$l!LRi&,!%.TW![r1)hCc&]MXR,j(a:5Pp3<RWm^Zq=DAS%q-9.YseDHH!D`UOFs#H7*oWu=!NDC%NmB+6m;mFYE
%<i)%S9Q!fGkUFEW04aY,`A;hCp']h8g3P]fjo,XWO*<V>-SiqP[%=3gYj$\oD"ZJ4X3MK:a%(ZYfD-bX7-1n1g>I(%gU=mq2S:YS
%W;m-@VlPSj1'P[2oWtZjA$1@YUA3LH<[8dUfs3[CE;qE"K]!eLj41P.GGgeVUlSW*6jg?=!@BgQ5Uk(=B`qRe;qEm#e]g&iDBZ\p
%<ioloo-r)<I^k-cchc'*NbbP:HTjaW=ePDp$,0n_/uPZ^!%FG;C@l7#WRhP/ggWE(D]T!mh"KRPV!"o?+kjjL+/>eA\uQ.=]:sc1
%##E@pNsDnh>_Cl8QHdf@G)`0$G[RH7-nh$f-K$C[mlf>8Mn>13E,JI\8poJDd6%?=NDi8pN4@b'p]%B0K9p8Zq)oc`X8,P$G2#5=
%'g+.#Fp^>T5(#9.O?1Z\J,%5.C3&H277E3=#7,gT?D17:>K/&ReDH#nqn<Dlm]LmtPGq(p\GS3AQ;;JQ[:L>a98Glj`IIYH*%SW<
%_mp87DdJ0U$-2PXE']/dWASTG"9^YOMT[4(KDT<_P+dbQ"++MOYUdlA+sQi*0(oTFbKs*>d.3IE9J_=a0[da#;Ej0<=mkS[!`35W
%F>/,:gpa'1XW/??F9jp+B%>518.%%<&FeJY;<:[rdRs^*]T][d:uqp*Weh(E5_]TlXf5N+eH,+2ZXR]I%Cj1TlsGSIJA<\Gq4'%/
%B0e0*B?HbadMO"EU5XnD&:PC[Lo[AhkSAt@5rs_s:AdP?>!UjOX'gpO:+CU&VuR;+O(p3qX)mj(<28:"g^(E[;6b;%b2l@b:,QmU
%.ZAE]&CH\<XH`9iIdpJg<(b^#$D%kg<!gH!"?bJpUiL*BZh!NZcUjJCbhsjIk&]Y/0S^Y/YlQAY$]j:\IB>59>'1Jf5+emT_l9!0
%Oom?%Ih82`)X$iL,pTNaii67D$jq/7af)uccZ53e_.d3:p$76+VcG9FUL9$J*i:in4u;MG/_;$3<W3+aH(<AVM32t[&.3TkNPK4,
%k6g)mk7Cp`=h3K<%DCp#h9UsoU]b08g#\[coYIJps&S.U3=S_:o0(opB'M\<P?Qc02ongji'c+4*j+HGn8^^I_e0-%dtSR1Fn_<H
%k!qLYU9)Y6Fqi=M_JbffB9Y#adp?do56e5l4fu4QJ(KH'NEO]#:G[o,;F7s;>fcc3.*GD5<D"`u?H"<8=KQ#(P.WZ#QO9SD2?oG4
%lc7J^6'Er29aM*sG$.qdSGD$gY'oiHCfMYJe#),t_G(p*PnG[#4j@^q`.:#T)l%0_84=4(.IGiq"YI7s!:cq)2M6T,#FM,De[@nV
%=LH(:D..aUV\`;\KIMWZ],G.[JYgni<+RmfN34\a&tFcB:"a,"CX`;7ii;k%0j*k`Q(pTlYF-lM0Vjq]f$MMrNse41p8=+p:]/U5
%[GoC*OrF]kOoY.:,a,;D^0@S<jTnkE'JY"6MT)r#dKW#8nR<lpidd_0f[\bC_40<Pf4I$M%?TS6L#6Q)0L$)WSJUXLKFJrCXe`7L
%AM*q2n0]D&*bpRXfQ#Q4L^6OAX.VU8M]<@(m*nGR`UkU0h3ef0P6,-eVr#B,\0W]BY1nf5Onq/p:8R!.B@q\+dX9n-NDA+SVO>c0
%W<UY$/'T7[_\M]WISf%mUI:`3<Im3h85Nl,C64sZd-n!h.tIA,`&%b$L)[ML]$[%bc]mG3iN3.DQu6J3-^*LmjK92\WMtoa_]Mjo
%PNj"$J_i@tbS9rM>a.0BE??)t.fX1Xq:5`]E)U#jHN*p-iO9h%cZZG*_UE";>]C6%p)dTZW0L?h/OR2t0*=?Qk/A$jZGJ]UoS.26
%1PT5GcRE/W7.p.D[&+4JPtZ^XTL*<,0Jos9L,]c5Z3E\/4Z1q')UMdFGLd1;.rcd0p(hKXX,74^mtq2rr,J\T8nE,TJta'!Z>XE4
%?;HHc']kXaNk1.04-r6O#RO\FdRc4=JjbgrZDCkpMhMnt'OF51[>YU:8O?ol#=#enD8*[)kM03aT,$GGWAdI2APL,>D90i#$6CjN
%727#@PnBmk26+qW,NBI%<Ilc#[*]RYaG3Pcp$Yeiho7f:\9c=@%<Hp)<u$jOR=b1\G+uHF?&t-8JZ<(r/;%-Q8BVm>a-(7DZ7F^Q
%SkS"MD[D_81t62q(37>rAa))q@"!5[da+p#E("U)2HMZs@>&?qN'oOMPfS#^MJ7e#o@k*_"YoMl05,Q-cZ46ajl^&6s&oEP_41%'
%e\S^5.6aMA%TFH2D6u?+L'c3UH%uq'e#aO*MU-jP&qXuSG&P\3Ppn64TE:pkCQ<L;ri-'M%c:U":I3GB:<!hkEN('$;8rQ5i"_[[
%.bu`b0W*h0Ym48\Y#hupj).Z#;Y@H7,_;&FcK%X_"\@S\5uH^'TYCgjRZ\mVFBQ<QWcg:k&I"&f9'.TCLblFua#'SS7G-S&n,CN+
%o&%4?AL3*4ru!Xl&nP*7BPsZ>LOrQa[%;]+(Z'=DQ^'MQ>s"B@f91iH.bSG+:jW3fDU\%U5`$-H#9/R<eGE=$bjn!2+W%9^5h^1d
%-TOP<:2KJUDoZ0uDdjlZb<e?pA8oU_GA#MUk]QtYe1K5T"dJXIP#%C"(.+=<A[Nf/[JW=@DGII!N=LpFAVK3HBoS_Lrraj]as-M]
%VH$T?>h?0Kn-;+>R^8>*jV,9XS^=6To.k:Q+[afC%6[E#l_!V"SgI5IoaZH=X=39CZ/^_]`@56gMCR_^A;)[]#+Ah2_p-Mj83)j(
%dI]07bcgnTN0(4K2;GE&;R",uK@K.A#.:/`7'S3r,di+.,uB.q$WO4/]$jrr:b'c-;KDM'4ccAbZW#b&A(O?</b1KLRndW`iX)Um
%]lfkXl*tnc;1>""'KFjC5bJ1;?CIG=oDb2-qeNR_f)I)LEKiZeT1d#\5Daaa?O@kSk>q*Is#"fja8^8P*C'O%R(GT^m=,HP%d?0E
%^h[UOV;uSlRgK.QJO`K6I[YsI`"!DoFH=JXSP$nueNoS<d-&:;UUSOi2MssiBF>\I<<q*i#gHQki,F$D2a*Hr^1&,,?=m<BdPsuR
%b)J3?q,dq5f%q:5*$qEXB>3i#P8k)Q\$+T?RS`=W#%mY7Q#[F5:OAnr*<fS$/RL6-mP?+\BOT\^.J8DPU*u@nRJJ']4I'b\Eqn+7
%gaD7?IfH4gl\M=t]p^4q;pC.KkjthA5lFs-24&dfVGsD(Q8L!jA+f4$ohKu1P6_AY@Pt:+#bU5FU/.=0'/Uo(AOQG#T%KbK3_5tL
%]Md1JU2Z:A-oi)*Yu0Rk$$j"V,O5P0kc/9K&[A%;9S&TV]t/n+<W\juKj):K-k`J`bZ/OK&%VkE\l/4WjEpg0Z+jl7Q7Cn_F8m^K
%oNPRq.[-g%B0o#OnD-7b:i^<#!I`X)0s/-TL"f+Tcu^VDe;&cn917s\OhV`$<LJ8ZZ+_gmjMBW?3l+r(;dFY]"`5+ij&>oFd]Dq7
%\qe*^/8rc]h6-$P^,>5L2H=e3mDJC!J,[n"G[`r%VMfU!-e^CeVPP21F9KDg:gZQglD>"_?SsDMRT]Se$AqKlih!uQOi"-:X".7E
%DG)#GY5H(=O`gHt>4V<AA_fHpb,!)o1bIL^f13cX1:6B?g(K\kRK-H\].4Ym!7=SOGg;V@Gc`j"I8=BC<&nt^m?^HVL.]r)!;,$b
%Ho!P;O=Roj-`RabGDabBN9la"'ZR):/j=El^$PnI3s*Z7et6L_$We6PMM`g-EF4*tD=ml:r";4.=k&mpYmZOg6)@N]`ZMDAm&E:Q
%9$!8*=$n<.<HjcN71h'-L!m!mT)BI&C]7T6:$?c+7/q;PA80Nih`onQBBLqd@-TYWk58qnfFk'0<S<-j#jkIqLO"9I?m06d>/fJX
%9q4P<9'$Uf&D9GsoVsL2El_7fnV^@?Ks.;#o(S&f=,E$B.KuK[OS]!a=DA`%,Gg&gO@thFVEY>hXLbQHo)5EOceJ95I8G9:oU=QD
%oiW#!?ilFC0b<#%]o/nIFU#A"HLoYh)\Jh9Z</e[s/u.#n[e$Y,^^5ef&(?jGPF*,-ct&6*d$RuM@B^4T;*EdZh$[*-Rh[hRWq1]
%lI)27SWYFh`JMY>AN1!(N:'m/VJUOU>2N=bP"`lC8_t5PkDGNJo!DLsWaAb]DJBfK<]>*Ug\@*(DY(dZ=*J9h_in2](_0XW$A4_t
%qO$CNSqs!h&RW3XP'8UP\eE\3;*^HN+thE.D.9)OF'IGC`?e;0G[P>3BS%'BPq^6:m1RQ-2"_Vq$l'V9d^HN$;>2,=J_f_6Gu[qN
%d-h<#*b']cL&`2aHC,Ku).%:dV&R)*W#ZE!5/4Wnf9(J]Z'QZ?Lpo8!]c$ZO=8q!b2_4C3#(ADUMHKL)R8o%FQ8IWEM8K>TF`LU^
%E4,8ZSj4QG13;Sl2SI.dDE]h6.;Ack8ni-Vj5XQ!Ws"WSnq*eNhCR=*G=C["0V^h+CKiT2rm-%#>Kn@**9Z[/921.B74<52QWf8[
%T<A'jL=1IHdO?3G!4ek^6(H)=;&u.oI'`!i[=n-T`Smi"`cqDHPj_UA.YjRS=VQ:&GLQjiTFR!tWd-$CA9>M5<F?MP_S*pgrqo-V
%4#OmQOS[_dS-'G8!iKi[XC//[>.::ZGFR#YaRT%.:2Y)^VueDD*>g`jWVrXDTfbEG6S>3.VZc#.,?C*\_$aX(("C$gdj$"ed$QC!
%="mn]X!+;t^=uL8-(nSNr0=,UdtGKu!/FF)Xe6;qUH2ABr.@n`P+KI/jkApA,Bd97*c7u,#]%S"@3-FMQ&&M%l#&k/DG`#p9+g3F
%DVq94TsI/7X.&gMRABtK1jRf6ITj9mW9[d0*95aj@YDq$T\uj&dN\S*3gnmnZKf=I_AF#.W)5&h0B/p($[dUZ#)jDd5>l@ICDe.e
%,hA%g6n9M+U-pnCi/QUA%nc7K'mNHu-JJuOUIZfKXlKafj9dh!5>;$bQ'T5V^Pm13b8BFBR`7<OXM;/:T-p#Qd[MPa7U-PT#HO3i
%91IefMLN9cdnq5TP9jsn%uXN^>:u<]EG#+V;-3)"N4N8f$mLBjA).E-U(I-%RD3+.Z1J$e/m1-]KZH72b6c"4r_6W/W%6sM[(siM
%KU)8S1>KMNFY0GB`!p4jRV3`!7Y]Bn,=W["X:D[<P.*,QdoWU9p41&!.FNHN<Df=#;kNAK$B659CLr"1$?FPKH<5Led%iPa(6*2W
%e/FV0(]NmoP<]&EQ(M<cKNhtc$h;lAIiY?FIq^pX&Xl=+WVA>;.q?^TIi4c\!GSA7jViD\RlV/IH^g26cMa#p"$RBq-Ge;Ueqg94
%<T^.u5MHiiV8qV,_^$39qe1oEIJcEHX&UP8Gjie8ZE1(rq,(cj/;$7m;QmQ9(1q+E^]1<Y3Eb4Rc!5iKW`s?q`s$3^UJi-G_/,V/
%"`Q;QV?m;0.;YCTr>OB6pAX\c1WU?J_+(Y?&/c8X'\<L.<XY>uGIW86S4Bn2/RHOE_(M2mcD@RgG[u'_?1?0i]T's;U<m14<u@H"
%J,Xk\CTCL:>3*#^94Humj++hCcDnOglrP)g-$kL/`2\8L9=PX*d0i>'!Q&LDY?9=1(PC'b"n?*U>$AmI?2WulY.u3>no+MN(Or8n
%WUOA7pO"r:4NQf,*CQ0:X1'cKCUabf?98k]`OaMeE]2#pX(nN0'o2Z]+^YBrAuk<#mMCWT_j>Z)UemtS0I5[-7P&[g;(m&JjY>)8
%Mu?0sI=Scg"q(H6?fJYIEUa9OHKP)uMq%3Zn7DpBKshc]2V$$sY>LHE8Sup/.<65eqRN3%VT*ruUI:r"LJsVQ=#\t6lHIVeU?2uT
%>sr,kMg?u=qB!DI@C2ELN\G68OdsD%`ZMs5Ap;MF="jGXmc4ChHWH;l,+T_H^]R5CUj^hYk=K])X/V"]Mu"\VZ-TcOYP.bk`:eEe
%"Hh!cQ\pe3Ki?DTBBY8+A-eRP*\;9j9Qtfn\A-H4^M#-\LmALbKPt](ACr1rc:Bf2B.Rc'fnG8,,tAq6KP/\-_+Xn4%G`WEUTBR@
%R@#4T#N".<8CJRli=h]BQ>of?^#M5M1F%rMif]QM"Dm;6p%UJ]k9r%e:5p:`7=7O9b1\U.^e,>=?V8&CMaFo<5I:^r8;ltXUN9F8
%>&D@RBb1t3dM]/d4c5GqrQSI0^\uo:MQtZls3,Xt1]_cH,T$.?$;hi3eJ>-\J2Id)e5ca'%E"on;D&,s)HJcNiXb'8m\;n<n-hnB
%Wa%iR@1bgOG2Q_Wp?+YHbhELi8JcIUE;[C$"7eIs2]Ef\"RUo5UPF=m,So&d-Ni$0e\`K;rSiCn4sfAC9)h56nFLT,iH:3QU/p;=
%BM&-sruWhL+-t^79=Pg3$`*g;q<r1d7'K4T5A9VRh'F4/h\O`G60CZ`Da$b>8R3PrV4S$)CGjef737<X#6"PFZ=p9?D06X;;snt1
%*p.k3TLI`E5MiJ&$p[Lj5L^>o[-c6(OKKGr*:1n/b5;[=4!Kl8"iUP,<_HTbq=Ra[pm8$QYl]BuoF>0__Tue>/)RK79XV4*leZ1o
%2Eo[1,ff4+;QVqcgN%)LB=-D##8J#^"hC`>0Uhi,<UU*7M4XsAdafqJ0rj:R`42X!-+DX(Tcs@EL;[*gBrRFCT@U&jC2rI>f3Ce\
%LuP+g[l>?GW;c$2i0&a.Q(1cP9UYF/Q*/(?&am,rH;AiXCYLLUmj\%]C#q\?g6HP:'P4k?ion#&><f.]WAJe?69n=M[#jVB_O)?!
%l#[:HkP'sPLCQY^SF:_rjL1P=mA=4r*D]a\f8*tZYJ:($6@QP)\$(4#6809kK``^FBAp0q&%8ZOV5%BA8D;1A<95X==$/G@N(TBa
%6g+gYN2jX3=TT\jYBsc[;^oj\<.TPs>NERUBY#[q>!%D%:B90-;F6?TmcomZOqZ*eC?ec.&kV0kJ>nF)&rJK>=Eip*l>,d.,H97P
%F-1.VZf:'c6V_):HEsob0)p+l6#9DB/_5Y,k)Tm:3**C#mb4WQ/r?<<Y13:c-&VKAD#*=!-"+sdqR.61bpjLZS6G$N'"419*TjOs
%/bQ"p`i@>RTo(,=.:6=9F@dWeL-\B!#(pFAkb"/LW$W0`:iq,pdFTXOMo^)\'`>&u-`L.K9culPF572g?;"Y=m/^i7E\/*Z^GM-X
%U8C2iDCt^Np7!?4NQ&Q'e<V6tjn9E`J?qS3i0ip:j#)j]-"*uGnoICkA#dW!%$Q^M]RX`Jq'4R[6='Y]>U"]-"ilhl^JYapjnB!u
%Y8AMUdL0I2;`<kO-.6ZaJ>JEq1YVZDk@tg38e7'sC8)d@mV!e2GiFW0l3Zj5DC`"aRn>L/85])0eKBc'`MUDOeF=7%IUAuPbpb4I
%%s&8=30C(pO=>Rh"%nh:M-ctELKjhq(g;B3\98+\&Q3?::U=egl6>OCib9('1O7\!?2e-U@H^m-4_>aM4!rkkQ2`B]_s@a0aLqCc
%*H`p`0(-t@Kme*C)&+N$oKW?6?@Vr`To^J'nP#$TD2<35q:,q)4lG9Tj`;u&?8Co*SB,<SPbO2U5M[crUrH&]609`,/6^FPPYS:C
%9"j;rIh&XRl4peg]=e>:$-cCY\_X"5SXN>K<>V;=%)W,2D=4*W:(ga+1f!l?DNK'=h:f8+f^JO%"qf92_(VP693m!0_$)8_=_#j,
%A(JTa#pAGGDP*\02Ak1l]Rn*YmWa6[eM,X*rmTs,8'WJgSg(HU*]d9;s0R0qYes2-emO^W^#/@?e%'4Xe*hOfC>;V.++43kBQ[R_
%Asm^H^"lqtII5Q6\>Z=Jq]Yq+NfE!)'fM6#Yp^<F9V,?%E`f_9FU,:s99+:?+)eV<h7PE61qK]>d0iZSe'Gm1/`Y/O>lPL`k>Csi
%4E.bfI'+?]29"NqemF2]R\!S)=7SOW"B&P:*GSYZ@uA%^9(WnUF8V>&#V:JD?])K!)!Xq>);:pbN;SNJNO/W`eGf>pn<Kf1CK]&,
%7Ao`Q2ghSIVA#@$cH'>ZnROS$[NY+FSHBa7l%b<;G?^5=e!?t"Q5io6:>FOQ4a*a2FZBn,b#Z8_bC>#U=8K,c5@6=^?L:bVTpYlE
%V0'q-LTs<"+KgGlAeu<WlF3lL01@B.5q/4]o/_e0.+D*rH6c'?#R3M?XA&k.kWW:Kh_+%G+,:<M<&uQQ[XXa\3.u-GfXl*Bd:#q"
%W<H=i/?ZWmSIA?CSh64<:MN;:$<`1tf=XFA3*:d:*3VM5/9^?'jgU0Dc7W@9W212^g5n@\KKc"Z<V8S`ErbO*o9lN0#\<pVH,&(S
%&F2=KfKrlF=[J<e.75:bfE:Z//4=ot?:>;o:qaBVda2sAOc4hk^=:'#TtCm@-2Y/")`+IRgAZI8&!C/(NnrATe#qdQ*A@mCH+SX@
%dFg#7N(DXiPPps&WH/#P*uL9Ri$^2;VCeYobA]R=N>+//&20Z=>oKXXMX0H$iGH\eCt,]cp(@C=g,s:WBpm$m'e%.t9n<e:Q@+ct
%DGh/*HFHbsh#8p=_qXQNA/Z=;Ci\NjLqUZtgPW/\ODIN>ju*#81TFJ1JlLj18_<5UKYum9;C7*L1Ul2KQ;?#&hX:77K9^;/e,?TT
%ANs#c+'nFAPr+`f'V0lcjEKER#mr<a)5SiTQa'_s0CHWF:Z(#IX#."j&I-c*0m!Pg7+6TZUcOjMiW,4e^m9_k(g9JR*0rq1/^?k*
%X/lR#PWDr<bmk+*+fY)/XX"4u^ZOY@Ll&.8$oLEg1/.dSKOuY*cjD6bOsYF:C]kmk?msfY![uppcb#_`g]<AOC"V37WC&!F#:'i/
%rIkmh=X[)EI9.u%,mDZp\mtU7*e!5K(CtWlc\l"H;7Vo^?BOnWij-;4dG!L@r__jXkH<U`T\JhZ8-lcRON9te"C']AH;6V\cTp]?
%rfU6@G5"s+kROYB8p,\CSJ+2sPsGs*D(c;=j"%'?iY-a=8<gnLCJI3Pp9#18;-((Lf5J_".@q>5:>>&Iq#'<`Y_A3!LT0)urCamN
%g&HO$mf5@KIro0W#Osn<]K[$&gfV(gZn5:I16O:,>D<dCY4Km>gK!Y=88`b>*8cmA#9fL1U&,a:1US3bA:,P2E6LU?d`^1hid]0%
%_$2S&Xo!7acS+5X,a>N$6gNgtRR0E!heM1.Q\T2Sqb%%q?CV,'`gu?RecWGI*KV&^;peo#Q6:Dhq/-1:Qp^56IJ'spO.0hS9eq(<
%q7^591A,o>'%e(aaBQh9[3'pFX/.8@f9,0h]V?i+>]QF<#u7=Tps\+PmYW;'`Jd_P!e[4QSiddf^Lp"[n#fU(ch$U,o:Ql9[.Om5
%Rb8Ut@SQ5bX'763^Mn$sX2ao/r&ND1#?:?#GS5%ioP"\G<QL0:<;j?S3ebl)RH*It9#'F0S:pb1qb9`MWhMncf83=jZ<++,b>(1C
%m^F/2't4T6/>j1c5;-D=gk'b;<nr:T`D#^qhQcN0OZd<FBLaF)I5l9)<Hk2*BrO%]#g@BV$:=!FK"4"8PJfcAL3%1eQLF5K[!'1/
%hb1IYN^[Xk4kP_5BrQPtc]R#5WcEu,du5$.P+V123Sf1I%PF=T`7?-da*OWfP5*Y+NlY<Ll9W.je;SR4<t6A[e8ThkV'Ju&0ql.f
%?A#WLWsS;KfbjgD>`8.YLKi>%B'M%1:bDVn+j%_7H^1f,">Ij=TPi5X"IX-lB('c`JaK;a?$;,,DEY@D#L@;-nDC!khk0^k3PGn!
%?"RE'dD!)r9XriCl2]kl/'PSIG9AcjG-Xam2^I/"qhPG&ou*.5Y'FQWKjE/Hqg1,R)AMhX&6)2Tf5],7q6hdiRCg1Kl`S5*_enK6
%#XD@@dYW@8*n>!68E[14&Mbk"G),!nd!$ooi2kdilSB/Bj<Bs']&X!_`/gg.B5ZFk+gVC[PDJXP@8<(gM?4V5DCqkt[]"f<Tb)Ne
%/MM%Z@>U]'APj1GkpY+UaJh@dWcX!*hc].=QS&.0=a9Ikr.XTtSRt8*>MQ^qai&@=Z.r2Z,aEX$J9\0g8,LI(,no'TFRf7Q4`\Mb
%(W\E)=E//F^iIn5HN3o`Mg:4[^]%;;M*F@8PE;-Yqj488=.>3r#j)Q'm9X.am2d:U52mA1dV*X+_H2(=R;rgp<"$kui^7@X!BiF5
%Jl(*P>"]fdT05n!Hs+3cQeYXjV8(p/4%f5`X'pkWq2Wl[JC;jJo2PQGD8"tkP/X`^WXm^FAeI,Wp@Io]Kj0AoCIDr10PnCdaa1D_
%$X;-31-3b`P@./DWeUD-LWYGfmZ*pn5MX3oQ)W1G8'ALs]?Lg_Jc97M921rVq)RQX(QHbK=@eW6Sb\r,)rX-WZQ[FK2Ejc::$!Y`
%7Cq0Oqhd9L#c2!PZttJle!r"h+;"C\mm\qS]6u7n\!dc5CS=,.Uc"M;8Nk?Sa@ZrN<WpE&]kmKH`NiLeZ9!I=LopVW.'7SD)HQlW
%oC%[SQu($^m"0O.7U4(QSHoJ+K/U-dWJX.KO_*?P9D*.rVt@m&cF-LE[HA:bSI.p4O3"a&fD>GM>k6Xg]W5T!=>6a8ccT6oC/KFu
%YN4VWa<J9m;bZtc(B0UY[#K"b4iWCKh&EMcfh<CC&-DY(C\I)UqsA.4X)gm>8]qh<&@UYOF1@P!j(Ec>nZ/(B:o3WE(5iPdk"hW!
%[G1`^D+LIgL6q5HgE6amD"gnF!U+L)f.@6-[;lOrB3fIaDW8_@)=F[6"*qplDjaW"jpR'nW<W,H=Z+"-72SM"l3c^djIcHs,QH_(
%QdbAm-ZaK?VWmFnO4lT(L4DAMnC8ejK/0!.$]QYQl(iQVTh#'iG;=#d4R1A=dAHkjfc`3ZkW.f61&T5FA<fdHBBFe(#kO\fGY-$b
%lCd!K+uQ"L;$GCAgd]f$p8\!1ea=*48_*'f@_2q+#">,5pt8_KC.fIPUsYHZYH5>jT,+Jj'9rOM5gMpB(fUTu3]*[b3.6lE.\eLm
%CG!cCgd(5sOfOQp=,!YB#AFS\s*m7E]NaJT:?Z2@El?[>WCci/2]XL#=oQ*@gibuk)(PS3!j-[ETNi.89+a@+WBEcXi!VLG$1_od
%$FXF*(+nbk\W4;]29'6VT/N@.ca)`a[pUUkLu5)pa-WR7g`-K1NqNHm'q1!E)D)Z$&PM$Im@Xde(ck^D@-IG<jh'!D&PF;j(5_CX
%jGLbrAP@)AU`bFHHea,/'.gJsBtL&J5m6EKJ5kbMrPLMUB&jE8;_`/M2W9_?0A$huL^_W>T?!<-Q).dSAj0n_26HYV\>L5qO;r7u
%el/m1eCb^"p4]=RF/7Ht?=1-UWm]^dQ/=NF7'QemF?DhjeQdS&dquam7Jc#K$J?+P++Ibl1d"dlU?V=6]gf!]Z\'8MSuL3]U;2"s
%jANLr!!iH\MB.HsEckO@C,kF`H)681ljg#9dB[5P6]55a^-9.R@u91\M$SLM68VDm^Yd(]4CgcW_(Q$Uh3@%jH@5PVBC3X*mHc*n
%9hfN`M`Y_B[f'3M3G56T5jp(5<u!kk8iB,C(5phE19A))B1h#4\h/6NP&Snd,(#V;JcrO\lZ.LSdlmVYiN+@^S\ZD`970c!o7EOm
%b;!3P@rG$h9"#!.Qde$!Z]5Y'F02W,!umjG\C?Y5OPC+ki*cuQfq87m-3'b2T!TEtca)XMhRk4uh$E?CKVneKD2WE",b9!P"^ed*
%n:LB+p*nm7$P:T^K0Ut6LY.!QE='+fU\e`)W$]7:0<;RY)r-QLo'>/di!ZPl(^H>PAZZJlpm8U;SIlZ,/,^%HZc-cGg(4G4icA#/
%q&FHi`DO;^/H_)Noe\AiHGTh/ifcs629:gMk-#+U;f*"K%'_s;*)GZfl-'kk5L$J!*:)Wg*>*Q`W`@RCQ6SCICZH4md^,*XlHuun
%Wu<d;g=*J_KSl>MHa[Hec#eXrUWU:tV_)+FCs+t!b#!Ndok*;]PGmmCl2)"WUAu%4WjP8+$;&g@Y"0X;B[LcsAXS0_WiI>D`=<R1
%7&">^gNDIJ$)NouT\s&Wnl<po6F*\e.TMF<DuI-D(_N/i_kp'ZUXpO!+Pe_o">?h'M_]Fj,kqg0RrfHNA2'U;-B!bd\.jG)f3M`p
%i3sSK?kW7DT-%=go_h@+=$%LWCO0S,gUX+P><ff*$>>uA:-HBGVW5ZKFb"AG62f)^8R%bSF9a7&AeK8.4VnFclT(2g3/IQV`IZ6>
%'id8$A[5q*!VGR@DsL<MdSJMQMVb$mN$D=HoutnGpVfj'*&?G#h(,1r+G4u1RTc^CCd))gL80(KfD,&HB(&GEb`%s%bX%rgcW?E]
%NDF*c@?d`lCb;IFK%kBsa_)A[Y_(2"+'C*MenN(.cLVIWD&Z[T;!#UX$L7JRLLlJ(X[1X>>l7R#VA`1XPQ'?3X!GC857B$!/+jcb
%Y-To0.3mZ:47Jrjqi=UeRd&W+I1#t/KF]]iB53'c\/kCprM9(A/n@<r;hX,_WZ5j91rG)%_-FRPq5+H%<nHTQ1[W)W#08#tib8EQ
%?!rSR+>[N$6TQkD>tMES]thlDE?Xnm\+/BM'CA$>72CNUpV'+>[KZ!W6r46+7X0/0ju/HuqqESn:N\D$/<H/:";R'g'&R!1%"\s^
%8Z"&PBdX8J_+.j&3gu=++<Sagj;>cTXA`/^Y2AnroT$FDs*bnInGl=QcR3[nB#MK0c1^eP,=C$5$I1[`D!1ra]R-moH+K&DVq/=A
%:c8[8?dJt]cV:fkRqU0*VY9U?l7/=9]m2]4?UCIIKI=7)C<XMt@5/&e%sR!eqg\Ous)S/7^\t?cr9s[3J,<UP?YY;Z,2^65(TiG3
%RlrX7e.>QRT)@^1ogd?lgROQo4mLOddBuD]"H(\Z6\pa%%T03)S[BAKH<0KUGgRTQbIia[4h&JujhH82oJFKaI`$Ccp*9nfaA9o$
%EgI_je^,`mT/n^1#0Ek3K`kJAFueJ/8X'p")[[-L\i+!.h"nN)Z)[4)o@6p3kq19?'GC=-;a81d5ZbgP;k3sP;&WB/lgLZ&e%h0%
%2?s5Eheo$!j:V!T(CADgO%r)^XMb']])qAWpsA(=JEWPp%=he2Ds`G3U\-V`Pd0i5gNc:N%dsrNb419'q(2?$1\;UuMYCnk_J+<4
%I+)^TouShF;&?;HU)H#_5ul^-W7J;5n*dr]#f/:-`;d'DoZlS+$hkb*30OjomK*gOBo(.j=/+7P]QV50!YFT&cPMZC6Xt?gJMt6f
%UT7\$HW0#=+ce^P4^6VU@@t/-J4;n3kj"+qXQ[Y.M[OF+/T$Zu)dK88&Q#nM3i&.j')Zq$9O4;p`n4G$([3iXJ\u(CVk:]\@6PSU
%4Bf.\QmpE5WR6sK(sPD>eGd`H.Vgh(\L`-0YLXAs>d=\90[6#8$?*8HFP`[0,t=pFptr#!Y,8nk5>uBYn;.oY?pEhJH&9?Hqb,:*
%6R.;=.9brm^>!j"(<iN_NU/-NYshNqma=u`bU&0AlUQ^q6JqTk(!b$dX5tQ:<3%$Z=QPUGh%EFu/+WLn'dtdnkGtC.)Yj6<ifJMD
%2N[C!(NQSM9BaN`XAQ`r2uiZ.=n_Lfh`mTZrSrD)2^rQbXYOX_;-Eh??np:Y&W`^]f`LIT!%H4OWZ%JDqEDsi/m^+Di'8\lfAqg$
%7e@iu=/VZ2k%EaW>"!ZRm<ofR)Wij(.7LnFIU^Pu<O(r7''_)/&Be(eI!@Jm#U"ss#+$qu6RAXc6@Qgp(gfiOV2=hAo>)nd&Z?*+
%]="K"L,Y3cWs6*u-6j-Bn2Zq_C#2-4niT=U82LMJW[(q"5muE+K0&S>FLmMfH>aFj:FedCO"M>&8Ea\dLf[/6VsWfmR@+_Bf1COK
%%1M`iXtljtBigZQfiQBAM+H,7c84d1V%83h=$<><BeV)MZ+O*k<+3D#jKT":/D^8((VW=%GSsDjV&ReXcM4G?M*2CR3.KfIL$6-H
%Uf9rQ=+`mf:tt]3=A1]>&"T3"fU@!^au$SSE[WcE_c'_I-RW;?q//Ms)!t*fTii2S3P^g5Jols?,HoL<^:IYgGL-+lEb'H'TiFE9
%ddPm2pSb8(h%d_?/iR$L[$=I>Vtd,Vf"pr>PhV`lCnA[R<K:oARnt*1^:j<9/6t8UUkERq)E>DVU*p:<(dP!t")cWLqtE^56s+^/
%F^kJdX[H6ZN7-QKC:7b<$BPm\H/q\CjRouUhj$g*Q_Qh2)/\o[IY%I8EIWu/`pjcm/!kE'$,]j7"RJ$c&aR@>%]cJK9i:)8l_Flg
%J7.1E)4#fnG.XVr*bhjF:`A#MV"'J0Kc(KWo%-+m)gD/M3&r5plEkb"6q(*MmJN>4#gOdgFN5^/^ZmRh-U@t;3?VQ#@]D\D/\QgQ
%og&r#;$BBRaSOCWMF^nm)I.]N?C1\K:4p1Lf^2IkEb(1*)[6L>rM8?XWZiKFbaN'\l(V&rNQo6"]>Q!2q8]g>!ZT'7[:JK[)97SF
%e_tE.+nGh>5qMONI<9!6+SWJEAK>Qk%ZtGkHpFa0Xct\XKl1VQnQe^h]b0L'fH"mCW8=m;It%)%q*kec'N[]_oN\kY=5B?-4AW2f
%9Dfaods.N-]odJ1a47kW-X,m%f'Y#b:p[%$MsIKS`".?Ao.M$&Vb#hr#$7c5j(;c<C%OngHl(c&]%_#D)Rla,]pNEF,rA-44,_pl
%TOdI;ajXC2nOgTB2!aDSh\I]=+V_>:%V<5.mNH@Gn&LA^59??gf$4MK[g9QorZ<A_4Fb%aU,-c8dCB149=]+?k-YtW^j3;-EBP"%
%?#n_40CZO<?_AX0jXti)';9tH2T!hPl6aEUmV1GH#E'El(pZfV[ZK2:DX#Ms2!`S-Plq(:.pg20Ki@/WPo['^nCOm?k-VVuMkWN&
%P[WT5Sg><1V4]1<aA./'HqW</@ieglf8,m6ODE3bRCK3k=<b**.+C_nXOD/sYKK@%?Kb9?Gs1t<ZY'//Z\I&B+X1QW3fQ0i0V)(`
%L4kPD3_]&rES9;lQi;3^N/BD8*L]I5bg(9*`ip\1&3Wu04>"HcIMo"Wm>Od((dJO1;!P;(Nt!Pa<I_A;1e6;3b0!r'hRB;(?q;8C
%qDBjrDf=\WfF+k[Z_WF5>KIm`5I(jIoMGMZbp-eY&TJGr8qoI[oKce6%Uc9=Lhq4qZ1(C`HE@c2(*uUo!NAtqH!7HM6;]9VH/KQC
%n:S#5NIoG'"h$-V?R6f\KWH(iPfQ\u]$&MHHa5c0R&%X+BLIFBe<Pu,Z!m!.c?VXdD8Nkn3hoVF*?9kU<)+FVCeO7fEZjls)6mk:
%p9ooo&aA.UCo[2<%>:jSdeE&?MdM461Lb]1>`3$ucXtu>24ZEXNePEZm!Zi\hNB"9Kd=,N.#:2C&a>VAMtC0=dlQ:8Y$XV9=;!U1
%'KN4T$m)789n'8R=m;MI9qn/6RNFZoNM9b!-HqQPY(fRC:n'P=P0[Ph\IRq7aMQX360T#$L<OjeIgJ[FOFm4#f+YkMMRG`2$&b9d
%J4cQ,K_r&R1VPFV9*`VCdJRJ6[pVjq]Y[M/Z^#0u5r%lYR*%93*RggS@PCErQ*"DS?V\gHe-%:YLo"E)'d=q<6;`/W9?/u!GR7Kf
%cPFfAB]gVDjGC]=OQ3NTB?kX5,*mqa?r1-+rsL]l.cUEGNfgJ^aV\]8/^iXW?dJ*hVTr2K3^d'*8j!T8Y10AKU0dMh*MIH23Jb5K
%4p"t?H1`;f:'Kf#*1-O7oD0ojXBiPZTia@=%U*\FJ99CXW'!m;`W5a&ZeirMqfs=!3ElXD`CcOZ?Y_hbm7YXLnVI$TIY>=Ua#cta
%lM)VnrbF:=0u8.$-iC8nC0a9sW.K\6F'DX?"HF/#26$)f,u(Yo1*W&Q;ahH^QsF)3BHSMV'+nQ6Z=O+GO44nD]bS#(/"SknYAg(o
%7A/hOSTT<7QK(f@A-X.O`&ej-5h$^8eVo74SB[/O/O9?l?4CFUU+CFpega$N^_j($[WQsEe:4K9;Le<,K2[XoeCI=K5ORHsG.H-%
%BuaJ]7.+><6Rro!rS.fq09Y/RQcq#PhBDGO&A8#[r>fB1N`-PKML`B5+[Z`[ij0b6.!:=!?6="\o!r^tGR_8!Vj9;?U7PUn'0RO\
%-]s/P;l&N+fNgttVH/06d`I'J;FiVrqtq;IA(\$$WmN]gas:ti@e)4b#lJ:<H8RE**`4^Y/3)!YO[CPVbb7[H#,_MI%?0K=3J7)_
%GfleUCgKI<8K1&W*2eEXAIVKPlGeRnAA$NgQ$V[,@&UW""'gDa<B-;f;=%nJUHe\4XnU?QN$-@AX5<pD+AJ$VJ?b`Go_i^pQQ6]E
%GHQ=Z.?jQ(e>17jnDG0iasDP)H?+a=rm/<K]=nh^PO_N(jcWW/&fAT$._UCS`(Wc5(.u<!JcU>[aRr'KZY1/uUh/7gX11Z4b&]`a
%qJN:%:rRUWpN4S2/&1!'[G+QUQ>be(U!3tB<mE@Tp?QP/g96G%>_nkT$a3uhr%8a>b7uTXDq4bVQh1:@Ne%QjKq304F0:Y;g"Rr)
%?=-ol&@X_TJC&/'a&Kdo/H3NhqAK+1%SD5@%ZY2q+jesb19*l%b@_Q(Ao*a<PeECS'eEjDJ(WT=MTs?-VYiIlZ918NluSs_=!uhl
%h[7+goo@El:(Y[s==$?"Po;EhZVbuaJ`EXSYY[c5#6L#^4)QFrae@QnrA@:OkKBmf2(9!L,LUjR[G:*aJVM)7?oQ:tFd9)M\(^9I
%S(!0KIAt]""b86_mCHAbb"?`@\]G1+7Z#J>[)f7<#%E,tql#&OhBbEa5;C$<7tSO00rr@JB$0Q83\[9d4C!k[f$Crscj@gd;`LMf
%Lf_1&F!cSCpD`Bp=5o%1lBM>,[-+DTb'n5XLs6MKK8/)XfXg1u]H*dhH+Rm\40Cup27>_REjX#Pp?LJ"2K`/T;q5K,N)UtZA-$-Z
%s01ITi/d1[_dC+E/*aZ]O!=_oQ0u-cBD&#S73Soe48+JfJVj.*J1S[2bL-*fB>!<--s_PhO+!hda_<N0/o4[&;Z[2aMT>=?P^i>1
%%c$Dk-]sR>AB^?M.bUe3Y"8J8MiRncUF%,]b2K,XA^NN@?Fk%HV^<7M?`+FF=cA#+;tcYN8m0ia'$jWHE=(GV_b"=`W1)Xiomi8E
%g30D"Y[Y^.F@DWA`Z!1fP8i3_(72OXbO=X:Em@iB&VgGQOtY*t:mfjNc2>@)Y`B$NQ!T!dPQh'#6iDfQe+>*Re/'D'cSsQ6Lut*p
%*;+*GAu*[1&oH$m(.4qQa+;]ieSROB,N">(bFbhYk0JBHBFn"FGs07,B5&IGoTR$HM]6-'AjuE>'(;=am<[5elrSVj?lPin.0Ug!
%QTijNlPAq6FIDm(H+-e?5ortIXXH;\141B8S994GdVt>o+bE[]Hdi@d71.6"Pm=h'D38)k==\.7(GGUpQZ3'i"h1>9#W;-\No_sX
%[E0E`F)@1t+4=a#_s#s?;PhUP#lfDUMnA6c?aYmCr-'+%+j50_H@VOI.:.B]hXVViP)P;k!KP&e^3hk[Rl-XO&u="balnK1a,j9H
%XOMNl8>tfWNec'Grk`6ahdm2%ohMb._kA$?77KB*n]>h-$M5S"46i(j9;jcO<I04J,<<"'@qqsn4kpWFAY+e$hFHDpe%]X)('#&W
%$]2SYe&i'udmBe<bim4#0!o_ho3i.P\JCO0O@^3:`^fIIZHZG]):dk!9!e49GqN6oZW[jJ/fVrH0hQB#8(-0YUoQ@Y;=M%%-Y0>r
%CusG;^'(A=;T,#9,EO+In,QofkR9_/MN&n+>LtqCU"C46,.Qd6T&"sZL:T'#Or.=*1Gi-kf-Z2T^WU0H":]GL&GllUMK('p=pL1k
%.1QfpbHH^`X"_S>1$&CdqY$Z0IE4Ef8#H0b]R'GU;:J^.[OB?3-,M.1)9?NQ#RK3!g@A%_FK_7[8$t5Rf\5eG95,9,9>o`&$Fdj?
%g)NOhJo(*LAjDGg4LYD_87T7"noYhalR>V:cO-M#Pp*Ou$^*B57cHYV]c9YN=+6rgI;haH;g0a;Au=%Y3/1s:p;89I/gIhU_;HKq
%5MMm*#BbeS=h9a$!^"_n%*7O%FA(eYTcmSL#\`PK:23EFm$7?VO2s/01r=A`2\7nWa.ncNcEqMJUE@TlNAno@>*`G\]=-b#m5m`7
%8jh&7h68BLpX/[XO]eg?m57][2bFR+qN7=R#W8<!hX=2s2,!Fb<<lr4KEu0Y4N!jlb2V)h+Z4ME+BiPV%WXTP#n2RG]j=[c6f(:]
%KH/P1P$mcO3`LanpiAA\hC-!Y$\PMKR#rF$B%[#?_V>$*>>:Hs4qj&aJ+[/Dp`05T(NTi*rlg_:M2B\4DTkFTmm9Q$Qd[+pD3YFN
%DNQQTWT5Qr<u\i+b4/:Q@$BN\5jq:]-e!$Ek\qGag^PEdp\X4oA-;1)T=n5*.nb<c;EdaeB..']>k/RB<MT/3S$W!m!nenHH$[sS
%2c)8Xn2%o&fMPm\74Rrb`m(P\8J1u2Wa>H'AuT_S&ZfTh*^)+NKCDC38o6+3*C\3)I>3nrGc(A)ZD\R:a:G'2-eD0ZGlZReD*+0)
%F_:dR>pHn^7G.9feULA7![)]HN7<5gVY*p]'Qm$QPZ57p#N!,M2Uhl-m94@S/?T;u94(-P7=S.31%,q!dWo&Wp+T4@-]4e7o#p+!
%*BQ@t$NfTQq&W@INuioDG:r;),G4nTC>OfEPV!ajJs)pdYN-.Ubh%e]TDB1YhHaN_GO>7&/6-mER0jC_!&(@_7+cEK9ZJFuhF)Bf
%1bn?c#t9d&#;P""Yah'2$h2-(!nJa8OQW=\MHJ%;'p1^ValW_>Ychk:<K1//?nZW*U,RP)l5TpV[PF*+=?u<QQ[$i>844jaPV(='
%;-kmF8dAZL!o2d#+E?"G3A$:iOHMJ1(UV!!'?mom43e[U,QPE!dW-4MWY.qdBUdI';\*W<HPd,6RKs#sf>1I/*ge]2ico03n.&=[
%*!1+l&uZZT"XVZIJnWX\n:F[iK,eQQZ$jeDeP$'[+ION2]QjRo?`4tj>?)AITF-&$MC>NmUKi/S.KB6tn*6!5Y/$&ZJmp-aPGSp"
%1!UO:J9$'8"BkIKZpVot=01)I(>bmH9%g=_*&4El]]58XKpr3M3ef]m,Y11hI[M<R#aIKYL+a8Am1Y#jfmkGC=63&nibW,$b;/b"
%SLn4ccd/*8FKG>:q((bG!7g>4lKS#7UoRpa^H)k:S<s@#qhOoWC(nj'es)ZgPP$A"n<@!T#\FR^.](]H%_Wto4KoP95sVK>K`..p
%Z1i)gI[&E)lAc\;Nkti6:[(Bg^N@Z>ZMI"ULd]*(24&#VVM5#LJj>p7@LSW]-'(d=fq5DTgG`E79aFe"`l96kN!u*6aJLB<c^\u!
%3&,UHW+qfDF$>Orn?cGX/Le!j]_gXhD6]G-'MPC;SsNEe<M5'&rqhn-:RhcVAdVCkjp-oqa=G>Hdpr,rpa!P1')PlN)9YjDZi$`I
%9L1TAMYckeGLo+I3Yj^>pc#VWE_9V!g/,1o1;tQT<qo);Xh82\f0nmhn:)];>Z0D0p5@&r)8-`X%+p]qKn5nnW`nao]tL%TdMBN2
%B.IRcCe&\7)$l!XoMWO_-/:Dn`VajVOIjN/aurt[)aksW0KS#QN.Nm(%o125ZgY'Nct.XMF'Nu)T0q,SnZ'_0Wg&WNK=,1+j,r&S
%*r&W2!bTT4o)lbtDA_Vmf3`XUG%c*WqVC8bO#W,n1Bmd:Cl?tnecXFsgC93TC_a:u\<jBeX7`spoTiX<V)]>O?sRDXOf]dZgCm:u
%HfXu<-peh5q$e'OIV)CHgK[:%c"G\\gJkH?UkV3.W*h7TI<@X#,utR=JDg@96^4HLX]fa86hM^UQZJ:[_qE5BIE:"t1)a@,nMI&n
%W$,Q9/=+t%5$2CW5u)8bR\bSdY*YB>4IB6SD]A)oD\Y@0Ek6&OQ^ul425tO7^\.$gc8KtWD1Ro"I4pq%anRZee#\\h*m]nOmeacr
%g_J/UqZ@iTdm=GhZ4WFucf83VBM#W(We\+<-[:Os3kqM5'?$!?gt&G%`8RDr9d3rdO3?EG(g%XA;ph_p>=cu&gr1bS%g9K/*gUZd
%EdUdE$#JMTE7\i]'5u&qQ^&L,)QFL.pNC`VY\G/$5`<5GlN`o%HWZlNL[dqk6_IS16W`&P=<Sb*]&mND4E`EY8\;_/dI/:hSfjAU
%(KF>#`8:[GVS,R'!62%t[kc&o*S&$,H^'V"q'g"Z2f<^A=o^h&.iLTVIp.FF5uPFJ5Kt.G^,L5Tg+AZ"<0uOr9"pBF*5hLZm?lKW
%&\uC&etu$##,<en.TmQk"0]baBA4luVn7e;f(3S*bD",^Hfu]Ti\'rNkm,U^b'R4F@n1_HFq2u#/RAsZ,)3==Sb4Fg#+D!#`7;F?
%*Q0r6?tj$c/fFg0)T*+9Cl&^2NbWAfULLYF,nE-n)4.$^Ff"Z"mg]E*+9()32,%tn.5$(l(\$6+ga[61jZ%]b9?#:rhhHYSUuFeI
%3HDIY/q".36;VM=._cVPb#7/QWADdS'j*p_h&.0J%Dk\.dNa).i4#dI;Z:N47^OB!=Q]4,o3chr;6Km^FX%SdrSD;(:gEk(_XRq<
%PL;!8Xk'i2.^5F4e-3e.dts&W!:*#C\FR<J/P*(:0J,^^&u^kRU-^[;$q6`@9fA]>(#j(QLQlqX:og996NR4gUqXE1G>Y^-I:ial
%1jLcn]S\>#SDd1k9#OV_4bO((J$`Ml#;Kaagp_)OY+c6]l+9)^PYM-*:_7I$Ch(g.,Tb(k.>,DJ[VClnZ_V4B/6@[ff`SR`oDP?G
%rtN4iAld!6TdKm#R#aa]LEq[5,e-[2`pN6P:%dGB]0!rqVeRDZJ95JCfOq.e%AJ,%k7+h7mN'cJb%UAO(RQS]39D#aZjpg:`PuE1
%VY7$".(hFF\_G>E>L.@7'!BI\X/$qt$+-TM'Zs3#NA-`GM/bdP=c7(LqCA)F/Ig`,j7/"V;Q9ItEbhG&1mNm!^tL98"gd;7M2ZSr
%e1$>MDR6_lXTrttaJ.&%VSgd5VX@#>EG9+@a-&[=di!c8QeqQh[niTlGd0S&W-N1!-maj\I&`DJ?bmuZK7bHr?9FZ(Y4f\OOVcS/
%em+Erf)"MS,YF(3.3XKl$\k?g#L[.*^t/BV5e5/WYN6r'JkC4B&_3-WN$?Tq*BROa7h\]k.-u_AS`/Xe_E.=R+n%_Y)JTSn:AhO`
%o2nWF,nU-[-.fVW.0N#K3eN77%`#':7_W&GiYc@SA??<M.3(8t\cO8^9_^/"D6>^LSb1hD,hA&,75@Vjj(:C.>MY60/[r2Z"RKaE
%JOHU8f_:/7KqVgAe.=QfFlO4:735J%"9(*&'Q`V_WnYYEG`(]]n'@QS'0ee'GaBC"+Bu(^1hnn<+r$j\r+`.,qHVI\$R@KUb/mXK
%?nTH2-T&\;96fc3]tl0hpG3Jt'oO+:C")"@1/5;Gd$nJ@:Yk>uL<-im<:)-\6YXSAX)9\X,7?naeTDk32+bHhQ^8fK@5PYB>-prj
%CJ`P87:rZ+XV`qg1$a'%:S53\4G215,,0-O1XBXI,$T)mr+Ia1D\'mZ%VAhGCl6+;i`oeih.$6,$,G/jibh!!+)S_/)(-m[\$aX?
%jAGs)Y\G0tPFq.eV9f:O*r+oh7A6qiKTF%S=;-H\>HhCnU732O-t:WL5cep;IrcD<U?`dj72tVP;fC4=(t<f(WnhDefi4HlEpjbh
%D%6dh,":AE:(m62:WZS#kdWNC^U%7TaR5`gaKOD^U@&!m-?ar[X&J=P++eR,\<3'k(6oW'e-&$?3joorSnO`4FeBi@SQ*3e?h*KI
%1Gp7e<[rYUFUXIRH:KB8OINC$A/L3K!2up6"shigqkdl+LA=MdBCe"?Ect]G3L)GU*EcY+N)QA3`skl3#5K$H@'s)C)U%Eg6bMW[
%D>66:&)g5Ih<97_e+q]g>h^@Zk-'?8dHZ%%I2Df4KQsmk+=,L#D$r@2$YcjJAM$J(L^bf7/=nRq-1"i+j[SN#e'?F*gohLU(X^>-
%^umj+L?8mb<..3V'NI5bd&<k>DY9fb=?Q4cKtR's1aOF$Q(-3'k!iUePN:a.iD)KrgI%d-\1KKHloICE'?Vdsn2++I6uYo2CAMiB
%L.Y3gbB[9L[lIgK8$(8l&p.,U^NDa)`TrSQcCsQ>VJO%o#KF0+^Ugug!b2ipYDG#Q1/&b%D08Ih>02W)A5O2,#)YhERf,+r.L_7L
%^@c)F#r$eaGDTSh]2]aU?*BK'Y,/.#MGF7BWsS)l0(T!L(Tgd0Mi.]?JtZXWL7UuVPX'g5IT@u,*.IWR'i*V5,/7nO3.'or&"h7`
%hG-_:XW\Dl25IZXL0Q9lB`'j9*PH95@1jj8&IWbd_Sc&W2Lt8a/up1/If!o=qZJ_\gH=<IrKMEbkHM=@q,.0beZ.+kHYdJAUUpTB
%UFUE6&B_,'7>BgC(=]%/_d$?G0V?j$)/=<UGDGTP0&8CO<r9'L*aTUeY\'_).Qilfp7t"H@]Xs$ltia!M[C;KbtGfUpW=&<'tQBJ
%TN=`2Oi<Q<g[RSa@(&D&m5bH3$7M!bl*Y]L6BeK`XuJnS)HC+qR<8J:(6(3hkUMQ53?+G-_t1&%W7KGU81&EC>Hip*l%Wbn]#h*3
%BpP^?WPiYu;!7mZWMn4C>2;_!61j8o.+-NC!._Y/XNHp@720_%OIfO*H\<_%ig7:4La:APeGMA!/STG>/k%&XI+!3_dj-H6nnOf[
%L9Z=uqsCh2IU"PLE#c5q7-"a/`;a1'd'IYn=:Op3D6*2-`0=rHO@K7K;6@N%J[In!>GLhfBukV8/1=BRjbH^=AD;6)/ADl,O2L^H
%rFeo[Q=kOM][1A]G2;:cT21%PifgeTpqEt'3(DWP`7%qBAZec5l!g=KH&`b5aJPfR8Q[P4:Q@6Y:P]mTe9Y19]8eJ^ghG,'^=QGU
%mC1JR.,L-+02s_;EJiT)VK&1Ie48MTZtQMJO@GfWY<,R).4g?*.p%r5FW%QfVFn!Ph0AYoM:EY<In.2m(udU1BjGU_&%6G"M!gAI
%s-M6"&[T=6V+Eo^,MH7&8b8O/4ig,dSL+I&:`6j\0o<29K*n_?=pLqNIK@p,P]XF6Q.^JlYCi^O-OW(AgRei=hI#>QVE5(36T;q<
%%+PA\De\_#7]&QV]#pIKhqub^-[--l?%@ccrII?bnM#&2MQUQ\nRB"<4!adm+GKs[h,4htW3F^;^,FKP/IU:1Xjqf`K"KL=,(S<J
%SQ4U'&>%b6\HJnulo3,2(3m_F,=]Yq3mNs*AWFn:.FA_K'\%Mf1;B>>'uB$[::,5".MJgP-I05XQALcn'K;.QW8!17G$7N1Z]YEa
%U3b.t\/XX_]3Xi2K#Z4YlW31DF<\1,n@O[h/kuC+1/&:Faml7d2X#!.^JPP$;s7.e03ESD?IOo4(+S6LKY"k0bA0aS4kKtpI&]Z'
%G.DOrju57W-/u5F6_#'n1!]b=@N/mRC(c?'R20`uiaak=oJgTpG>*/g.1=JuG)RnYnjmi2`]V8]_0U:H^Qh`HIMJmMnU-#,=Xd4C
%VOU:=@ee4=HV.rRc\W7]FaU?Oo+bRdSUo0UFb-6-HiOd^ke$Qii#Iqj-eb9%dX`APfOg3#H>PPU<ih$DL=X`G/7p]b>K#>NWL,6;
%JJ1mPneIn6,:2<\I]jSNNl@+WdZ5k(Lg9W&m_t:K^N<^*&utCu\%J-,]nCkb#bN0dk4&t'r$.*Qjn6egZH)7&;bGB10GB\6R<-Q\
%=;Q<d=D8,'nf\;55!'tE'&s/!as<re0E271B7!)ggdhKh*S7'orL)=j&L(b2W2.VN9'8*+g*mCZ$]XZNF*bWH3_fmf27[8>4RLTf
%kF^],@QPq6gtX`?M,e,N?>@&!WjXV$j%W6McB("kEWV1sTE!o,n_DLZjIt\i=KFo]:XtMZLulSL?(@)Ni[o0mH6c`PWR;>4fPVM6
%U]03$(/Ql1IqYZo#`%Ffql&\_ea2u+j3;Y#?t@m$grl<=1-1G.%Wsp4)AfN3m&=;-%^Plo&g/e(iH!g'Weh(0Bpp`%Z;0DjV-P"h
%@!tb'G"tA-2r)>;"`CP0aS=Qh;'[LP>";`03bW3u^08Q?3uOY:Q2"`.e-`ppU\e\DRbC[+^mXT&PuLa[;086\G240]D`7Y(F"je]
%S%EPRX#(W3<4dA<Gc3,kU7Z""3kiaUe_dJE7Bf:p^C0W+r!PsWq#(e9^SL,>'sr0<IqDYHX]jCf`3m2$QON2eZD^.b*;4i%4o;'V
%7?6ce3OgeKI(P]OT<Cm))X?4YmCBdKoa%BIq6k_]Y0WPS2EuppMl_cLp$hClFFb.Wg^Cj:1K>ud(.IKu66O1=+79Yh:(p_>n=[Sd
%i[7ON%(.rlhKOIks"W,&B5HA>O^FIc8W@0qQ$Kto\[?&[52&B/L5l-gH9h\4rDhT1;`[d0OD-mB>6lh;2PZ_X99I6=o=464M_4T4
%O8!9$0WY0;S2kR%r987rkj?)C$8I,_SD6n.N+5S7_B;Pr@\,dmgU(jVN+6gmj@f_+qaD[c8H(WA'hQM(&/sm[<G%YSU-'u5i<\GL
%:jcM_<m(J$/O(fa=98n.TP[_6X>LeA6Tfd1fdK;^^uR<hH9P-HUSKDO%5!1<AN^69=H2.t,%LB!-@[%`W;e.jb3aWFnmgH@3`1h-
%*s3X/6Ke*cY_3:"9(DdFJ:WNP"cW#TSb9Yn=9j+\ePl[E;(&H>VTqF*iOSrDl6[HVqs,g2l-X6Y7A^IE'8DruN3Dl]+&FCTHmX=i
%)b$H84FJlrL1#aV-*u[!qTj_6/BM\f>^r$XpafI#`0e/__eu-Z0g,)';Rd.ujeC!n&/rCGiXRfprRdF#=8C'RGsH.)iS`_DElFuL
%)nPWuNrasr!%gpkRRan[X`L\r;'9YLc^PG+R#m]l+9+%65JPdND$nf0UfgFk!@"nj/hb,jZ3SSFgriR7H3r.2"9didEB,-[[eRJX
%q?9bo3.Y\,1'/C2nO'9BkeR%'RJL]=djl/rmLS#7#4Wd3>sWkiO/J7VL-tWo0l*e"bMZjS_gj-b)>p`qbPaWJ1f,N1-PSlMXc2hh
%)]3%0BqB'/k-Z%b#2RVIo+bN'EoP0dDE7?^*SArp))$jW>r$G';cI-^noYo>IT(`C3dG:k>,;:cX#]]GlWoC;$D]:/.(g\3s+&G!
%DZ0R.\_l-JrXZ&5CocVhq$>5HTOY))C299d)r"GI#0IrnbIQYRKY"TgB-8q.,>Yt&g?ZBF*PIYe0#+uH9f+j[fN10'&]%-Z;TR0'
%e'H,p`LY\Re>aP:6Wp,C?8%UoRALc96KqJWU],=Q3Po$s_%-`)Oa#DR<VSrOZ4t>]bNBB!J@4WtM.AV"(h!`l7Es,$1K.o7L2'[*
%&=W,/>*btpQ[eZnNLoEDd!e6tbW;'\QA_GkFp.86V\8MfW/2_pRHfn%i@6gQO'+YGfu\[[*\gJWc;^usU)7AT!M186-^5$*asfUb
%BP^U32>+>F(s_j*&keZ'A(+UA/C3n)1Mj`k.X,/?C//U04d*%fmuJf"'kIqlR8]ED2Ct/nNRVCA>`dn8qHBdf5#Z&n`th0K\c!eE
%LD"6X4IZ!mN&.8Y7TFN2QGPQOP,nChKpR&&ao7;0pE],XaAW"'eO,XLBkkD@X9tt/U2GNli#AVg2Y'/5>AHWb#>Fd8kie`mpP2"2
%=e'0`kg9H^^jbs!#eH,CKDU9Xg4cf[QTD/8X;nhg$)-oPeTaMLXiO_X,#_0<IW&S25JetEP">%RWB!BXZN'fNZUEF&nDgB>NrDaP
%1?C6BONg`tkk:aO2+K)H9t)sc3`XE-Y&TpamfXL1\i\)-)00^h0ETog\j/O._`jg4#NCuBGs$(8ph*-`ME_M<kID)m#)>B%,`Bf+
%hY#U]\TBteH?R=^-`LSB6tV-j&9#<B6X,%8?p]j;c\X>,UOD%ta<g]4OI]J+Li51K"l$B[<6@\?jpG-<^emV+n.V3Y:>:Kc?:E)N
%YO)/U99_*0J?WEYZe;e7o$KP/kAIQ#,p<b-#(q2'.k=%2:dbo(E2@G2QZesL/p6,uE\[8.P2PKFT:;S$dG1Mb%`?Z@^nmr?A-UQI
%Y0XX^UfFZ_V#$f5Y.Z"jp,q3*TU7p7@3=1B3`KL`0$R1c"F-YL:ddLLD#&Rt*S<.rHm]m<j4pe4%&s.e.d*+g1Di=P=`Q#M?Q,p'
%,(_/D4#\gV+p!/clj%pDQn2d&if(bJTpCS5Tj?Ma&ed^u-FiiqO"=IJoQ8Scbg6o)L!O><>s%\]p9b:/hX70b9FQYY^er2!#PiER
%*pZ!P+>c4NIE@H/C=Fu>U$V4ZG!TmCp>&op0=Lpe??%VR(UELVa8E"bE@KP!DsfKtggF9]0\W\b3I1W[UK,)oCg=<5pe[%D)B9$R
%g!YD=Y3riINSmin,5J\cYOZoDAO9ue$9r(Y0]X!*]Cu*8Clp4#p0qT?WOT$"e>T4?`[!_\.!JO$a)UCr-)oI^8iRHhM>%O^D?Wn)
%'i?<@])K4m`!<\-,m;D]WF*#A7I+Q$;&/E`MW:1S_IBT%$RRsm3BUpBo7_GFZR:kX7sIu/+8iOtjR!("YsQu%/,Eb7)Na5Iof5U9
%h&J2Ec80PO/Vr,C9."7mBa0,3m'GejSf^i,PrI4'?RbF??!2We)@%O2]buT3eUo,^1H)1!+Z^VdN3:2]lfIhfeOLnem3=jM?&k^4
%`cOBBXG!VlAHuXSWgD(D98V3*TQ^n5rS/Hkj>>Qu$V4+aGd4>(L-5D!!^HY$G)sW42eQk70#$Q4QhBfn5g?Qrp,**.0Q2AWfYhbN
%rCkY$P7A!&*<BOMb4@S+%K+BDqb?O&b\ACTY)03oU&JXd_>OH%bm_!,o)Z-_3CGQshFdCRY%Ol]VeJ'7b]dVe3D;%<`s7X`1#38f
%3W[4N0oT_3Hk(U;QGgR"WWfG^h(:>kV4TPN6Zshe]0,1j"saR3Vn"SF>,(L5d20iZ?VMo'ZsDZ]780-\+pi5fYSY_]_1+d];sA\Z
%=7-#;rjA+:#e+4SnuI6W0>tJ6WS?u(^FCqZNCn?2o1MYkaWa(rqt(9>5D+,PRi'QZI!5HG8OC%L*-8dLe-NcWT$1b:3^d5b?/oVl
%C[R5^i7(Z9:@^hq3dK/>_BZl&@c5(6#2YJ(h;<s!:V>8[`@lK+XX6FtG=DrXS%PZd$q>9r8Z/C`">@ik0Dq_PF8<G@e(&>4<mnfH
%Z8jb>./A7tX0Xrbe8s!8Pbn#T$6C@Kg.DVnqnA3C1<#cGH>"gJ\qdd(6K+oBrdFAAa8..[qg"eq$MEM`4?R`/Lb8(0q<i+fZdf;M
%?*j_Fg\-*rEg<BUc?FIKSWR/9`p'S`E%Aa1'T(jl,="ck5O^@M3W$+Cjs"]7m$osK,%;I>N)PhFN1VMMbCS2M?u4@>`e.1kV>;ef
%],i1Ke+U?UJguf!B=oi'7.5=gftk3j]qG8'HXs'K/PhgMKJ1cH?DGl("6Frc'N_IcOo*Ep/_t65'uu6u-LZ>)fnpGdR*7QjkI3_a
%jL=OF7Z`d/I@Xoj7S`sB[&"'Q[5G_RBS0Tr+-qL',b*Z*heho"5RP&50/e6DBVToAXlGBtT"t*1&pc%qm4r-mVbQ(L4Q&`8NS>ID
%DM^(^jcl!WK5="gkKW8HjNLXN#ZlG[)`neNXaHmqdmrP35qlb]WSLf$o^SWPX5tKr,NZOc]a:4946qN^2;hC/E-r:*H#B^2ch0'l
%CaiEpB2hU=]Q3-;%+'FAktkZ76+K8F4S?raK`_k3<4>Pb'/[77829qf\c+eh4sriLO3E(o=q==R=gCOGC(&Q&BS`RAa%7A07Dt=b
%9$hTpa[jQT.*GU\-^c1OFtHNtLc[\[8)5uUKcDM9R6%6B\VC=uKGK>[5d+H@M5YKjS3uaTQ"3R9?rNj+mm=b!X$*P?RJ6H\2HNBk
%@^bPDh;7!Z>5HA6>,;u*Q'SGj2cZ1*iQ_ijgE$Go[J-ci69E-,qp&.32TR=-r$8;u>35UNO_jI4ZKHYoV5sB3?oI5m([QWX/?*R#
%\n=RQaT0n'lV2Z"NlK]HD5dL-;h<'f[)^a`__D.<(>+j<;&':Sm!H\`fjBGb2n=95)X4(0k'4?U;lqK<Pk[RC-dS6CCRLb)WC^0c
%60!LnOJj1"AMVK#h`F]J*aP\u2[PX.]rr->qD6'ld"oZ\;d(G*h!G;K;Q+U-GZlunJ^Rh*WS)W&S3#L*U<RPpdZZQnOU\^8WJD_Q
%ik.E]ZI]*&CM*nI)A-?L!pGo'ZR+@B0$q)9D.ue.[.m10&jbB8l"sEJ?I13(*e\fKHrn2uQT12oNDS4YlGVTr.u->[$b5_>`PuRi
%RVi+(FLAkWB>/\W0/GZ-=kfYt?;J?\pL:(jMpJ9V6g33cZH+aX9]L/2LpbhLqjEi=g5(Y@]nOq>e&fS-lo'gEX:32_5Z!@=UFgi@
%f/a@n_B5"(VPe!4)c</^`(s$lC;2F\1@D,nS^.9M=Nl/;a&-^&gkskD;7:X2O%<\XH6!bllS)jdS%jAQ?@)I%'<duVSYt#piI0J`
%dT"uaK'.#0NugW![b.uF0%72sgH=eh>:M7^r>N6"+u0:\,k&Bn9^ch;6pF9E7_HA+%bco0VKu*/DI:R3f6\cLWdmD'fdKLqpI7a/
%;"o:AE],3"9N0\0O6E!Gk):^IfBT`a15qN9/T(!lf9]_%g"k[(!o55qHZfb%+_l.mdA9M)V7=8,)3V%tk?pI8MtFSh(K$JXdtYER
%Nk@SMADGdKTd18:%TkI:`?Z>l&49IWgQ^`"g-,hG-);^EYalPfV7`/h]g?=t&qU#B)TCGfCbmP%P.&2jqTYEaTu!DiV4k?;^OEX0
%Wn$Vl$H&#>q!fW1_qNW`]5U*;rI/hDk6QBhDN,k$]74q!72?hk4Q9RVStlghK94TL%8'4`oARF#(1iMNF/W8*OYN80g97rFe>:GH
%PEj>'LA'5MG_K!=<'iU/?prP_j<'b6Told.RN+X.T.*!PZe)#qP#$<j8=:bZOG.1HXSU>iUL%;FWu\_Ul7(P)@Lh9F6Sh)VNShKt
%*;J8fc/l06hUS#6aJWjSh=%hGc^J^Nq(b!EWFBOuKZ-cO_]B,)cRQZ48HMD-=_u.b=139FL<.UMG3S4ai$M!eQ)uErNFKD]8K_CZ
%ih-,6T]4o^5QWui6li&;(Z+HHZ@jfY\X.:R8Yf(1<K7X]^`E/Rq\8J\.1gk[lN!KhKH.&IfQ_\2)'j(n>=olNACSjp&f8[T]F`N`
%<O#^b<)\M+nn*6Dhi1^,[UA/dYA<rDj1<Ah,rF<hor^%I_'?]:*qk?TVrL.I%]kOLnou_HW4tl+VRo=QMZ!ils'TSJ\'(MW@*b=?
%/Vb)FDL1as.B4fMcK:uib1FS/T^V"4@1WN;^$Hs&-oMdC`o!#ZY<>2G4"AA=ChCqe3"\_YIgJL8#qQKD<MKFNIK^HUQ\BM1iX[ZJ
%e3H-hmQ-T[#)LFdpMcb;5/C.B;1"e>LOL0Tqs<e/>n0!q,J?1;(q*aiRG*@d1#=eVnHbSNWG;R7E$OX&V3F%tU,pU49]D0R2)iC_
%1[UTWD7:^gOFSdd%U2Xd"(J3hV&V%uBM$urb>B<\'!CM?5VA43Um+]G*f6\b^=k)ua-fdS,Leo7)O<4U3JPj\:(Wr#dYe:``C?L5
%$Njjj@<cu'iZ15);L@BED7%BmM2p\!PaeG#A4^dVXr8^\%,4+<B>IET:I'ZJr694/JR4KdclP6s!\,928$b)UFs`3s_0f18U8GG0
%[a@S"CtfbP9Cu&]Ym6+8We9`@DrHm[Q.Gbc!!=@Xb7`'M?/S\6;pgph8p+s,d[mYN7Vrpu<ga^Oc[.m7G(c7G9Yjc;]*@qT.%=Lc
%XAtq(])aF>\hWb4%]u97ck0/,/5BG1W9T--=>["I=SjA=Jk#ATVh%/3jl7'iTR84TqlYk=%1+=:NbOeY^.M%V.VroXb*p0#dSNAp
%D)emB-^G]qRA=`8pf$Qnr].Kh\'#N8(In/kGFR.7VA.LCY:nmGN>N6GW[N?;P\SG.flM8WKS;Khdb&WN3:$/DTmZ+J<KoXoDd@I2
%Wcg;MAd539WNrKu=BSbdM=\WAhCa6q,0a-"[@``qSg!!91s'Ce^-0ZkD!I&L^-\_C/E+-gD$8@48W[aeWZIbD?J;3h]8WnZ2P%KH
%Xh6gCJ1Sq+qk_mScN,V*U!gNk!t4TZ=%sib"TPDP$<cBSIY4HlR*lUP<og`FC[\*E.%<eW2Kl6u\;eDX=)n@dFT_*o"4]bAbL9(f
%*e]TNG"WRB)(B<u;JCM(5,rUDR*n`3_5n!dRXFU.-9u1gBt7OSUDR1V-.MVV6l[Idkoa*r0R!rVs*DM=eB3"L2',Zhq7jr`.^:rB
%9bWf["1LKJdf--&M4!GMVp=h_:7J6[ACOH\?oMCu.Wd:?r^:.)b'uqE,m"=EPBM'!*XE9:Kfhq'3G1=kL3T>BYX1K^Q*OC8n3qeK
%O09=$pS$)I/T]J5B`D5@`[MEQ5SkC6[dIa%m>TODN'mqq>B[E_dBta%UT`O!-IL^Xh`(:K`f5Z=oM8.N+Q0EbB_Qe(m4Tq"5E#k>
%oi6LE^d:sg?/:_@L$O?ekV"5tOliR=^)S-q5J\6o'tWJ?RT[I'W"&]UT;:BoMYG=/(URKc>#kah`Vh%`ad0hNGrUiiSK/:H[00J#
%;1lA"O1O>;\\`-rI8S]/5Q385Xj0t92?g@O\)C9>A3;R/b>WTJg^oI)io/%b-)Rmt\Xg<+2]^TB!8?/IWpdR^.C+4Aaf3IFU>Oit
%`5VQ(DqaqV$"B+7Rp&=/I[.R`6drZoM*[j@cV)+r=o/"UH#@t>j?mL[o6@dumGSe3A:\j&0VbYu;/oAnNIW;)TQ`p2,fA>DBQ[Qo
%b.\(k32'Ke+KRI]',''%_^d^sHO$;qT.n;DE2O"D9uX@&edKY9_u;LiW[+sKqH.Q%heerR7%tQ\Y47Eg`j"h<UYXR]69!]\Ytm@d
%KpUN-gFu0r_dg1KAbf]"T4k1Q42?2b1oHS.<0;)CNbS3Q-$t*0\K[SM:%MD1#`Lf^QBY(FQ=-Q`M#%HH:YAGO=up8/_I;Z`PLDm&
%@(JCGcL^t^goC'bH^05!<-L%?oo.RbR#p6%hEEu@%A>&`POSr/G'-I<KWC(`$nZ&+T:T>8#IKduO'c)E7sMK/Ug#Jj,o+470)55;
%!2#%Cfn;qEcRb@raI6J%Jr#<hb'4*=>)cnr"BVLp%S@'a9/u<d!'QlQE:V$98_*-HcEq=]9dfcm^T35`lQ8FU\.DKUR,8M)=QGbi
%\NB;&Xl:FZlZTqO2-^gf(kPCPgEDVi9>-D6!`#n$b&2Ut"uO1,"Zm.KOS2nfq3XW)X`)EUlTSp`YAU?32gl]nL:@<7Wfs+mHP,JU
%9$bjacV0U^Gtu]VC.6\$bPHoaUd,u?=3G_ceH!Ff,pC&AE8(-M&Cm440Q`t*0(lKpPb^NJn+"aYl7Sf>s*f1(G't(=0escF2lWo<
%&]T]Ue5U^-WFJoEeWs'Xhl4Rsh.)s2c$'19clic>@2QN&$5AG[(t^63REUBK'#SZHo2&=Gq'1qcg2i6@FXJnKa[f,I675_L"8DUo
%BbA*Ig1R@_`On;uiDs9Zaq%hCVs)K@=YDGo\2?cHa5-S#SY1H9UCc!lhqiNe-0J9E9YS7>#tb`IMdaCr3cA4i6gE*(VK2?6B^4_k
%R/8T15m_)$1g&6n;X'1N3C7Tk)3?/U<O8@89Ndr[g"hoOBkdI5pH&S'*:0!8&SE_!nYP)2;d,jfP!!HbOO>2"XgZ;nYXoY+'BJ#p
%Ds_MU%&M-e*"$Om@K<ufjEJWp1Ir/Zel[i'Ne&P\l^,I;9bl0>p"nCHUFqPR,kT\3ji.1:hc(osI<E0O-Fqq8C44m13k[H_>o@'b
%khPkpo"#B>@I)`^j)00I(7)0U'LchAgl'1co%g+19:%1+jmoI?&\<CWB_Eb)P[9-S^Y&Z&7!Im5,rp*g,te:&N"bRo3QaVoS&qV>
%gR5dfm_U_$,Pr+%Z]+?LAADkcgZ,qD2O]tfGc7s"&<dr;@;%d?-0j'pI7L3#;iKFG8DhBmAWOS7rGYcJ9l9`"ST[@8m@$7`D0*Cd
%Tr*eW/"I7R4-MQhYo7+UpM1Veer]*l+:7(8^.B*B,=DU71VYXA/=,%6eB+IB*CTp\,=ILTF+D\o-k8MsDj_<%onG0g2fX\I:`o"A
%2IT(3W6cW_9+'&rqn%U.9"a9/"K<Pt%5Y=Z/3/a[!6WdY,j$%aDYp_8`+\>r'j?ud@M(SOP*$fdmQR^d_5JI7]_G1Jk]Ro3H42n=
%4-q+S,:AH6ok*q8>MF2$p2eo%/n/Lp:Jo+r21Oub7j7^$'*o4.o4kj1:rL4dBe_,T4_!:6):>D6qG*NgL?d"g,mio]*M3u%lef=V
%1?9&kY\r?%^K/_AkXD3JaU-Qt.5((Shd,q!e"'b0c[@>29EE@e[>Ht;<?HU//_7/rH-->(S'Wlab)lX`LcY*^W#:KU's$\-rs0Q4
%kgcSW$7I5sYMs[pIWpb$?3aps)Zg]4dbMZaW]sT+-'L#V1%V4Y3+#ER?dHr04`AB-F>!MfVoYOC>#7LP*VGr@,fc.M[B63S$+T7"
%>KWG@*oFC1G!"5)K3U[eB36]FI=VrMJC::\DOAJF[Wp+4ZpNa2.3F#u=K<_VK5ar38_&WH\<ED3;6^"5+c0^m8#+>/c-q>9g!%_+
%Eg[fW4.TJ<;F8KK3A'a#;Hka+)^+ClTsrbm`Eje>iQl!q2uK*o"aXq./f2X\GH.%0pIcB:?*Ct22WRh@17'NQd7:.:A5@+2X8,_!
%Y7cY%i!DY!1e3g'].Q`0M1.ZpgoEu9),(alrY]Z^0;>i$/;GYD)V%!]gNTUg>@4N*o[$X>9"\*"hsY',KLq-CG_^C2FAO,qBB?bR
%\!:2qSY=@F=CkBp/iiK'Jf/:Uba\!DOcB<fkXZ!XY@"uN78s*8:WV;9@T)Y]Pf_ds>qn]BRu4-<*L.8mC=["gTBfAZ-d'bl?X)eh
%95:cakJ.[l6@Ei6#,V\4`tG%OMECK$$GYa"nHtouVc(#ESpB;6'2aDEH@ho/)KW,4N*@1#24qAb1N6lhc@_CYd!Dm)^L'i:]*</P
%qAu"%HTEI"h^/CUn%FroG?,BP@4_RskGuLgcOs5K,L%bX54j/oW,%h15SY(q8VXfj'GcsK)JV;&@>[J2#R*5P!LP6k"&3nsk4V</
%J?'A11/4hI'*%O^OZNX5SLU]e#B1o>O_/4i)>]m&j%XN[%A$&0p33!0.Pu7Y^K^`qFe)0d,Y;$jpEe@>aA#;]d^8B>=@+`580bs&
%dBH!7U1fXeDH,GBq"M`&c8C[(aCJA#4"T4Cgta%GSk!"YV:s5,fNd&#Sd,^M_1L]uW>M`?E$I^^lY>qaH/3m>T#ct8s":^!-F-HR
%lfi4C=tm-VN:JDkA7D?&gSJ9b1r&j=b2lS1YM?D*4O,:(%F=5ffauF@1mp2.bkg*o8f@T=L8JI3,+$%FogJ7'IQ^ABYIZj`mc;>Q
%n/m?VXCWllAP5.F=M'@E)]5U0^HL[mgRqgkdSe*Yb"t@8+-\u?l$o3.mL#Xt>i.fTP3<ebj2<9JU$4L)k!6c1,ao0hQS/`P=2Gb6
%/P9p2D=%@?/8>_4Q0:'96?Ot1Bu-!m;f0"@WDu=%;=o7N/@$-S-#4[dO6$`[j>TMM^6;7SA)<[rF:k!SM4@=SKqKFiY1AXP17DV8
%631?OPRX_7gfDr2%`TUmHRK(ipC=(M,jg*6iT))rWsM&oA\K"o9IPf5U9-`K`m(Jp(-6WuSJXGfS]IZFB4XI7P,-'qA,,bo-C+-j
%+IkX[92?M$=TUQ`,,Beq;D;[bo.*nl8>kC8U5Rqq`<"g(%qS660%MIiq5i_38NVV,b;2f\l3L1qOt#p?Gi1OknL[?f42f%q3;^d]
%EC[^k]+c(c-HL=O<EVDDi.L9(SnA-S7foeUOH_`2.<M'#Z_-Pc,8fK3-jW56?9:L9kpT-H0oD&+G/C/<EO@Yq6-&\Z(oT2G1f`PK
%3AQ5$T`eH/RSMH<F99j>_;Z-8Y!It8b5/o3f0peu]!DPSRB6+t&h1%X6hND(!^qVS?JR!<*9QrRba[C06p\1H&pPWLnAR]r*B!fJ
%(040,;Au4^3l]kDB[f,6UY#ad^!u=P0(?]5jFuM@`e^q2dD/neq<TQ+juumj]KD+o(ORi3*'8=&_orkoYXW0CASZ7E1qhsXG>,-F
%7!5$W(6.^,a-M5>bURWIP*rRJ5Q")m]6lpX&WO43$Q="g*?"-;q6?LndhkA@d8$RZnWIWCKLZiR"dNhXU!c)XGE(_e'l6:\@%#<,
%9T\a!gER=I\=]o=S7h;u;UC-?5.R.8"R/!Dp=&]U/cO7]G?KCSa\GC0;k6!aL;X+0m+)s):a$Q7FYIKnVd?g6,65;&.T3pK"2E4t
%.nU>f(';+m'e(1!MKKS9*`;NIWo<2D!>a#rdIM!4l8]4PSkpg`5'dV6+bS&\:mE&)T'B[(>!Pf4iSZ27NXSKP-mKQg)O9mj7J(V[
%65m0f"]`[;#JE=WS3EEO!A#,QH>[T0i\A4j&okq++[R8%Y?+N?:[N@U1*kEI%@BO4F<1*AL1Tkj*EeWJKBe5Vr\\`H(jGA\!X7.Z
%8DO?%8"-jj"["2;iIQVq"Rtn!@P$5#[NKR,SHT>m6ROCPNO,u8K<:F5freAVYo/n#fu'l32rgpe)eUI<]\WkDo^%a]ktBW-ir/_i
%LC\sO!<'@T2V/MM2CLMqSD(2:DHc99Z#[6im-?BdM6^N[&??I%b\sXc6ieQkJ2o3U>g8h$_QrAH/D#<BV?(EIOgU]B`Z/CFA@>mu
%]VZt1MEE-q9o!(p6tt]aAjZSfQ[b?-F4<7m_=1IR3po1=g[n%[\QZOhqiToODa[#O;ABPVaJ[(ZN+gpFo)Or]q?cQY6T]KBBqbUc
%$&f,9<Qaqh&"uVV8gMTi?if?jJ*U/ZH8*Q&Md%\E3Ze>N*)`1O]8ZXZI,_tN"C:&E:;'3U]O"!K6hQqJ2,dnfjLq(r^2'MTkIKW<
%9'!am<L>nQ)*ii,SBTGe]pg(mlM4;eN[n4+\3n;BRF`)D5se>O5I;Et.%%@D)5:0\>i[PR`!D[bSAH=mS_M;dSn4pu6c[9Hn`a_>
%.QUr92SjRWql"#h7Du=7`5gCO08_qIKCH.mV0b;@?U=qk3mgpXZ[Gf'lTU"udYF?g%(Rd"FbXV^kWqPR>*Q.8%sM`T;Za:K17:!j
%9iuiXl2eCD3VXbbE0L@OCiLnH[]6k@iFjG5fDr.ImFn7-kWK2Xm'^j]._no]?*^HhJEV:Bgh[u/ZI(ZFW$lY%m"*"\:uFD;FW\F"
%7UfLS6Ut8ZfPt$3_RjpE33Oisj+quR34-A:,mV=uEpc=$3XYDB*1]FAQE'Ee1eSpANE-iI9?W#emQm!IV69T(>6BGG9HB/%B2t:I
%B_FH5)D"7s9r!mHWi;;lJ4=/4$P?s1o;"F!*jM):A%h:">5<V_5,%FQr9=&@hS.Tor8eP"lir6M3FC6eJQ`o6ao-aU&?s80dL\u@
%BG%YS2>4=9lHBUH7'4p64/>9J<Ne`oF*hRMCQVNrN(XG#\+<Ng8o[<VH5r8';2j7101:?:@M4`qVn5+0T`*D%4>is,^H%b[+d*9@
%/fKMQ!fE<<2Me?"=X/0PN"b5`6C/5?Q"D_t1.k;K'G=.8Fg8HT.NaOLTX];%J9q`5=2;-J,m1DaHm'"p76KUaj.e1A*DG$Q.+iWe
%(a9pgWlMt]*8Fgk1"Ngjn5'U1$p^o(0i7&TopBHW!36Ol3]oI`qVI8&=h`BQT>\3%-'<eC"nIJED'$kMC=VN.Q-cLjLj!C'Lp0NE
%O"dIBiu-'F(#_EOC7u96"f5]ua>.e9T8+#hU\c$hd<us3,m[adkG0r]Zg.(U)(C)e!b8k_n3R@_dX3J^W#-fY[2bBU?>H)W5d%rY
%7uU6+O\:f73][755G.%QQN5a!:c@q/W=6i))NcLO2-C4RBo(*f%k-ea"m$SH(rMl$&0\?VKqVuH6U5TbB@&'cDL8M4)$pA1&.*'t
%rWdg/UdX]<#X++e_Ou;^R<]'.;*knlE]b<10LF-`9se(lm'1aE3RiK2mUYc'Td&:PRVd53CemdHHD-b5cILrl?,Hfe`sNm*hPj)\
%L:f[#^Nf$!"G?$c#4Fu9!T3Y?=!c2k4AOTam<f+[3]Am:hIk?G^XA$QAWD!rd1kJYJuOk-(q,WW$9^T)GhfD+JI_3'+^bm#7>a-j
%ZPLScbo/KXDCFh%O6sAK<b.d^>Q71E<`-+9NN8Pr'E_i'ZY>)kf-(H.e-3jQ-oo"^dXLIgb+[mDg>W-P+ZY_aXNA9+G,ssHT`fU;
%G`7ZBNF7Y.jS4Ijs-?foZD_BY\88WnWH<A:m3[#EdBM&G3("K:M_`+t'IX?+F-NVq7esdBUcDmtMRPX^F4lDC;RU%t%Gc5%mm;BR
%D`HT0pI-F>jg81%mVQ(tmo=%)"mrSZYk?T-,re0)l3CX6jkem.3Ql]^5XGYX<KH_dHG3Ai_=.Bhj+mR'2r<r^I4>sV1rWoT\l6tf
%L7O)BQC^Bd[T5%X)4/F1Lp#],bnD<nZ,ep@$TPA<XU?&pD2Wq7'_(3[L)C+.F<\P6luu+#1:>4hTq="?I'E_l#IH-Ng6O-`U9K^;
%(6MkFJRaX=:T<4YF6G(Km2($F86qqWb<&EBG\MJ[bcMG2p4CfmUB$!ZiXpl:@p#B$o`4jqUbhkdqbWNCdQA`0G.FKJI<u4-/B0DA
%[GHsPChX0>,NM`2TAY/0"Tk!#=IQTAf.r5X1c?3Z?'KVr8nhJT9C=OXr_NXRP/N]-gur4KF<9o`>(\D1cX9<7T:JYXp'D5cX>N2d
%!nmZiMh+8SJg_KZ`YLc_F`<GZdMum#'q*e,la[8h8JN`)R:RLF;iE.d0CK>@QRgZf`D!QhcN7a?"KnI6Z#`@3[V6([.j2ug;bL&S
%f=)4"1$8*46r=R"$3K:kS&6!bWfR)o;Q5=0(*cHo3u,/lNhTJ#$WUA>rc:0S,df7pis93r/JpsO"UeNudG*\[BN=Ip/u2`RBpjo@
%oYs!Jqmp5O/dDPI<_#4HK7u\u*Pm$M?!AmNLP7\MG=uT8h)m)6AE[X'::BVMYoc5rP!$(iJdllB%gIM'"[T;:qZ%=&&D\.t]Ce:J
%lWZ#NY&=$'/iDuJB.qiUeaYH4AJk#'os'XuQhc!-m<W^dkR*XFRaW#:p4*cs:>$A9L0ZtsNZ\(%\*\7!<OdjLk84K(`mm8$)o,hN
%Tb#fWmajY7\e?@u)&R:UFu<r'Tl&UiNQUs*?H%C_/k+/5:m6@<?uBXSQd/\$N3aTkPF)BWl/(KqGQ:Ir8m>b_\Z!/N"6cb%f&"Js
%^,4dg?taK#MM<`^ZXWRoG<%rh`CYAZ!;[JR<i;4n[!-`'(tqbDKN;2IJdMlih6MMk:FIabU!Vl1m9">V)XQF&DnXrLFS_1qDf"o9
%[@&1mm[]g4(:>j.lU+:lbt8Bh@S-(6L/8m;kP/\kBIss,bgeR93`sLN3SBKuZr!<%Z"'*c&0j9&<R):1*Q.B+;hBL4(]Y)DinOCn
%=[hm.FX-(sVSqWZS"jPA:T^$e8LHOZfM569+IHAi'c[\u9%`KLCi<>cZdXSHPmTCiXr-2t^nFT\C^LhF&>s5W2E;(0D15Q2l]]Ho
%b'rXXbN94;R2)X"V3kE3H(g,ld8>"mJW>i8_G/rcK6"!7_["2IfXWY*QREIRX_m)JM.5QPKmO;CWcGKVG:_:\L$M9sr'^jgODjRr
%F,W?F"Uh8$aFM[a6'#(Q=[W+UXa4>OkeCEAk,r?P);ndhQ[R(LpC&!&-]_X=Xjm\[61e/U,ke:6W,3/Na"ME>"KmiOQ:[OhHCA`\
%e3R;!2cWqj[9_IJ/4)M%#Z8V<iqjhKHmU3hJ;u-9Tt\-)&3c.Q$m+[Q]V_]Z8s&_8UX]QaP3%h@7>I4^[^)]Ug56HFZZ_*eF9<er
%!I@#Y:;mL##C=;YT+^g^OBmF8VPu6`Y'AfA7lq,g>m&at6I`Me"Uk+OjC9<L-#LJuXM:\`'-W8mK5_H6%Lj",j+U%(@B6>TY-!rl
%gQ[^)ljZuDe/X..o(.c9W1eB0':]klf[Z/@S^uO*<GbePau1&D#8GKY]1REda[2X.>fqW6_]gdO\&n'e",\JHH[=2;b<@Sn%PmC-
%?ia$Zo"r,h&Ig5Ha)a@"N>Fh4K;jE'Cj\(O?K]TTD%k8aA@J$SkD4"_6o=,eYH.FhW-,ecl*0-B:A9$=Q^stm+d3Nd[g%P<OAbkR
%?<g3?S_*V%qp@,o!o3:EL5pPaHo[lYj!Is4='KT`3;<jpWb[]bo_n*.HTT5[iGQI;j65=i[;b<i/)_@*]E"hh1"h7ZC80Y@G>n`#
%Dhf9DH-E:eX5(EKKm%2C_A&S<\6Zsl?#H^f.OWQ&@TE1!AHQRFVJk?W)gEOHR&4s@h/4`6hhRGKFDGsJlem5]TAI-5(^;E$fS6/B
%m\!P8J<a5X?\^HiT$l,tT.krGed.8Pbc"]]Dm>/7)-25!J3_Nok)f%rq]t$g%:)jm1p$:E;sh2Zgt,H+6\n&u"(PT8%pu#Q,'0r1
%Y1i6k-\1PmoS\DNI8pJY1Bu$V2J>tfC8TX,8$ehuXF&7;G.kX"]?V7k]hAeYBSg\=Cs(fWbPL<=:r*\")<2Q]nO0A*/AQdgUJmrC
%_`Y+IW!)iu*Do:3'5USj'].:hg$M]YWlS7W(m_NEDp*F,S/jS5'I*mQ\>>bt(@FQ7D6"*LM/HYXb4j*jKeZqgd)`q=F1IXGZJo&*
%g6>!,:DT*6\h$$ClLM5EpOZK-Q80$0A!0=QD0C9rYV9_7D4?H<14n+1b#a%!FG'l0Vt&O$2(=df:+?LsG("XKP[jKT/1L5UCeki]
%S/[K/]'%lLpYCR2mLW%1bfrh[B8Ur.hR<rFgj-im)'nj82L)CZ'&2o78GkKM0A>!7"9Q,IX,ban%d4XAKi)eJ/us\.H`[`J<kDND
%,M3Uo=!8KabLYYOM/@>2\f9qcrc?N9cm_:b%Tk0[bBq1WZXbSOj$l"F/1`cdmhXenKa+o$`am#_>:B)CO5FDmdt?`bZ13g`]p8&F
%nelmfZZKs:W-jUBIQ>[=qq8'p]!u^7$u3b)d%Ncq:SHSQ1f?/mB%m$3h:A8HZO72!'WT#V.l7eYhma3l_'r@f^JD\F;mAZZHPBVW
%lmbm6gF9M1<Nq9k5:'k8h6^4DWSfV%5*[LI?_L:JnH(A7`FlOmX+ICDT:rPbJ"c%A`5pZ_iJ%'M7RM!;:bp-m/g7kij$``AU!gXI
%:pb!JEK>gG:rjQ[go[UF$LM-&+c3)5RuA1[&XqGUDWj=uJ=HnZ2Oc12MYBg@/[[WC.o50u*AC+>E7OOMc5R?W-1[IqB9tbl^H($8
%!J2D6c03kH<9&1*i8T%Ifa@Bm7_*T316#+%qT)&*o);#kdWPakdDO>JYTiJ2kX+`FbKB7l<\YOYll+-%@f/:#IohIU`Du#h`L8F.
%XU4\kYVpeid+L&^<Nh"k-.UB86)96KFkKH<DN5Jq)%39=ahY!a_X2=lh6<U&b$C;B7Rs^JO,TIhb<$pg6be<)Yk>T'QO7*!jCG`Z
%GK'$=p=$GpO*6kAPc\b/3C:7](Lb-"Ma+\5I+$p+DS'a=YDZR"M(\N&7)>ZI^:,:3Z9pWq&O:bPG9Qt$L>d._/O.s]'oBqiMN,Tr
%M7=Wb5UL:uH4L.FV@,U2m:$2nkD.oF,bIjHb-CmVbq*3b^+F$'(I4o9/Z-dMMC(eIkko.JmmFj+hko\.VXA@Mb,_QuSZDr6nn)Xh
%H'47pIKh7-b:e%M-E*Z2`&*"Wn+n$/WVTQBMY=ofCK,3U*dbbTl/(Mtn`9QBMg<;Q_t@%f^?NfVDnT.O*9NtWlBbR$`T>;*bun?r
%,O"d#1F>hOf;n:r+/7W9'=%)Lld32#a0p>Zr,e(GgA@m#]=7dJcb&l@qVHBV:ZE@DVhb06WO.=(3EZ@k?cN?FL6JFkQMM3M,5,]4
%8c_fm*N9/31"(>](\G:?4.T%4%O7?TeR,q"UV)15+8:HL;O#@NZVaK-p8WWeYaXs]'6#'uk01@[AQGh_H?66[jq:W,EH$b9k/\$D
%0I[u2D;-RBVP?_3A0C+-5_3:oAU$Z*5[$aonqgYN4roDB\S^?i-a\D]3gADJj_48jJA=+=r)d;-!HsEqad<88]@cXQ(pddIZ440[
%Mk1-W%mW'5<$,cWE+U/;0&@d3KL:aeVA[2,QYlZsK.Fh6d@!K5+%27<n]N7p"h_^XNTS6A\6so.1"$`gkTrJa_ST9*FhT#-:^ScH
%C5(3mAQ:VFoB<b5f0goSObXrMPB2/PiM275@:dsi+aZ=2MePdO;pNsIhl^*paH4:_B8lJ_Q@6<Hk0(%ng"AVid1Vh'.KmjTO69i9
%6?[nmR!QJo[R)@8P+EiS;60jU+s[_'Z4OomD+WG"Th1!)$>W0R<YVq+K$E73H,=V<".^64&n=edJu',5nuAON&5dI'9'i=7<<>[m
%GG>=Q(?(+oKU%IT`%7K7j"n\HYR#8QijJ'`?;1ZlEF#8R1PG[h>na&EL2Vt+Sa)?'r-m/G$f6]Y2k(cG5a$F@`?lG+(?N"mr$<K<
%)AgHG*==+,(Pke6O*RSs"#6Yc2dQ5F/VC78?XiuUX/>H^TTU%qY;-"u`D'"<rFhC"D4;=o&^D%T%V=_dF3"tscY`Def$d&Q%$`O3
%,?.%<_g<gYBN*:10nWmR,-ZDC+m)Wa.:_hNj$dIEGQoYO6MVie/P.^V1k$0b)WNXKiaD@l"47W1,lE#W,k%t>&.AtmEW(TB/05FH
%4oT,/pD9g_cP9hmG2$gmb@;r4gW-1[(gDE2NJcB<l],ok\bA(dMJG\o#[h\A5hYHPoQ7RIGoC@L78`ukTCoo5>-JIEFAf7'7gE[O
%LU;uYSk$0$bHZ[sm4QfTC/JYsM.B?2<OAGKKFWS0B=mf3X*N2U"gqs9q/.oC*PHQX6@7SC7QQO;-nCr]&'SjP8QB!.Q0@7B-b?i>
%d,8RU85oaenC%]4'9+q'3BE>6=7hC9F,u+-fH,5p&UYDI$h3!'!G/k0dhn_KRKUT1!'XTVjGW6n!"H#nha7!?9=0g)h)`-5L-@#C
%'rf>Nh4Zo4'0;cVoEIUY/NS$B)-0+XnkgE(e0Gu)=+]e1I*L%sjmLL"088,OZ^sPk%ZI,VH7\L\M!f7,Zf_!>cpD2iYq1PU$JcW=
%J!;-.MPpPPM$OGGJH%E%ES5)'bsH=!h)"#KLbJT]`:pOGr64O_h<lh@kYoubJX7XBMWr3G$@,HX=R,C6-&(AhoH7n<#A\T@aW9Qt
%+%(jbo4:(n*PqAn\;3J;._3-b:cQ'WT;-8%((+=Jd9cQJe!n^1CAP+\r&As+C2*u18DD%1*n?Ja$K@^A`<Xs_f!/O05Z)QgJ]u8=
%f?lM2LP-aQ"AhU8gV-4JkQ$F]!JT!l)2Ln\OO,Ec0`_-7XYsnpZ+4\:8CM/[.^%1gdT+@<focd4<sUXHNmg.-4V]Ob:.^fWKu0+(
%U&FGgc.6E<W1n.<o]qY['hk:DoKq$I=B8dU)WijT(fA!%XnTOi3";q'h9-".V9lLh$]<im.I3R+k.^;T1P3%i3]IZ5m5'JA2-H.q
%>7pO.;q7IS>de?))trl\Nhg4E[qQQj>T6&QL-eoInCL!/8KG(7j%@Vo]Y3!FhPtnr<jOU8OghViNM8ZB'S=Ou`7js[5NMgj1m1YZ
%3#$qX1*=:m^<Zu3hX8/@6Tt)2/*/YTr/T'+EGhj>o7B#6ZD-isWMoMViI$X(0hak"EH\J8EjgoOTcP8qdmk;L;#BhRWNF0/7bTHT
%NQI+BR$-d?9_OH/FEn_ijBM5_L\0P]!@ZU6]G]do5>ggfDQ&^F9]kF"PA)'Xan./tgfC;"JS12qrd(q(I\+!1]u'c$HeCaU@'#%P
%[6f"*k,TVpUN'Dt,Z'^1:D(S;Mbrr@1RY.2=1m.jJR(I]^R<F!R7sDCc"Js7o>S8YidBZo>J8rTSl6I$Rfm5mnVg&`&42*GFdEbL
%2W'tOMF:k4BipN,b24)uaR=a9[qdKlaWt_[,*&j?#KnB_QW"8[Z6L3Z>tr)DBlZdPEqT8;g4i#o@SDbr9DVMYb>NRQ7FN"7F3KNq
%`eLM6cX^TZBT[gC4sL1g'Lc2Z95MkC$73'\'Y8-g3`k-4Fp^*kS@Rd^Fo`A17l,icfX9_3b+\0mEJc2e`4j%mBMJ*U,$J0?-/$p9
%*&%dJ@h7!3FH1Lc>7uOhjEes^W'GLp0g\XNF.)=?pMhXR[>`SC_poF7jgO2._]VC@,kr7Wh5%ikXM$8:$?\N0N->flM.Picd,<oD
%m,HVf26MAt)Q$:<RQRU\$'=n'THO4*c7m64WG2cmA:\W*!RB8i[5kb[ZEDk/[cWn@C,aKtHfbq#YD9)g4o,8\aVUXTJB%!kAU4ld
%o[E3(NB^nu@8okT9S3e$'jK4ViO5DQM]5V_(Jp6!qSal=CQ.iiiBGA5bij2S6FdJa(=>,L/7/H$n'!!Zs)&%im537=]5%O#^WdH;
%[9L8]YAGo4ppFM8R1H`f6^/2GgJO!q=&j`gZ3LeQ07K')#t`$K(bF`kr7EA"+4JGHC=+jA5Zc?EqC9];_)j^/ouj$PI(M`$m[8#f
%:>9qSD01ePnBp\[T7WqT@8`qNQh]*u@2&\[U4cJnkU_f<<jNaNL79iWG:SJS3(V-*ELe2_gu2(X$14\t4cP\]n4t,jm$GK^bEm_T
%oDejZ5Q:>r%mU!Bht;Ku_pAARa3Xe_p&"3-Igc2D&"e@JqN'Mus8.:nrVl?):VVAXn#nC:J,]81h`h)6ofmBplfG&5?[r%AQg\9g
%If6`_r^RPX\f1M9_]SmWDa/^G5KKK,NW~>
%AI9_PrivateDataEnd
